; PHP マニュアル 2009-03-06版より生成
;  (c) 1997-2009 the PHP Documentation Group
apc_add /// bool apc_add ( string $key , mixed $var [, int $ttl= 0 ] )\n変数をデータ領域にキャッシュする
apc_cache_info /// array apc_cache_info ([ string $cache_type [, bool $limited= false ]] )\nAPC のデータから、キャッシュされた情報を取得する
apc_clear_cache /// bool apc_clear_cache ([ string $cache_type ] )\nAPC キャッシュをクリアする
apc_compile_file /// bool apc_compile_file ( string $filename )\nファイルをバイトコードキャッシュに保存し、すべてのフィルタをバイパスする
apc_define_constants /// bool apc_define_constants ( string $key , array $constants [, bool $case_sensitive= true ] )\n定数の組を定義し、それを取得あるいは一括定義する
apc_delete /// bool apc_delete ( string $key )\n格納されている変数をキャッシュから取り除く
apc_fetch /// mixed apc_fetch ( string $key [, bool &$success ] )\n格納されている変数をキャッシュから取得する
apc_load_constants /// bool apc_load_constants ( string $key [, bool $case_sensitive= true ] )\n定数群をキャッシュから読み込む
apc_sma_info /// array apc_sma_info ([ bool $limited= false ] )\nAPC の共有メモリ割り当てに関する情報を取得する
apc_store /// bool apc_store ( string $key , mixed $var [, int $ttl= 0 ] )\n変数をデータ領域にキャッシュする
apd_breakpoint /// bool apd_breakpoint ( int $debug_level )\nインタプリタの処理を停止し、ソケットからの CR を待つ
apd_callstack /// array apd_callstack ( void )\n現在のコールスタックを配列で返す
apd_clunk /// void apd_clunk ( string $warning [, string $delimiter ] )\n警告とコールスタックをスローする
apd_continue /// bool apd_continue ( int $debug_level )\nインタプリタを再開する
apd_croak /// void apd_croak ( string $warning [, string $delimiter ] )\nエラーとコールスタックをスローし、終了する
apd_dump_function_table /// void apd_dump_function_table ( void )\n現在の関数テーブルを出力する
apd_dump_persistent_resources /// array apd_dump_persistent_resources ( void )\nすべての持続的なリソースを配列で返す
apd_dump_regular_resources /// array apd_dump_regular_resources ( void )\n現在のすべての一般リソースを配列で返す
apd_echo /// bool apd_echo ( string $output )\nデバッグ用ソケットに表示する
apd_get_active_symbols /// array apd_get_active_symbols ( void )\nローカルスコープ内の現在の変数名を配列で取得する
apd_set_pprof_trace /// string apd_set_pprof_trace ([ string $dump_directory [, string $fragment= "pprof" ]] )\nセッションのデバッグを開始する
apd_set_session_trace_socket /// bool apd_set_session_trace_socket ( string $tcp_server , int $socket_type , int $port , int $debug_level )\nリモートセッションのデバッグを開始する
apd_set_session_trace /// void apd_set_session_trace ( int $debug_level [, string $dump_directory ] )\nセッションのデバッグを開始する
apd_set_session /// void apd_set_session ( int $debug_level )\n現在のデバッグレベルを変更あるいは設定する
override_function /// bool override_function ( string $function_name , string $function_args , string $function_code )\n組み込みの関数を上書きする
rename_function /// bool rename_function ( string $original_name , string $new_name )\nグローバルの関数テーブルで関数名を変更する
bcompiler_load_exe /// bool bcompiler_load_exe ( string $filename )\nbcompiler の exe ファイルを読み込み、クラスを生成する
bcompiler_load /// bool bcompiler_load ( string $filename )\nbz 圧縮されたファイルを読み込み、クラスを生成する
bcompiler_parse_class /// bool bcompiler_parse_class ( string $class , string $callback )\nクラスのバイトコードを読み込み、ユーザ関数をコールする
bcompiler_read /// bool bcompiler_read ( resource $filehandle )\nファイルハンドルを読み込み、クラスを生成する
bcompiler_write_class /// bool bcompiler_write_class ( resource $filehandle , string $className [, string $extends ] )\n定義したクラスをバイトコードとして書き込む
bcompiler_write_constant /// bool bcompiler_write_constant ( resource $filehandle , string $constantName )\n定義した定数をバイトコードとして書き込む
bcompiler_write_exe_footer /// bool bcompiler_write_exe_footer ( resource $filehandle , int $startpos )\n開始位置および exe 形式ファイルのフッタを書き込む
bcompiler_write_file /// bool bcompiler_write_file ( resource $filehandle , string $filename )\nphp ソースファイルをバイトコードとして書き込む
bcompiler_write_footer /// bool bcompiler_write_footer ( resource $filehandle )\nコンパイルされたデータの終了を示す文字 \x00 を書き込む
bcompiler_write_function /// bool bcompiler_write_function ( resource $filehandle , string $functionName )\n定義した関数をバイトコードとして書き込む
bcompiler_write_functions_from_file /// bool bcompiler_write_functions_from_file ( resource $filehandle , string $fileName )\nファイル内で定義されているすべての関数をバイトコードとして書き込む
bcompiler_write_header /// bool bcompiler_write_header ( resource $filehandle [, string $write_ver ] )\nbcompiler のヘッダを書き込む
bcompiler_write_included_filename /// bool bcompiler_write_included_filename ( resource $filehandle , string $filename )\nインクルードされたファイルをバイトコードとして書き込む
debug_backtrace /// array debug_backtrace ([ bool $provide_object= true ] )\nバックトレースを生成する
debug_print_backtrace /// void debug_print_backtrace ( void )\nバックトレースを表示する
error_get_last /// array error_get_last ( void )\n最後に発生したエラーを取得する
error_log /// bool error_log ( string $message [, int $message_type= 0 [, string $destination [, string $extra_headers ]]] )\nエラーメッセージを送信する
error_reporting /// int error_reporting ([ int $level ] )\n出力する PHP エラーの種類を設定する
restore_error_handler /// bool restore_error_handler ( void )\n以前のエラーハンドラ関数を回復する
restore_exception_handler /// bool restore_exception_handler ( void )\n以前の例外ハンドラ関数を回復する
set_error_handler /// mixed set_error_handler ( callback $error_handler [, int $error_types= E_ALL | E_STRICT ] )\nユーザ定義のエラーハンドラ関数を設定する
set_exception_handler /// string set_exception_handler ( callback $exception_handler )\nユーザ定義の例外ハンドラ関数を設定する
trigger_error /// bool trigger_error ( string $error_msg [, int $error_type= E_USER_NOTICE ] )\nユーザレベルのエラー/警告/通知メッセージを生成する
user_error /// trigger_error のエイリアス
inclued_get_data /// array inclued_get_data ( void )\ninclued データを取得する
assert_options /// mixed assert_options ( int $what [, mixed $value ] )\n様々な assert フラグを設定/取得する
assert /// bool assert ( mixed $assertion )\nassertion が FALSE であるかどうかを調べる
dl /// int dl ( string $library )\n実行時に PHP 拡張モジュールをロードする
extension_loaded /// bool extension_loaded ( string $name )\nある拡張機能がロードされているかどうかを調べる
gc_collect_cycles /// int gc_collect_cycles ( void )\nすべての既存ガベージサイクルを強制的に収集する
gc_disable /// void gc_disable ( void )\n循環参照コレクタを無効にする
gc_enable /// void gc_enable ( void )\n循環参照コレクタを有効にする
gc_enabled /// bool gc_enabled ( void )\n循環参照コレクタの状態を返す
get_cfg_var /// string get_cfg_var ( string $option )\nPHP 設定オプションの値を取得する
get_current_user /// string get_current_user ( void )\n現在の PHP スクリプトの所有者の名前を取得する
get_defined_constants /// array get_defined_constants ([ bool $categorize ] )\nすべての定数の名前とその値を連想配列として返す
get_extension_funcs /// array get_extension_funcs ( string $module_name )\nあるモジュールの関数名を配列として返す
get_include_path /// string get_include_path ( void )\n現在の include_path 設定オプションを取得する
get_included_files /// array get_included_files ( void )\ninclude または require で読み込まれたファイルの名前を配列として返す
get_loaded_extensions /// array get_loaded_extensions ([ bool $zend_extensions= false ] )\nコンパイル/ロードされている全てのモジュールの名前を配列として返す
get_magic_quotes_gpc /// int get_magic_quotes_gpc ( void )\nmagic quotes gpc の現在の設定を得る
get_magic_quotes_runtime /// int get_magic_quotes_runtime ( void )\nmagic_quotes_runtime の現在アクティブな設定値を取得する
get_required_files /// get_included_files のエイリアス
getenv /// string getenv ( string $varname )\n環境変数の値を取得する
getlastmod /// int getlastmod ( void )\n最終更新時刻を取得する
getmygid /// int getmygid ( void )\nPHP スクリプトの所有者の GID を得る
getmyinode /// int getmyinode ( void )\n現在のスクリプトの inode を取得する
getmypid /// int getmypid ( void )\nPHP のプロセス ID を取得する
getmyuid /// int getmyuid ( void )\nPHP スクリプト所有者のユーザ ID を取得する
getopt /// array getopt ( string $options [, array $longopts ] )\nコマンドライン引数のリストからオプションを取得する
getrusage /// array getrusage ([ int $who= 0 ] )\nカレントリソースの使用に関する情報を得る
ini_alter /// ini_set のエイリアス
ini_get_all /// array ini_get_all ([ string $extension [, bool $details= true ]] )\nすべての設定オプションを得る
ini_get /// string ini_get ( string $varname )\n設定オプションの値を得る
ini_restore /// void ini_restore ( string $varname )\n設定オプションの値を元に戻す
ini_set /// string ini_set ( string $varname , string $newvalue )\n設定オプションの値を設定する
main /// main のダミー
memory_get_peak_usage /// int memory_get_peak_usage ([ bool $real_usage= false ] )\nPHP によって割り当てられたメモリの最大値を返す
memory_get_usage /// int memory_get_usage ([ bool $real_usage= false ] )\nPHP に割り当てられたメモリの量を返す
php_ini_loaded_file /// string php_ini_loaded_file ( void )\n読み込まれた php.ini ファイルのパスを取得する
php_ini_scanned_files /// string php_ini_scanned_files ( void )\n追加の ini ディレクトリにある .ini ファイルのリストを取得する
php_logo_guid /// string php_logo_guid ( void )\nロゴの guid を取得する
php_sapi_name /// string php_sapi_name ( void )\nウェブサーバと PHP の間のインターフェイスの型を返す
php_uname /// string php_uname ([ string $mode= "a" ] )\nPHP が稼動しているオペレーティングシステムに関する情報を返す
phpcredits /// bool phpcredits ([ int $flag= CREDITS_ALL ] )\nPHP に関するクレジットを出力する
phpinfo /// bool phpinfo ([ int $what= INFO_ALL ] )\nいろいろな PHP 情報を出力する
phpversion /// string phpversion ([ string $extension ] )\n現在の PHP バージョンを取得する
putenv /// bool putenv ( string $setting )\n環境変数の値を設定する
restore_include_path /// void restore_include_path ( void )\ninclude_path 設定オプションの値を元に戻す
set_include_path /// string set_include_path ( string $new_include_path )\ninclude_path 設定オプションをセットする
set_magic_quotes_runtime /// bool set_magic_quotes_runtime ( bool $new_setting )\nmagic_quotes_runtime の現在アクティブな設定をセットする
set_time_limit /// void set_time_limit ( int $seconds )\n実行時間の最大値を制限する
sys_get_temp_dir /// string sys_get_temp_dir ( void )\n一時ファイル用に使用されるディレクトリのパスを返す
version_compare /// mixed version_compare ( string $version1 , string $version2 [, string $operator ] )\nふたつの "PHP 標準" バージョン番号文字列を比較する
zend_logo_guid /// string zend_logo_guid ( void )\nZend guid を取得する
zend_thread_id /// int zend_thread_id ( void )\n現在のスレッドの一意な ID を返す
zend_version /// string zend_version ( void )\n現在の Zend Engine のバージョンを取得する
overload /// void overload ( string $class_name )\nクラスのプロパティおよびメソッドに関してオーバーロードを可能にする
flush /// void flush ( void )\n出力バッファをフラッシュする
ob_clean /// void ob_clean ( void )\n出力バッファをクリア(消去)する
ob_end_clean /// bool ob_end_clean ( void )\n出力用バッファをクリア(消去)し、出力のバッファリングをオフにする
ob_end_flush /// bool ob_end_flush ( void )\n出力用バッファをフラッシュ(送信)し、出力のバッファリングをオフにする
ob_flush /// void ob_flush ( void )\n出力バッファをフラッシュ(送信)する
ob_get_clean /// string ob_get_clean ( void )\n現在のバッファの内容を取得し、出力バッファを削除する
ob_get_contents /// string ob_get_contents ( void )\n出力用バッファの内容を返す
ob_get_flush /// string ob_get_flush ( void )\n出力バッファをフラッシュし、その内容を文字列として返した後で出力バッファリングを終了する
ob_get_length /// int ob_get_length ( void )\n出力バッファの長さを返す
ob_get_level /// int ob_get_level ( void )\n出力バッファリング機構のネストレベルを返す
ob_get_status /// array ob_get_status ([ bool $full_status = FALSE ] )\n出力バッファのステータスを取得する
ob_gzhandler /// string ob_gzhandler ( string $buffer , int $mode )\n出力バッファを gzip 圧縮するための ob_start コールバック関数
ob_implicit_flush /// void ob_implicit_flush ([ int $flag ] )\n自動フラッシュをオンまたはオフにする
ob_list_handlers /// array ob_list_handlers ( void )\n使用中の出力ハンドラの一覧を取得する
ob_start /// bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )\n出力のバッファリングを有効にする
output_add_rewrite_var /// bool output_add_rewrite_var ( string $name , string $value )\nURL リライタの値を追加する
output_reset_rewrite_vars /// bool output_reset_rewrite_vars ( void )\nURL リライタの値をリセットする
runkit_class_adopt /// bool runkit_class_adopt ( string $classname , string $parentname )\nある基底クラスを、他のクラスを継承させたクラスに変換する。親クラスの適切なメソッドを追加する
runkit_class_emancipate /// bool runkit_class_emancipate ( string $classname )\n他のクラスを継承しているクラスから継承関係を解消し、 親クラスから継承しているメソッドを取り除く
runkit_constant_add /// bool runkit_constant_add ( string $constname , mixed $value )\ndefine() と同じだが、クラス定数も指定可能
runkit_constant_redefine /// bool runkit_constant_redefine ( string $constname , mixed $newvalue )\n定義済みの定数を再定義する
runkit_constant_remove /// bool runkit_constant_remove ( string $constname )\n定義済みの定数を削除する
runkit_function_add /// bool runkit_function_add ( string $funcname , string $arglist , string $code )\n新しい関数を追加する。create_function と同じ
runkit_function_copy /// bool runkit_function_copy ( string $funcname , string $targetname )\n関数を別の名前でコピーする
runkit_function_redefine /// bool runkit_function_redefine ( string $funcname , string $arglist , string $code )\n関数の定義を新しい実装で置き換える
runkit_function_remove /// bool runkit_function_remove ( string $funcname )\n関数の定義を削除する
runkit_function_rename /// bool runkit_function_rename ( string $funcname , string $newname )\n関数名を変更する
runkit_import /// bool runkit_import ( string $filename [, int $flags= RUNKIT_IMPORT_CLASS_METHODS ] )\nファイルから関数やクラスの定義を読み込み、必要に応じて書き換える
runkit_lint_file /// bool runkit_lint_file ( string $filename )\n指定したファイルの PHP 文法をチェックする
runkit_lint /// bool runkit_lint ( string $code )\n指定した PHP コードの文法をチェックする
runkit_method_add /// bool runkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags= RUNKIT_ACC_PUBLIC ] )\n指定したクラスに、新しいメソッドを動的に追加する
runkit_method_copy /// bool runkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )\nあるクラスのメソッドを別のクラスにコピーする
runkit_method_redefine /// bool runkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags= RUNKIT_ACC_PUBLIC ] )\n指定されたメソッドのコードを動的に変更する
runkit_method_remove /// bool runkit_method_remove ( string $classname , string $methodname )\n指定したメソッドを動的に削除する
runkit_method_rename /// bool runkit_method_rename ( string $classname , string $methodname , string $newname )\n指定したメソッドの名前を動的に変更する
runkit_return_value_used /// bool runkit_return_value_used ( void )\n現在の関数の返り値が使用されているかどうかを調べる
runkit_sandbox_output_handler /// mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] )\nサンドボックス内での出力を取得・処理するための関数を指定する
runkit_superglobals /// array runkit_superglobals ( void )\n登録されているスーパーグローバルを、数値添字の配列で返す
id3_get_frame_long_name /// string id3_get_frame_long_name ( string $frameId )\nID3v2 フレームの長い名前を取得する
id3_get_frame_short_name /// string id3_get_frame_short_name ( string $frameId )\nID3v2 フレームの短い名前を取得する
id3_get_genre_id /// int id3_get_genre_id ( string $genre )\nジャンルの ID を取得する
id3_get_genre_list /// array id3_get_genre_list ( void )\n使用可能なジャンルの一覧を取得する
id3_get_genre_name /// string id3_get_genre_name ( int $genre_id )\nジャンル ID に対応する名前を取得する
id3_get_tag /// array id3_get_tag ( string $filename [, int $version= ID3_BEST ] )\nID3 タグに含まれるすべての情報を取得する
id3_get_version /// int id3_get_version ( string $filename )\nID3 タグのバージョンを取得する
id3_remove_tag /// bool id3_remove_tag ( string $filename [, int $version= ID3_V1_0 ] )\n既存の ID3 タグを削除する
id3_set_tag /// bool id3_set_tag ( string $filename , array $tag [, int $version= ID3_V1_0 ] )\nID3 タグに格納されている情報を更新する
openal_buffer_create /// resource openal_buffer_create ( void )\nOpenAL バッファを生成する
openal_buffer_data /// bool openal_buffer_data ( resource $buffer , int $format , string $data , int $freq )\nバッファのデータを読み込む
openal_buffer_destroy /// bool openal_buffer_destroy ( resource $buffer )\nOpenAL バッファを削除する
openal_buffer_get /// int openal_buffer_get ( resource $buffer , int $property )\nOpenAL バッファのプロパティを取得する
openal_buffer_loadwav /// bool openal_buffer_loadwav ( resource $buffer , string $wavfile )\n.wav ファイルをバッファに読み込む
openal_context_create /// resource openal_context_create ( resource $device )\n音声処理コンテキストを作成する
openal_context_current /// bool openal_context_current ( resource $context )\n指定したコンテキストを現在のコンテキストにする
openal_context_destroy /// bool openal_context_destroy ( resource $context )\nコンテキストを削除する
openal_context_process /// bool openal_context_process ( resource $context )\n指定したコンテキストを処理する
openal_context_suspend /// bool openal_context_suspend ( resource $context )\n指定したコンテキストをサスペンドする
openal_device_close /// bool openal_device_close ( resource $device )\nOpenAL デバイスを閉じる
openal_device_open /// resource openal_device_open ([ string $device_desc ] )\nOpenAL 音声レイヤを初期化する
openal_listener_get /// mixed openal_listener_get ( int $property )\nリスナーのプロパティを取得する
openal_listener_set /// bool openal_listener_set ( int $property , mixed $setting )\nリスナーのプロパティを設定する
openal_source_create /// resource openal_source_create ( void )\nソースリソースを生成する
openal_source_destroy /// bool openal_source_destroy ( resource $source )\nソースリソースを削除する
openal_source_get /// mixed openal_source_get ( resource $source , int $property )\nOpenAL ソースのプロパティを取得する
openal_source_pause /// bool openal_source_pause ( resource $source )\nソースを一時停止する
openal_source_play /// bool openal_source_play ( resource $source )\nソースの再生を開始する
openal_source_rewind /// bool openal_source_rewind ( resource $source )\nソースを巻き戻す
openal_source_set /// bool openal_source_set ( resource $source , int $property , mixed $setting )\nソースのプロパティを設定する
openal_source_stop /// bool openal_source_stop ( resource $source )\nソースの再生を停止する
openal_stream /// resource openal_stream ( resource $source , int $format , int $rate )\nソースのストリーム再生を開始する
kadm5_chpass_principal /// bool kadm5_chpass_principal ( resource $handle , string $principal , string $password )\nプリンシパルのパスワードを変更する
kadm5_create_principal /// bool kadm5_create_principal ( resource $handle , string $principal [, string $password [, array $options ]] )\n指定したパラメータで、kerberos のプリンシパルを作成する
kadm5_delete_principal /// bool kadm5_delete_principal ( resource $handle , string $principal )\nkerberos プリンシパルを削除する
kadm5_destroy /// bool kadm5_destroy ( resource $handle )\n管理サーバへの接続を閉じ、関連するすべてのリソースを開放する
kadm5_flush /// bool kadm5_flush ( resource $handle )\nKerberos データベースに対するすべての変更を取り消す
kadm5_get_policies /// array kadm5_get_policies ( resource $handle )\nKerberos データベースから、すべてのポリシーを取得する
kadm5_get_principal /// array kadm5_get_principal ( resource $handle , string $principal )\nKerberos データベースから、プリンシパルのエントリを取得する
kadm5_get_principals /// array kadm5_get_principals ( resource $handle )\nKerberos データベースから、すべてのプリンシパルを取得する
kadm5_init_with_password /// resource kadm5_init_with_password ( string $admin_server , string $realm , string $principal , string $password )\nKADM5 ライブラリへの接続をオープンし、必要なステータス情報を初期化する
kadm5_modify_principal /// bool kadm5_modify_principal ( resource $handle , string $principal , array $options )\nkerberos プリンシパルを、指定したパラメータで変更する
radius_acct_open /// resource radius_acct_open ( void )\n課金用の Radius ハンドルを作成する
radius_add_server /// bool radius_add_server ( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries )\nサーバを追加する
radius_auth_open /// resource radius_auth_open ( void )\n認証用の Radius ハンドルを作成する
radius_close /// bool radius_close ( resource $radius_handle )\nすべてのリソースを開放する
radius_config /// bool radius_config ( resource $radius_handle , string $file )\n指定した設定ファイルをライブラリに読み込ませる
radius_create_request /// bool radius_create_request ( resource $radius_handle , int $type )\n課金あるいは認証のリクエストを作成する
radius_cvt_addr /// string radius_cvt_addr ( string $data )\n生データを IP アドレスに変換する
radius_cvt_int /// int radius_cvt_int ( string $data )\n生データを整数に変換する
radius_cvt_string /// string radius_cvt_string ( string $data )\n生データを文字列に変換する
radius_demangle_mppe_key /// string radius_demangle_mppe_key ( resource $radius_handle , string $mangled )\n変形されたデータから mppe キーを得る
radius_demangle /// string radius_demangle ( resource $radius_handle , string $mangled )\nデータを復元する
radius_get_attr /// mixed radius_get_attr ( resource $radius_handle )\n属性を取得する
radius_get_vendor_attr /// array radius_get_vendor_attr ( string $data )\nベンダ固有の属性を取得する
radius_put_addr /// bool radius_put_addr ( resource $radius_handle , int $type , string $addr )\nIP アドレス属性を設定する
radius_put_attr /// bool radius_put_attr ( resource $radius_handle , int $type , string $value )\nバイナリ属性を設定する
radius_put_int /// bool radius_put_int ( resource $radius_handle , int $type , int $value )\n整数属性を設定する
radius_put_string /// bool radius_put_string ( resource $radius_handle , int $type , string $value )\n文字列属性を設定する
radius_put_vendor_addr /// bool radius_put_vendor_addr ( resource $radius_handle , int $vendor , int $type , string $addr )\nベンダ固有の IP アドレス属性を設定する
radius_put_vendor_attr /// bool radius_put_vendor_attr ( resource $radius_handle , int $vendor , int $type , string $value )\nベンダ固有のバイナリ属性を設定する
radius_put_vendor_int /// bool radius_put_vendor_int ( resource $radius_handle , int $vendor , int $type , int $value )\nベンダ固有の整数属性を設定する
radius_put_vendor_string /// bool radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value )\nベンダ固有の文字列属性を設定する
radius_request_authenticator /// string radius_request_authenticator ( resource $radius_handle )\nリクエスト認証子を返す
radius_send_request /// int radius_send_request ( resource $radius_handle )\nリクエストを送信し、応答を待つ
radius_server_secret /// string radius_server_secret ( resource $radius_handle )\n共有秘密鍵を返す
radius_strerror /// string radius_strerror ( resource $radius_handle )\nエラーメッセージを返す
cal_days_in_month /// int cal_days_in_month ( int $calendar , int $month , int $year )\n指定した年とカレンダーについて、月の日数を返す
cal_from_jd /// array cal_from_jd ( int $jd , int $calendar )\nユリウス積算日からサポートされるカレンダーに変換する
cal_info /// array cal_info ([ int $calendar= -1 ] )\n特定のカレンダーに関する情報を返す
cal_to_jd /// int cal_to_jd ( int $calendar , int $month , int $day , int $year )\nサポートされるカレンダーからユリウス積算日に変換する
easter_date /// int easter_date ([ int $year ] )\n指定した年における復活祭の真夜中のUnix時を得る
easter_days /// int easter_days ([ int $year [, int $method= CAL_EASTER_DEFAULT ]] )\n指定した年において、3 月 21 日から復活祭までの日数を得る
FrenchToJD /// int frenchtojd ( int $month , int $day , int $year )\nフランス革命暦をユリウス積算日に変換する
GregorianToJD /// int gregoriantojd ( int $month , int $day , int $year )\nグレゴリウス日をユリウス積算日に変換する
JDDayOfWeek /// mixed jddayofweek ( int $julianday [, int $mode= CAL_DOW_DAYNO ] )\n曜日を返す
JDMonthName /// string jdmonthname ( int $julianday , int $mode )\n月の名前を返す
JDToFrench /// string jdtofrench ( int $juliandaycount )\nユリウス積算日をフランス革命暦(共和暦)に変換する
JDToGregorian /// string jdtogregorian ( int $julianday )\nユリウス積算日をグレゴリウス日に変換する
jdtojewish /// string jdtojewish ( int $juliandaycount [, bool $hebrew= false [, int $fl= 0 ]] )\nユリウス積算日をユダヤ暦に変換する
JDToJulian /// string jdtojulian ( int $julianday )\nユリウス積算日をユリウス暦に変換する
jdtounix /// int jdtounix ( int $jday )\nユリウス歴を Unix タイムスタンプに変換する
JewishToJD /// int jewishtojd ( int $month , int $day , int $year )\nユダヤ暦の日付けをユリウス積算日に変換する
JulianToJD /// int juliantojd ( int $month , int $day , int $year )\nユリウス暦をユリウス積算日に変換する
unixtojd /// int unixtojd ([ int $timestamp= time() ] )\nUnix タイムスタンプをユリウス歴に変換する
checkdate /// bool checkdate ( int $month , int $day , int $year )\nグレゴリオ歴の日付/時刻の妥当性を確認します
date_add /// のエイリアス DateTime::add
date_create_from_format /// DateTime::createFromFormat のエイリアス
date_create /// DateTime date_create ([ string $time= "now" [, DateTimeZone $timezone= NULL ]] )\n新しい DateTime オブジェクトを返す
date_date_set /// のエイリアス DateTime::setDate
date_default_timezone_get /// string date_default_timezone_get ( void )\nスクリプト中の日付/時刻関数で使用されるデフォルトタイムゾーンを取得する
date_default_timezone_set /// bool date_default_timezone_set ( string $timezone_identifier )\nスクリプト中の日付/時刻関数で使用されるデフォルトタイムゾーンを設定する
date_diff /// DateTime::diff のエイリアス
date_format /// のエイリアス DateTime::format
date_get_last_errors /// DateTime::getLastErrors のエイリアス
date_interval_create_from_date_string /// DateInterval::createFromDateString のエイリアス
date_interval_format /// DateInterval::format のエイリアス
date_isodate_set /// DateTime::setISODate のエイリアス
date_modify /// DateTime::modify のエイリアス
date_offset_get /// DateTime::getOffset のエイリアス
date_parse_from_format /// array date_parse_from_format ( string $format , string $date )\n指定した日付についての情報を取得する
date_parse /// array date_parse ( string $date )\n指定した日付に関する詳細な情報を連想配列で返す
date_sub /// DateTime::sub のエイリアス
date_sun_info /// array date_sun_info ( int $time , float $latitude , float $longitude )\n日の出/日の入り時刻と薄明かり (twilight) の開始/終了時刻の情報を含む配列を返す
date_sunrise /// mixed date_sunrise ( int $timestamp [, int $format= SUNFUNCS_RET_STRING [, float $latitude= ini_get("date.default_latitude") [, float $longitude= ini_get("date.default_longitude") [, float $zenith= ini_get("date.sunrise_zenith") [, float $gmt_offset= 0 ]]]]] )\n指定した日付と場所についての日の出時刻を返す
date_sunset /// mixed date_sunset ( int $timestamp [, int $format= SUNFUNCS_RET_STRING [, float $latitude= ini_get("date.default_latitude") [, float $longitude= ini_get("date.default_longitude") [, float $zenith= ini_get("date.sunset_zenith") [, float $gmt_offset= 0 ]]]]] )\n指定した日付と場所についての日の入り時刻を返す
date_time_set /// DateTime::setTime のエイリアス
date_timestamp_get /// DateTime::getTimestamp のエイリアス
date_timestamp_set /// DateTime::setTimestamp のエイリアス
date_timezone_get /// DateTime::getTimezone のエイリアス
date_timezone_set /// DateTime::setTimezone のエイリアス
date /// string date ( string $format [, int $timestamp ] )\nローカルの日付/時刻を書式化する
getdate /// array getdate ([ int $timestamp= time() ] )\n日付/時刻情報を取得する
gettimeofday /// mixed gettimeofday ([ bool $return_float ] )\n現在の時間を得る
gmdate /// string gmdate ( string $format [, int $timestamp ] )\nGMT/UTC の日付/時刻を書式化する
gmmktime /// int gmmktime ([ int $hour= gmdate("H") [, int $minute= gmdate("i") [, int $second= gmdate("s") [, int $month= gmdate("n") [, int $day= gmdate("j") [, int $year= gmdate("Y") [, int $is_dst= -1 ]]]]]]] )\nGMT 日付から Unix タイムスタンプを取得する
gmstrftime /// string gmstrftime ( string $format [, int $timestamp= time() ] )\nロケールの設定に基づいて GMT/UTC 時刻/日付をフォーマットする
idate /// int idate ( string $format [, int $timestamp= time() ] )\nローカルな時刻/日付を整数として整形する
localtime /// array localtime ([ int $timestamp= time() [, bool $is_associative= false ]] )\nローカルタイムを得る
microtime /// mixed microtime ([ bool $get_as_float ] )\n現在の Unix タイムスタンプをマイクロ秒まで返す
mktime /// int mktime ([ int $hour= date("H") [, int $minute= date("i") [, int $second= date("s") [, int $month= date("n") [, int $day= date("j") [, int $year= date("Y") [, int $is_dst= -1 ]]]]]]] )\n日付を Unix のタイムスタンプとして取得する
strftime /// string strftime ( string $format [, int $timestamp= time() ] )\nロケールの設定に基づいてローカルな日付・時間をフォーマットする
strptime /// array strptime ( string $date , string $format )\nstrftime が生成した日付/時刻をパースする
strtotime /// int strtotime ( string $time [, int $now ] )\n英文形式の日付を Unix タイムスタンプに変換する
time /// int time ( void )\n現在の Unix タイムスタンプを返す
timezone_abbreviations_list /// DateTimeZone::listAbbreviations のエイリアス
timezone_identifiers_list /// DateTimeZone::listIdentifiers のエイリアス
timezone_location_get /// DateTimeZone::getLocation のエイリアス
timezone_name_from_abbr /// string timezone_name_from_abbr ( string $abbr [, int $gmtOffset= -1 [, int $isdst= -1 ]] )\n略称からタイムゾーン名を返す
timezone_name_get /// DateTimeZone::getName のエイリアス
timezone_offset_get /// DateTimeZone::getOffset のエイリアス
timezone_open /// DateTimeZone timezone_open ( string $timezone )\n新しい DateTimeZone オブジェクトを返す
timezone_transitions_get /// DateTimeZone::getTransitions のエイリアス
newt_bell /// void newt_bell ( void )\nビープ音を端末に送信する
newt_button_bar /// resource newt_button_bar ( array &$buttons )\n作成したボタンを含むグリッドを返す
newt_button /// resource newt_button ( int $left , int $top , string $text )\n新しいボタンを作成する
newt_centered_window /// int newt_centered_window ( int $width , int $height [, string $title ] )\n画面の中央に指定したサイズのウィンドウをオープンする
newt_checkbox_get_value /// string newt_checkbox_get_value ( resource $checkbox )\nチェックボックスリソースの値を取得する
newt_checkbox_set_flags /// void newt_checkbox_set_flags ( resource $checkbox , int $flags , int $sense )\nチェックボックスリソースを設定する
newt_checkbox_set_value /// void newt_checkbox_set_value ( resource $checkbox , string $value )\nチェックボックスの値を設定する
newt_checkbox_tree_add_item /// void newt_checkbox_tree_add_item ( resource $checkboxtree , string $text , mixed $data , int $flags , int $index [, int $... ] )\n新しいアイテムをチェックボックスツリーに追加する
newt_checkbox_tree_find_item /// array newt_checkbox_tree_find_item ( resource $checkboxtree , mixed $data )\nチェックボックスツリーのアイテムを探す
newt_checkbox_tree_get_current /// mixed newt_checkbox_tree_get_current ( resource $checkboxtree )\nチェックボックスツリーの選択されているアイテムを返す
newt_checkbox_tree_get_entry_value /// string newt_checkbox_tree_get_entry_value ( resource $checkboxtree , mixed $data )\n説明
newt_checkbox_tree_get_multi_selection /// array newt_checkbox_tree_get_multi_selection ( resource $checkboxtree , string $seqnum )\n説明
newt_checkbox_tree_get_selection /// array newt_checkbox_tree_get_selection ( resource $checkboxtree )\n説明
newt_checkbox_tree_multi /// resource newt_checkbox_tree_multi ( int $left , int $top , int $height , string $seq [, int $flags ] )\n説明
newt_checkbox_tree_set_current /// void newt_checkbox_tree_set_current ( resource $checkboxtree , mixed $data )\n説明
newt_checkbox_tree_set_entry_value /// void newt_checkbox_tree_set_entry_value ( resource $checkboxtree , mixed $data , string $value )\n説明
newt_checkbox_tree_set_entry /// void newt_checkbox_tree_set_entry ( resource $checkboxtree , mixed $data , string $text )\n説明
newt_checkbox_tree_set_width /// void newt_checkbox_tree_set_width ( resource $checkbox_tree , int $width )\n説明
newt_checkbox_tree /// resource newt_checkbox_tree ( int $left , int $top , int $height [, int $flags ] )\n説明
newt_checkbox /// resource newt_checkbox ( int $left , int $top , string $text , string $def_value [, string $seq ] )\n説明
newt_clear_key_buffer /// void newt_clear_key_buffer ( void )\n追加の入力を待たずに、端末の入力バッファの内容をクリアする
newt_cls /// void newt_cls ( void )\n説明
newt_compact_button /// resource newt_compact_button ( int $left , int $top , string $text )\n説明
newt_component_add_callback /// void newt_component_add_callback ( resource $component , mixed $func_name , mixed $data )\n説明
newt_component_takes_focus /// void newt_component_takes_focus ( resource $component , bool $takes_focus )\n説明
newt_create_grid /// resource newt_create_grid ( int $cols , int $rows )\n説明
newt_cursor_off /// void newt_cursor_off ( void )\n説明
newt_cursor_on /// void newt_cursor_on ( void )\n説明
newt_delay /// void newt_delay ( int $microseconds )\n説明
newt_draw_form /// void newt_draw_form ( resource $form )\n説明
newt_draw_root_text /// void newt_draw_root_text ( int $left , int $top , string $text )\n指定した位置に文字列を表示する
newt_entry_get_value /// string newt_entry_get_value ( resource $entry )\n説明
newt_entry_set_filter /// void newt_entry_set_filter ( resource $entry , callback $filter , mixed $data )\n説明
newt_entry_set_flags /// void newt_entry_set_flags ( resource $entry , int $flags , int $sense )\n説明
newt_entry_set /// void newt_entry_set ( resource $entry , string $value [, bool $cursor_at_end ] )\n説明
newt_entry /// resource newt_entry ( int $left , int $top , int $width [, string $init_value [, int $flags ]] )\n説明
newt_finished /// int newt_finished ( void )\nnewt インターフェースを終了する
newt_form_add_component /// void newt_form_add_component ( resource $form , resource $component )\nフォームにコンポーネントを追加する
newt_form_add_components /// void newt_form_add_components ( resource $form , array $components )\nフォームに複数のコンポーネントを追加する
newt_form_add_hot_key /// void newt_form_add_hot_key ( resource $form , int $key )\n説明
newt_form_destroy /// void newt_form_destroy ( resource $form )\nフォームを破壊する
newt_form_get_current /// resource newt_form_get_current ( resource $form )\n説明
newt_form_run /// void newt_form_run ( resource $form , array &$exit_struct )\nフォームを実行する
newt_form_set_background /// void newt_form_set_background ( resource $from , int $background )\n説明
newt_form_set_height /// void newt_form_set_height ( resource $form , int $height )\n説明
newt_form_set_size /// void newt_form_set_size ( resource $form )\n説明
newt_form_set_timer /// void newt_form_set_timer ( resource $form , int $milliseconds )\n説明
newt_form_set_width /// void newt_form_set_width ( resource $form , int $width )\n説明
newt_form_watch_fd /// void newt_form_watch_fd ( resource $form , resource $stream [, int $flags ] )\n説明
newt_form /// resource newt_form ([ resource $vert_bar [, string $help [, int $flags ]]] )\nフォームを作成する
newt_get_screen_size /// void newt_get_screen_size ( int &$cols , int &$rows )\n参照で渡された引数に、現在の端末の大きさを格納する
newt_grid_add_components_to_form /// void newt_grid_add_components_to_form ( resource $grid , resource $form , bool $recurse )\n説明
newt_grid_basic_window /// resource newt_grid_basic_window ( resource $text , resource $middle , resource $buttons )\n説明
newt_grid_free /// void newt_grid_free ( resource $grid , bool $recurse )\n説明
newt_grid_get_size /// void newt_grid_get_size ( resouce $grid , int &$width , int &$height )\n説明
newt_grid_h_close_stacked /// resource newt_grid_h_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )\n説明
newt_grid_h_stacked /// resource newt_grid_h_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )\n説明
newt_grid_place /// void newt_grid_place ( resource $grid , int $left , int $top )\n説明
newt_grid_set_field /// void newt_grid_set_field ( resource $grid , int $col , int $row , int $type , resource $val , int $pad_left , int $pad_top , int $pad_right , int $pad_bottom , int $anchor [, int $flags ] )\n説明
newt_grid_simple_window /// resource newt_grid_simple_window ( resource $text , resource $middle , resource $buttons )\n説明
newt_grid_v_close_stacked /// resource newt_grid_v_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )\n説明
newt_grid_v_stacked /// resource newt_grid_v_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )\n説明
newt_grid_wrapped_window_at /// void newt_grid_wrapped_window_at ( resource $grid , string $title , int $left , int $top )\n説明
newt_grid_wrapped_window /// void newt_grid_wrapped_window ( resource $grid , string $title )\n説明
newt_init /// int newt_init ( void )\nnewt を初期化する
newt_label_set_text /// void newt_label_set_text ( resource $label , string $text )\n説明
newt_label /// resource newt_label ( int $left , int $top , string $text )\n説明
newt_listbox_append_entry /// void newt_listbox_append_entry ( resource $listbox , string $text , mixed $data )\n説明
newt_listbox_clear_selection /// void newt_listbox_clear_selection ( resource $listbox )\n説明
newt_listbox_clear /// void newt_listbox_clear ( resource $listobx )\n説明
newt_listbox_delete_entry /// void newt_listbox_delete_entry ( resource $listbox , mixed $key )\n説明
newt_listbox_get_current /// string newt_listbox_get_current ( resource $listbox )\n説明
newt_listbox_get_selection /// array newt_listbox_get_selection ( resource $listbox )\n説明
newt_listbox_insert_entry /// void newt_listbox_insert_entry ( resource $listbox , string $text , mixed $data , mixed $key )\n説明
newt_listbox_item_count /// int newt_listbox_item_count ( resource $listbox )\n説明
newt_listbox_select_item /// void newt_listbox_select_item ( resource $listbox , mixed $key , int $sense )\n説明
newt_listbox_set_current_by_key /// void newt_listbox_set_current_by_key ( resource $listbox , mixed $key )\n説明
newt_listbox_set_current /// void newt_listbox_set_current ( resource $listbox , int $num )\n説明
newt_listbox_set_data /// void newt_listbox_set_data ( resource $listbox , int $num , mixed $data )\n説明
newt_listbox_set_entry /// void newt_listbox_set_entry ( resource $listbox , int $num , string $text )\n説明
newt_listbox_set_width /// void newt_listbox_set_width ( resource $listbox , int $width )\n説明
newt_listbox /// resource newt_listbox ( int $left , int $top , int $height [, int $flags ] )\n説明
newt_listitem_get_data /// mixed newt_listitem_get_data ( resource $item )\n説明
newt_listitem_set /// void newt_listitem_set ( resource $item , string $text )\n説明
newt_listitem /// resource newt_listitem ( int $left , int $top , string $text , bool $is_default , resouce $prev_item , mixed $data [, int $flags ] )\n説明
newt_open_window /// int newt_open_window ( int $left , int $top , int $width , int $height [, string $title ] )\n指定したサイズと位置でウィンドウをオープンする
newt_pop_help_line /// void newt_pop_help_line ( void )\n現在のヘルプ行をスタックの内容で置き換える
newt_pop_window /// void newt_pop_window ( void )\nトップウィンドウを画面から消去する
newt_push_help_line /// void newt_push_help_line ([ string $text ] )\n現在のヘルプ行をスタックに保存し、新しい行を表示する
newt_radio_get_current /// resource newt_radio_get_current ( resource $set_member )\n説明
newt_radiobutton /// resource newt_radiobutton ( int $left , int $top , string $text , bool $is_default [, resource $prev_button ] )\n説明
newt_redraw_help_line /// void newt_redraw_help_line ( void )\n説明
newt_reflow_text /// string newt_reflow_text ( string $text , int $width , int $flex_down , int $flex_up , int &$actual_width , int &$actual_height )\n説明
newt_refresh /// void newt_refresh ( void )\n画面の変更された部分を更新する
newt_resize_screen /// void newt_resize_screen ([ bool $redraw ] )\n説明
newt_resume /// void newt_resume ( void )\nnewt_suspend をコールした後に newt インターフェースの使用を再開する
newt_run_form /// resource newt_run_form ( resource $form )\nフォームを実行する
newt_scale_set /// void newt_scale_set ( resource $scale , int $amount )\n説明
newt_scale /// resource newt_scale ( int $left , int $top , int $width , int $full_value )\n説明
newt_scrollbar_set /// void newt_scrollbar_set ( resource $scrollbar , int $where , int $total )\n説明
newt_set_help_callback /// void newt_set_help_callback ( mixed $function )\n説明
newt_set_suspend_callback /// void newt_set_suspend_callback ( callback $function , mixed $data )\nユーザがサスペンドキーを押した際に起動するコールバック関数を設定する
newt_suspend /// void newt_suspend ( void )\n端末を元の状態に戻すよう、newt に通知する
newt_textbox_get_num_lines /// int newt_textbox_get_num_lines ( resource $textbox )\n説明
newt_textbox_reflowed /// resource newt_textbox_reflowed ( int $left , int $top , char $*text , int $width , int $flex_down , int $flex_up [, int $flags ] )\n説明
newt_textbox_set_height /// void newt_textbox_set_height ( resource $textbox , int $height )\n説明
newt_textbox_set_text /// void newt_textbox_set_text ( resource $textbox , string $text )\n説明
newt_textbox /// resource newt_textbox ( int $left , int $top , int $width , int $height [, int $flags ] )\n説明
newt_vertical_scrollbar /// resource newt_vertical_scrollbar ( int $left , int $top , int $height [, int $normal_colorset [, int $thumb_colorset ]] )\n説明
newt_wait_for_key /// void newt_wait_for_key ( void )\nキーが押されるまで結果を返さない
newt_win_choice /// int newt_win_choice ( string $title , string $button1_text , string $button2_text , string $format [, mixed $args [, mixed $... ]] )\n説明
newt_win_entries /// int newt_win_entries ( string $title , string $text , int $suggested_width , int $flex_down , int $flex_up , int $data_width , array &$items , string $button1 [, string $... ] )\n説明
newt_win_menu /// int newt_win_menu ( string $title , string $text , int $suggestedWidth , int $flexDown , int $flexUp , int $maxListHeight , array $items , int &$listItem [, string $button1 [, string $... ]] )\n説明
newt_win_message /// void newt_win_message ( string $title , string $button_text , string $format [, mixed $args [, mixed $... ]] )\n説明
newt_win_messagev /// void newt_win_messagev ( string $title , string $button_text , string $format , array $args )\n説明
newt_win_ternary /// int newt_win_ternary ( string $title , string $button1_text , string $button2_text , string $button3_text , string $format [, mixed $args [, mixed $... ]] )\n説明
ncurses_addch /// int ncurses_addch ( int $ch )\n現在の位置に文字を追加し、カーソルを進める
ncurses_addchnstr /// int ncurses_addchnstr ( string $s , int $n )\n現在の位置に指定した長さの属性付き文字列を追加する
ncurses_addchstr /// int ncurses_addchstr ( string $s )\n現在の位置に属性付き文字列を追加する
ncurses_addnstr /// int ncurses_addnstr ( string $s , int $n )\n現在の位置に、指定した長さの文字列を追加する
ncurses_addstr /// int ncurses_addstr ( string $text )\n現在の位置にテキストを出力する
ncurses_assume_default_colors /// int ncurses_assume_default_colors ( int $fg , int $bg )\nカラー 0 のデフォルト色を定義する
ncurses_attroff /// int ncurses_attroff ( int $attributes )\n指定した属性を無効とする
ncurses_attron /// int ncurses_attron ( int $attributes )\n指定した属性を有効にする
ncurses_attrset /// int ncurses_attrset ( int $attributes )\n指定した属性を設定する
ncurses_baudrate /// int ncurses_baudrate ( void )\n端末のボーレートを返す
ncurses_beep /// int ncurses_beep ( void )\n端末のビープを鳴らす
ncurses_bkgd /// int ncurses_bkgd ( int $attrchar )\n端末画面の背景属性を設定する
ncurses_bkgdset /// void ncurses_bkgdset ( int $attrchar )\n画面背景を制御する
ncurses_border /// int ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )\n属性付きの文字で画面周囲に境界を描画する
ncurses_bottom_panel /// int ncurses_bottom_panel ( resource $panel )\nパネルをスタックの最下部に移動する
ncurses_can_change_color /// bool ncurses_can_change_color ( void )\n端末の色を変更可能かどうか確認する
ncurses_cbreak /// bool ncurses_cbreak ( void )\n入力のバッファリングを変更する
ncurses_clear /// bool ncurses_clear ( void )\nスクリーンをクリアする
ncurses_clrtobot /// bool ncurses_clrtobot ( void )\n現在位置から最下部までスクリーンをクリアする
ncurses_clrtoeol /// bool ncurses_clrtoeol ( void )\n現在位置から行末までスクリーンをクリアする
ncurses_color_content /// int ncurses_color_content ( int $color , int &$r , int &$g , int &$b )\n色の RGB 値を取得する
ncurses_color_set /// int ncurses_color_set ( int $pair )\n前景/背景色を設定する
ncurses_curs_set /// int ncurses_curs_set ( int $visibility )\nカーソル状態を設定する
ncurses_def_prog_mode /// bool ncurses_def_prog_mode ( void )\n端末(プログラム)モードを保存する
ncurses_def_shell_mode /// bool ncurses_def_shell_mode ( void )\n端末(シェル)モードを保存する
ncurses_define_key /// int ncurses_define_key ( string $definition , int $keycode )\nキーコードを定義する
ncurses_del_panel /// bool ncurses_del_panel ( resource $panel )\nパネルをスタックから取り除き、削除する (しかし、関連付けられているウィンドウは削除しない)
ncurses_delay_output /// int ncurses_delay_output ( int $milliseconds )\nパディング文字を用いて端末出力を遅延させる
ncurses_delch /// bool ncurses_delch ( void )\n現在位置の文字を削除し、残った部分を左に移動する
ncurses_deleteln /// bool ncurses_deleteln ( void )\n現在位置の行を削除し、残りの部分を上に上げる
ncurses_delwin /// bool ncurses_delwin ( resource $window )\nncurses ウインドウを削除する
ncurses_doupdate /// bool ncurses_doupdate ( void )\n準備中の全ての出力を書き込み、端末をリフレッシュする
ncurses_echo /// bool ncurses_echo ( void )\nキーボード入力のエコーを有効とする
ncurses_echochar /// int ncurses_echochar ( int $character )\nリフレッシュを行いつつ 1 文字出力する
ncurses_end /// int ncurses_end ( void )\nncurses を終了し、画面を消去する
ncurses_erase /// bool ncurses_erase ( void )\n端末画面を消去する
ncurses_erasechar /// string ncurses_erasechar ( void )\n現在の erase 文字を返す
ncurses_filter /// void ncurses_filter ( void )\niniscr() および newterm() の LINES を 1 に設定する
ncurses_flash /// bool ncurses_flash ( void )\n端末画面をフラッシュする(ビジュアルベル)
ncurses_flushinp /// bool ncurses_flushinp ( void )\nキーボード入力バッファをフラッシュする
ncurses_getch /// int ncurses_getch ( void )\nキーボードから 1 文字読み込む
ncurses_getmaxyx /// void ncurses_getmaxyx ( resource $window , int &$y , int &$x )\nウィンドウの大きさを返す
ncurses_getmouse /// bool ncurses_getmouse ( array &$mevent )\nマウスイベントを読みこむ
ncurses_getyx /// void ncurses_getyx ( resource $window , int &$y , int &$x )\nウィンドウ内の現在のカーソル位置を返す
ncurses_halfdelay /// int ncurses_halfdelay ( int $tenth )\n端末をハーフディレイモードにする
ncurses_has_colors /// bool ncurses_has_colors ( void )\nカラー端末かどうか確認する
ncurses_has_ic /// bool ncurses_has_ic ( void )\n挿入/削除機能の有無を確認する
ncurses_has_il /// bool ncurses_has_il ( void )\n行挿入/削除機能の有無を確認する
ncurses_has_key /// int ncurses_has_key ( int $keycode )\n端末キーボードにおいてファンクションキーの有無を調べる
ncurses_hide_panel /// int ncurses_hide_panel ( resource $panel )\nパネルをスタックから取り除き、見えなくする
ncurses_hline /// int ncurses_hline ( int $charattr , int $n )\n現在位置に属性付きの文字を用いて最大 n 文字長の線を水平に描画する
ncurses_inch /// string ncurses_inch ( void )\n現在位置の文字と属性を取得する
ncurses_init_color /// int ncurses_init_color ( int $color , int $r , int $g , int $b )\n新規に RGB 値を設定する
ncurses_init_pair /// int ncurses_init_pair ( int $pair , int $fg , int $bg )\n色の組を確保する
ncurses_init /// void ncurses_init ( void )\nncurses を初期化する
ncurses_insch /// int ncurses_insch ( int $character )\n文字を挿入し、現在位置にある文字を含む残りの行を移動する
ncurses_insdelln /// int ncurses_insdelln ( int $count )\n現在の行の後に複数の行を挿入し、スクロールダウンする (負の数を指定すると削除し、スクロールアップする)
ncurses_insertln /// int ncurses_insertln ( void )\n行を挿入し、残りの部分をスクロールダウンする
ncurses_insstr /// int ncurses_insstr ( string $text )\n現在位置に文字列を挿入し、残りの行を右に移動する
ncurses_instr /// int ncurses_instr ( string &$buffer )\n端末画面から文字列を読み込む
ncurses_isendwin /// bool ncurses_isendwin ( void )\nNcurses が endwin モードの場合、通常の画面出力が実行可能
ncurses_keyok /// int ncurses_keyok ( int $keycode , bool $enable )\nキーコードを有効または無効にする
ncurses_keypad /// int ncurses_keypad ( resource $window , bool $bf )\nキーパッドを on あるいは off にする
ncurses_killchar /// string ncurses_killchar ( void )\n現在の行削除文字を返す
ncurses_longname /// string ncurses_longname ( void )\n端末の説明を返す
ncurses_meta /// int ncurses_meta ( resource $window , bool $8bit )\n8 ビットのメタキー情報を有効/無効にする
ncurses_mouse_trafo /// bool ncurses_mouse_trafo ( int &$y , int &$x , bool $toscreen )\n座標を変換する
ncurses_mouseinterval /// int ncurses_mouseinterval ( int $milliseconds )\nマウスボタンクリックのタイムアウトを設定する
ncurses_mousemask /// int ncurses_mousemask ( int $newmask , int &$oldmask )\nマウスオプションを設定する
ncurses_move_panel /// int ncurses_move_panel ( resource $panel , int $startx , int $starty )\n左上が [startx, starty] となるようにパネルを移動する
ncurses_move /// int ncurses_move ( int $y , int $x )\n出力位置を移動する
ncurses_mvaddch /// int ncurses_mvaddch ( int $y , int $x , int $c )\n現在位置を移動し、文字を追加する
ncurses_mvaddchnstr /// int ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n )\n位置を移動し、指定長の属性付きの文字列を追加する
ncurses_mvaddchstr /// int ncurses_mvaddchstr ( int $y , int $x , string $s )\n位置を移動し、属性付きの文字列を追加する
ncurses_mvaddnstr /// int ncurses_mvaddnstr ( int $y , int $x , string $s , int $n )\n位置を移動し、指定長の文字列を追加する
ncurses_mvaddstr /// int ncurses_mvaddstr ( int $y , int $x , string $s )\n位置を移動し、文字列を追加する
ncurses_mvcur /// int ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x )\n直ちにカーソルを移動する
ncurses_mvdelch /// int ncurses_mvdelch ( int $y , int $x )\n位置を移動し、文字を削除、行の残りを左シフトする
ncurses_mvgetch /// int ncurses_mvgetch ( int $y , int $x )\n位置を移動し、新しい位置で文字を得る
ncurses_mvhline /// int ncurses_mvhline ( int $y , int $x , int $attrchar , int $n )\n位置を新しく設定し、属性付きの文字を用いて最大n文字の水平線を描画
ncurses_mvinch /// int ncurses_mvinch ( int $y , int $x )\n位置を移動し、新しい位置の属性付きの文字を取得する
ncurses_mvvline /// int ncurses_mvvline ( int $y , int $x , int $attrchar , int $n )\n位置を新しく設定し、属性付きの文字を用いて最大 n 文字の垂直線を描画する
ncurses_mvwaddstr /// int ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text )\nウインドウの新規位置に文字列を追加する
ncurses_napms /// int ncurses_napms ( int $milliseconds )\nスリープ
ncurses_new_panel /// resource ncurses_new_panel ( resource $window )\n新しいパネルを作成し、それをウィンドウに関連づける
ncurses_newpad /// resource ncurses_newpad ( int $rows , int $cols )\n新しいパッド (window) を作成する
ncurses_newwin /// resource ncurses_newwin ( int $rows , int $cols , int $y , int $x )\n新規ウインドウを作成する
ncurses_nl /// bool ncurses_nl ( void )\n改行と復改/ラインフィードを変換する
ncurses_nocbreak /// bool ncurses_nocbreak ( void )\n端末を cooked モードに変更する
ncurses_noecho /// bool ncurses_noecho ( void )\nキーボード入力エコーを無効にする
ncurses_nonl /// bool ncurses_nonl ( void )\n改行と復改/ラインフィードを変換しない
ncurses_noqiflush /// void ncurses_noqiflush ( void )\nシグナル文字のフラッシュを無効とする
ncurses_noraw /// bool ncurses_noraw ( void )\n端末を raw モード以外に変更する
ncurses_pair_content /// int ncurses_pair_content ( int $pair , int &$f , int &$b )\n色の RGB 値を取得する
ncurses_panel_above /// resource ncurses_panel_above ( resource $panel )\nパネルの上のパネルを返す
ncurses_panel_below /// resource ncurses_panel_below ( resource $panel )\nパネルの下のパネルを返す
ncurses_panel_window /// resource ncurses_panel_window ( resource $panel )\nパネルに関連付けられたウィンドウを返す
ncurses_pnoutrefresh /// int ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )\nパッドから仮想画面にリージョンをコピーする
ncurses_prefresh /// int ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )\nパッドから仮想画面にリージョンをコピーする
ncurses_putp /// int ncurses_putp ( string $text )\nパディング情報を文字列に適用し、それを出力する
ncurses_qiflush /// void ncurses_qiflush ( void )\nシグナル文字のフラッシュを有効とする
ncurses_raw /// bool ncurses_raw ( void )\n端末を raw モードに変更する
ncurses_refresh /// int ncurses_refresh ( int $ch )\n画面をリフレッシュする
ncurses_replace_panel /// int ncurses_replace_panel ( resource $panel , resource $window )\nパネルに関連付けられたウィンドウを置き換える
ncurses_reset_prog_mode /// int ncurses_reset_prog_mode ( void )\ndef_prog_mode で保存したプログラムモードをリセットする
ncurses_reset_shell_mode /// int ncurses_reset_shell_mode ( void )\ndef_shell_mode で保存したシェルモードをリセットする
ncurses_resetty /// bool ncurses_resetty ( void )\n保存した端末モードに復帰する
ncurses_savetty /// bool ncurses_savetty ( void )\n端末の状態を保存する
ncurses_scr_dump /// int ncurses_scr_dump ( string $filename )\n画面の内容をファイルにダンプする
ncurses_scr_init /// int ncurses_scr_init ( string $filename )\nファイルダンプから画面を初期化する
ncurses_scr_restore /// int ncurses_scr_restore ( string $filename )\nファイルダンプから画面を復帰する
ncurses_scr_set /// int ncurses_scr_set ( string $filename )\nファイルダンプから画面を継承する
ncurses_scrl /// int ncurses_scrl ( int $count )\n現在位置を変更せずに画面の内容をスクロールアップまたはダウンする
ncurses_show_panel /// int ncurses_show_panel ( resource $panel )\n不可視のパネルをスタックの最上部に置き、見えるようにする
ncurses_slk_attr /// int ncurses_slk_attr ( void )\n現在のソフトラベルキー属性を返す
ncurses_slk_attroff /// int ncurses_slk_attroff ( int $intarg )\nソフトファンクションキーラベルの指定した属性を無効にする
ncurses_slk_attron /// int ncurses_slk_attron ( int $intarg )\nソフトファンクションキーラベルの指定した属性を有効にする
ncurses_slk_attrset /// int ncurses_slk_attrset ( int $intarg )\nソフトファンクションキーラベルに、指定した属性を設定する
ncurses_slk_clear /// bool ncurses_slk_clear ( void )\n画面からソフトラベルをクリアする
ncurses_slk_color /// int ncurses_slk_color ( int $intarg )\nソフトラベルキーの色を設定する
ncurses_slk_init /// bool ncurses_slk_init ( int $format )\nソフトラベルキー関数を初期化する
ncurses_slk_noutrefresh /// bool ncurses_slk_noutrefresh ( void )\n仮想画面にソフトラベルキーをコピーする
ncurses_slk_refresh /// int ncurses_slk_refresh ( void )\nソフトラベルキーを画面にコピーする
ncurses_slk_restore /// int ncurses_slk_restore ( void )\nソフトラベルキーを復帰する
ncurses_slk_set /// bool ncurses_slk_set ( int $labelnr , string $label , int $format )\nファンクションキーラベルを設定する
ncurses_slk_touch /// int ncurses_slk_touch ( void )\nncurses_slk_noutrefresh を実行する際に強制的に出力する
ncurses_standend /// int ncurses_standend ( void )\n'standout' 属性の使用を停止する
ncurses_standout /// int ncurses_standout ( void )\n'standout' 属性の使用を開始する
ncurses_start_color /// int ncurses_start_color ( void )\n色の使用を開始する
ncurses_termattrs /// bool ncurses_termattrs ( void )\n端末でサポートされる全ての属性フラグの論理和を返す
ncurses_termname /// string ncurses_termname ( void )\n端末の(簡略)名を返す
ncurses_timeout /// void ncurses_timeout ( int $millisec )\n特別なキーシーケンスのタイムアウトを設定する
ncurses_top_panel /// int ncurses_top_panel ( resource $panel )\n可視パネルをスタックの最上部に移動する
ncurses_typeahead /// int ncurses_typeahead ( int $fd )\ntypeahead 確認用に別のファイル記述子を指定する
ncurses_ungetch /// int ncurses_ungetch ( int $keycode )\n入力ストリームに 1 文字戻す
ncurses_ungetmouse /// bool ncurses_ungetmouse ( array $mevent )\nマウスイベントをキューにプッシュする
ncurses_update_panels /// void ncurses_update_panels ( void )\n仮想画面を再描画し、スタック内のパネルとの関係を反映させる
ncurses_use_default_colors /// bool ncurses_use_default_colors ( void )\n端末のデフォルト色をカラー ID -1 に割り付ける
ncurses_use_env /// void ncurses_use_env ( bool $flag )\n端末の大きさに関する環境情報の使用を制御する
ncurses_use_extended_names /// int ncurses_use_extended_names ( bool $flag )\nterminfo 記述において拡張名の使用を制御する
ncurses_vidattr /// int ncurses_vidattr ( int $intarg )\nvideo attribute モードで、端末上に文字列を表示する
ncurses_vline /// int ncurses_vline ( int $charattr , int $n )\n現在位置に最大 n 文字の属性付きの文字を用いて垂直線を描画する
ncurses_waddch /// int ncurses_waddch ( resource $window , int $ch )\nウィンドウ内の現在位置に文字を追加し、カーソルを進める
ncurses_waddstr /// int ncurses_waddstr ( resource $window , string $str [, int $n ] )\nウィンドウ内の現在位置にテキストを出力する
ncurses_wattroff /// int ncurses_wattroff ( resource $window , int $attrs )\nウィンドウの属性をオフにする
ncurses_wattron /// int ncurses_wattron ( resource $window , int $attrs )\nウィンドウの属性をオンにする
ncurses_wattrset /// int ncurses_wattrset ( resource $window , int $attrs )\nウィンドウの属性を設定する
ncurses_wborder /// int ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )\n属性文字を使用してウィンドウの周囲に線を描画する
ncurses_wclear /// int ncurses_wclear ( resource $window )\nウィンドウをクリアする
ncurses_wcolor_set /// int ncurses_wcolor_set ( resource $window , int $color_pair )\nウィンドウの色の組み合わせを設定する
ncurses_werase /// int ncurses_werase ( resource $window )\nウィンドウを消去する
ncurses_wgetch /// int ncurses_wgetch ( resource $window )\nキーボート (ウィンドウ) から文字を読み込む
ncurses_whline /// int ncurses_whline ( resource $window , int $charattr , int $n )\n指定した属性文字を用いて、最大 n 文字分の長さの水平線を ウィンドウに描画する
ncurses_wmouse_trafo /// bool ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , bool $toscreen )\nウィンドウ/標準画面の座標系を変換する
ncurses_wmove /// int ncurses_wmove ( resource $window , int $y , int $x )\nウィンドウの出力位置を移動する
ncurses_wnoutrefresh /// int ncurses_wnoutrefresh ( resource $window )\nウィンドウを仮想画面にコピーする
ncurses_wrefresh /// int ncurses_wrefresh ( resource $window )\n端末画面のウインドウをリフレッシュする
ncurses_wstandend /// int ncurses_wstandend ( resource $window )\nウィンドウの standout モードを終了する
ncurses_wstandout /// int ncurses_wstandout ( resource $window )\nウィンドウの standout モードに入る
ncurses_wvline /// int ncurses_wvline ( resource $window , int $charattr , int $n )\n指定した属性文字を用いて、最大 n 文字分の長さの垂直線を ウィンドウに描画する
readline_add_history /// bool readline_add_history ( string $line )\nヒストリに 1 行追加する
readline_callback_handler_install /// bool readline_callback_handler_install ( string $prompt , callback $callback )\nreadline コールバックインターフェースと端末を初期化し、 プロンプトを表示して結果をすぐに返す
readline_callback_handler_remove /// bool readline_callback_handler_remove ( void )\nインストールされたハンドラを削除し、端末の設定をもとに戻す
readline_callback_read_char /// void readline_callback_read_char ( void )\n文字を読み込み、改行を受け取ると readline コールバックインターフェースに通知する
readline_clear_history /// bool readline_clear_history ( void )\nヒストリをクリアする
readline_completion_function /// bool readline_completion_function ( callback $function )\n補完関数を登録する
readline_info /// mixed readline_info ([ string $varname [, string $newvalue ]] )\n種々の readline の内部変数を取得/設定する
readline_list_history /// array readline_list_history ( void )\nヒストリを一覧表示する
readline_on_new_line /// void readline_on_new_line ( void )\nカーソルが新しい行に移動したことを readline に通知する
readline_read_history /// bool readline_read_history ([ string $filename ] )\nヒストリを読み込む
readline_redisplay /// void readline_redisplay ( void )\n画面を再描画する
readline_write_history /// bool readline_write_history ([ string $filename ] )\nヒストリを書きこむ
readline /// string readline ([ string $prompt ] )\n一行読み込む
bzclose /// int bzclose ( resource $bz )\nbzip2 ファイルを閉じる
bzcompress /// mixed bzcompress ( string $source [, int $blocksize= 4 [, int $workfactor= 0 ]] )\n文字列をbzip2形式のデータに圧縮する
bzdecompress /// mixed bzdecompress ( string $source [, int $small= 0 ] )\nbzip2 形式のデータを解凍する
bzerrno /// int bzerrno ( resource $bz )\nbzip2 エラー番号を返す
bzerror /// array bzerror ( resource $bz )\nbzip2 エラー番号とエラー文字列を配列で返す
bzerrstr /// string bzerrstr ( resource $bz )\nbzip2 エラー文字列を返す
bzflush /// int bzflush ( resource $bz )\n全てのバッファリングされたデータを強制的に書き込む
bzopen /// resource bzopen ( string $filename , string $mode )\nbzip2 圧縮されたファイルをオープンする
bzread /// string bzread ( resource $bz [, int $length= 1024 ] )\nバイナリ対応の bzip2 ファイル読み込み
bzwrite /// int bzwrite ( resource $bz , string $data [, int $length ] )\nバイナリ対応の bzip2 ファイルへの書き込み
lzf_compress /// string lzf_compress ( string $data )\nLZF 圧縮を行う
lzf_decompress /// string lzf_decompress ( string $data )\nLZF 圧縮を伸長する
lzf_optimized_for /// int lzf_optimized_for ( void )\nLZF 拡張モジュールの最適化指定を取得する
rar_close /// bool rar_close ( resource $rar_file )\nRar アーカイブをクローズし、全リソースを開放する
rar_entry_get /// RarEntry rar_entry_get ( resource $rar_file , string $entry_name )\nRar アーカイブからエントリオブジェクトを取得する
Rar::extract /// bool extract ( string $dir [, string $filepath ] )\nアーカイブのエントリを展開する
Rar::getAttr /// int getAttr ( void )\nエントリの属性を取得する
Rar::getCrc /// int getCrc ( void )\nエントリの CRC を取得する
Rar::getFileTime /// string getFileTime ( void )\nエントリの最終更新時刻を取得する
Rar::getHostOs /// int getHostOs ( void )\nエントリのホスト OS を取得する
Rar::getMethod /// int getMethod ( void )\nエントリの圧縮方法を取得する
Rar::getName /// string getName ( void )\nエントリの名前を取得する
Rar::getPackedSize /// int getPackedSize ( void )\n圧縮後のエントリのサイズを取得する
Rar::getUnpackedSize /// int getUnpackedSize ( void )\n展開後のエントリのサイズを取得する
Rar::getVersion /// int getVersion ( void )\nエントリを追加するのに用いたアーカイバのバージョンを取得する
rar_list /// array rar_list ( resource $rar_file )\nRar アーカイブのエントリ一覧を取得する
rar_open /// resource rar_open ( string $filename [, string $password ] )\nRar アーカイブをオープンする
zip_close /// void zip_close ( resource $zip )\nZIP ファイルアーカイブを閉じる
zip_entry_close /// bool zip_entry_close ( resource $zip_entry )\nディレクトリエントリを閉じる
zip_entry_compressedsize /// int zip_entry_compressedsize ( resource $zip_entry )\nディレクトリエントリの圧縮時のサイズを取得する
zip_entry_compressionmethod /// string zip_entry_compressionmethod ( resource $zip_entry )\nディレクトリエントリの圧縮方法を取得する
zip_entry_filesize /// int zip_entry_filesize ( resource $zip_entry )\nディレクトリエントリの実際のファイルサイズを取得する
zip_entry_name /// string zip_entry_name ( resource $zip_entry )\nディレクトリエントリの名前を取得する
zip_entry_open /// bool zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] )\n読込み用にディレクトリエントリをオープンする
zip_entry_read /// string zip_entry_read ( resource $zip_entry [, int $length ] )\nオープンされたディレクトリエントリから読み込む
zip_open /// mixed zip_open ( string $filename )\nZip ファイルアーカイブをオープンする
zip_read /// mixed zip_read ( resource $zip )\nZip ファイルアーカイブの中の次のエントリを読み込む
ZipArchive::addEmptyDir /// bool ZipArchive::addEmptyDir ( string $dirname )\n新しいディレクトリを追加する
ZipArchive::addFile /// bool ZipArchive::addFile ( string $filename [, string $localname ] )\n指定したパスからファイルを ZIP アーカイブに追加する
ZipArchive::addFromString /// bool ZipArchive::addFromString ( string $localname , string $contents )\nその内容を指定して、ファイルを ZIP アーカイブに追加する
ZipArchive::close /// bool ZipArchive::close ( void )\nアクティブな (オープンされた、あるいは新しく作成された) アーカイブを閉じる
ZipArchive::deleteIndex /// bool ZipArchive::deleteIndex ( int $index )\nインデックスを使用して、アーカイブ内のエントリを削除する
ZipArchive::deleteName /// bool ZipArchive::deleteName ( string $name )\n名前を使用して、アーカイブからエントリを削除する
ZipArchive::extractTo /// bool ZipArchive::extractTo ( string $destination [, mixed $entries ] )\nアーカイブの内容を展開する
ZipArchive::getArchiveComment /// string ZipArchive::getArchiveComment ( void )\nZIP アーカイブのコメントを返す
ZipArchive::getCommentIndex /// string ZipArchive::getCommentIndex ( int $index [, int $flags ] )\nエントリのインデックスを使用して、エントリのコメントを返す
ZipArchive::getCommentName /// string ZipArchive::getCommentName ( string $name [, int $flags ] )\nエントリ名を使用して、エントリのコメントを返す
ZipArchive::getFromIndex /// mixed ZipArchive::getFromIndex ( int $index [, int $flags ] )\nインデックスを使用して、エントリの内容を返す
ZipArchive::getFromName /// mixed ZipArchive::getFromName ( string $name [, int $flags ] )\n名前を使用して、エントリの内容を返す
ZipArchive::getNameIndex /// string ZipArchive::getNameIndex ( int $index )\nインデックスを使用して、エントリの名前を返す
ZipArchive::getStream /// resource ZipArchive::getStream ( string $name )\n名前を使用して、エントリのファイルハンドラ (読み込み専用) を取得する
ZipArchive::locateName /// mixed ZipArchive::locateName ( string $name [, int $flags ] )\nアーカイブ内のエントリのインデックスを返す
ZipArchive::open /// mixed ZipArchive::open ( string $filename [, int $flags ] )\nZIP ファイルアーカイブをオープンする
ZipArchive::renameIndex /// bool ZipArchive::renameIndex ( int $index , string $newname )\nインデックスを使用してエントリ名を変更する
ZipArchive::renameName /// bool ZipArchive::renameName ( string $name , string $newname )\n名前を使用してエントリ名を変更する
ZipArchive::setArchiveComment /// mixed ZipArchive::setArchiveComment ( string $comment )\nZIP アーカイブのコメントを設定する
ZipArchive::setCommentIndex /// mixed ZipArchive::setCommentIndex ( int $index , string $comment )\nインデックスを使用してエントリのコメントを設定する
ZipArchive::setCommentName /// mixed ZipArchive::setCommentName ( string $name , string $comment )\n名前を使用してエントリのコメントを設定する
ZipArchive::statIndex /// mixed ZipArchive::statIndex ( int $index [, int $flags ] )\nインデックスを使用してエントリの詳細を取得する
ZipArchive::statName /// mixed ZipArchive::statName ( name $name [, int $flags ] )\n名前を使用してエントリの詳細を取得する
ZipArchive::unchangeAll /// mixed ZipArchive::unchangeAll ( void )\nアーカイブに対するすべての変更を取り消す
ZipArchive::unchangeArchive /// mixed ZipArchive::unchangeArchive ( void )\nアーカイブ全体に対して行われたすべての変更を取り消す
ZipArchive::unchangeIndex /// mixed ZipArchive::unchangeIndex ( int $index )\n指定したインデックスのエントリに対するすべての変更を取り消す
ZipArchive::unchangeName /// mixed ZipArchive::unchangeName ( string $name )\n指定した名前のエントリに対するすべての変更を取り消す
gzclose /// bool gzclose ( resource $zp )\n開かれたgzファイルへのポインタを閉じる
gzcompress /// string gzcompress ( string $data [, int $level= -1 ] )\n文字列を圧縮する
gzdecode /// string gzdecode ( string $data [, int $length ] )\ngzip 圧縮された文字列をデコードする
gzdeflate /// string gzdeflate ( string $data [, int $level= -1 ] )\n文字列を deflate 圧縮する
gzencode /// string gzencode ( string $data [, int $level= -1 [, int $encoding_mode= FORCE_GZIP ]] )\ngzip 圧縮された文字列を作成する
gzeof /// int gzeof ( resource $zp )\ngz ファイルポインタがファイル終端かどうか調べる
gzfile /// array gzfile ( string $filename [, int $use_include_path= 0 ] )\ngzファイル全体を配列に読み込む
gzgetc /// string gzgetc ( resource $zp )\ngz ファイルへのポインタから文字を得る
gzgets /// string gzgets ( resource $zp , int $length )\nファイルポインタから 1 行を得る
gzgetss /// string gzgetss ( resource $zp , int $length [, string $allowable_tags ] )\ngzファイルへのポインタから1行を得て、HTMLタグを取り除く
gzinflate /// string gzinflate ( string $data [, int $length= 0 ] )\ndeflate圧縮された文字列を解凍する
gzopen /// resource gzopen ( string $filename , string $mode [, int $use_include_path= 0 ] )\ngz ファイルを開く
gzpassthru /// int gzpassthru ( resource $zp )\ngzファイルへのポインタから残りのデータ全部を出力する
gzputs /// のエイリアス gzwrite
gzread /// string gzread ( resource $zp , int $length )\nバイナリ対応のgzファイル読み込み
gzrewind /// bool gzrewind ( resource $zp )\ngz ファイルポインタの示す位置を元に戻す
gzseek /// int gzseek ( resource $zp , int $offset [, int $whence= SEEK_SET ] )\ngz ファイルポインタの位置を移動する
gztell /// int gztell ( resource $zp )\ngz ファイルポインタの読み込み/書き込み位置を返します
gzuncompress /// string gzuncompress ( string $data [, int $length= 0 ] )\n圧縮された文字列を解凍する
gzwrite /// int gzwrite ( resource $zp , string $string [, int $length ] )\nバイナリセーフな gz ファイル書き込み
readgzfile /// int readgzfile ( string $filename [, int $use_include_path= 0 ] )\ngz ファイルを出力する
zlib_get_coding_type /// string zlib_get_coding_type ( void )\n出力圧縮に使用されたコーディングの種類を返す
m_checkstatus /// int m_checkstatus ( resource $conn , int $identifier )\nトランザクションが完了したかどうかを確かめる
m_completeauthorizations /// int m_completeauthorizations ( resource $conn , int &$array )\nキューの中の認証済み件数を数え、その ID の配列を返す
m_connect /// int m_connect ( resource $conn )\nMCVE との接続を確立する
m_connectionerror /// string m_connectionerror ( resource $conn )\n接続が失敗した理由をテキストで取得する
m_deletetrans /// bool m_deletetrans ( resource $conn , int $identifier )\nMCVE_CONN 構造体から、指定したトランザクションを削除する
m_destroyconn /// bool m_destroyconn ( resource $conn )\n接続および MCVE_CONN 構造体を破壊する
m_destroyengine /// void m_destroyengine ( void )\nIP/SSL 接続に関連付けられたメモリを開放する
m_getcell /// string m_getcell ( resource $conn , int $identifier , string $column , int $row )\nカンマ区切りの応答から、カラム名を指定してセルを取得する
m_getcellbynum /// string m_getcellbynum ( resource $conn , int $identifier , int $column , int $row )\nカンマ区切りの応答から、カラム番号を指定してセルを取得する
m_getcommadelimited /// string m_getcommadelimited ( resource $conn , int $identifier )\nMCVE が返すデータを、もとのカンマ区切り形式のままで取得する
m_getheader /// string m_getheader ( resource $conn , int $identifier , int $column_num )\nカンマ区切りの応答から、カラム名を取得する
m_initconn /// resource m_initconn ( void )\nMCVE_CONN 構造体を作成し、初期化する
m_initengine /// int m_initengine ( string $location )\nIP/SSL 通信のためのクライアントの準備をする
m_iscommadelimited /// int m_iscommadelimited ( resource $conn , int $identifier )\n応答がカンマ区切りかどうかを調べる
m_maxconntimeout /// bool m_maxconntimeout ( resource $conn , int $secs )\nAPI が MCVE への接続を試みる時間の最大値
m_monitor /// int m_monitor ( resource $conn )\nMCVE との通信 (データの送受信) を非ブロックモードで行う
m_numcolumns /// int m_numcolumns ( resource $conn , int $identifier )\nカンマ区切りの応答の中のカラム数を返す
m_numrows /// int m_numrows ( resource $conn , int $identifier )\nカンマ区切りの応答の中の行数を返す
m_parsecommadelimited /// int m_parsecommadelimited ( resource $conn , int $identifier )\nカンマ区切りの応答をパースし、m_getcell などが動作するようにする
m_responsekeys /// array m_responsekeys ( resource $conn , int $identifier )\nこのトランザクションの応答パラメータとして使用することが可能な キーを表す文字列の配列を返す
m_responseparam /// string m_responseparam ( resource $conn , int $identifier , string $key )\nカスタム応答パラメータを取得する
m_returnstatus /// int m_returnstatus ( resource $conn , int $identifier )\nトランザクションが成功したかどうかを確かめる
m_setblocking /// int m_setblocking ( resource $conn , int $tf )\n接続モードを、ブロックモードあるいは非ブロックモードに設定する
m_setdropfile /// int m_setdropfile ( resource $conn , string $directory )\nDrop-File への接続方法を設定する
m_setip /// int m_setip ( resource $conn , string $host , int $port )\nIP での接続方法を設定する
m_setssl_cafile /// int m_setssl_cafile ( resource $conn , string $cafile )\nサーバ証明書を検証するための SSL CA (Certificate Authority) ファイルを設定する
m_setssl_files /// int m_setssl_files ( resource $conn , string $sslkeyfile , string $sslcertfile )\nサーバがクライアント証明書による検証を要求している場合に、証明書のキーファイルを設定する
m_setssl /// int m_setssl ( resource $conn , string $host , int $port )\nSSL での接続方法を設定する
m_settimeout /// int m_settimeout ( resource $conn , int $seconds )\n(トランザクション単位の) 最大の時間を設定する
m_sslcert_gen_hash /// string m_sslcert_gen_hash ( string $filename )\nSSL クライアント証明書の検証のためのハッシュを作成する
m_transactionssent /// int m_transactionssent ( resource $conn )\n送信バッファが空かどうかを確かめる
m_transinqueue /// int m_transinqueue ( resource $conn )\nクライアントキューの中のトランザクション数を返す
m_transkeyval /// int m_transkeyval ( resource $conn , int $identifier , string $key , string $value )\nトランザクションにキー/値のペアを追加する。transparam() の代替関数
m_transnew /// int m_transnew ( resource $conn )\n新しいトランザクションを開始する
m_transsend /// int m_transsend ( resource $conn , int $identifier )\nトランザクションを終了し、送信する
m_uwait /// int m_uwait ( int $microsecs )\nx マイクロ秒だけ待つ
m_validateidentifier /// int m_validateidentifier ( resource $conn , int $tf )\n指定したトランザクションについて、ID の検証を行うかどうか
m_verifyconnection /// bool m_verifyconnection ( resource $conn , int $tf )\n接続の検証を行うために PING を行うかどうかを設定する
m_verifysslcert /// bool m_verifysslcert ( resource $conn , int $tf )\nサーバの ssl 証明書を検証するかどうかを設定する
calcul_hmac /// string calcul_hmac ( string $clent , string $siretcode , string $price , string $reference , string $validity , string $taxation , string $devise , string $language )\nhmac を取得する (八つの引数が必要)
calculhmac /// string calculhmac ( string $clent , string $data )\nhmac キーを取得する (2 つの引数が必要)
nthmac /// string nthmac ( string $clent , string $data )\nnthmac キーを取得する (2 つの引数が必要)
signeurlpaiement /// string nthmac ( string $clent , string $data )\n決済 url を取得する (2 つの引数が必要)
crack_check /// bool crack_check ( resource $dictionary , string $password )\n指定したパスワードに関して強度チェックを行う
crack_closedict /// bool crack_closedict ([ resource $dictionary ] )\nオープンされているCrackLib辞書を閉じる
crack_getlastmessage /// string crack_getlastmessage ( void )\n直近の強度チェックからのメッセージを返す
crack_opendict /// resource crack_opendict ( string $dictionary )\n新規CrackLib辞書をオープンする
hash_algos /// array hash_algos ( void )\n登録されているハッシュアルゴリズムの一覧を返す
hash_copy /// resource hash_copy ( resource $context )\nハッシュコンテキストをコピーする
hash_file /// string hash_file ( string $algo , string $filename [, bool $raw_output= false ] )\nファイルの内容から、ハッシュ値を生成する
hash_final /// string hash_final ( resource $context [, bool $raw_output= false ] )\n段階的なハッシュ処理を終了し、出来上がったダイジェストを返す
hash_hmac_file /// string hash_hmac_file ( string $algo , string $filename , string $key [, bool $raw_output= false ] )\nHMAC 方式を使用して、指定されたファイルの内容からハッシュ値を生成する
hash_hmac /// string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output= false ] )\nHMAC 方式を使用してハッシュ値を生成する
hash_init /// resource hash_init ( string $algo [, int $options= 0 [, string $key= NULL ]] )\n段階的なハッシュコンテキストを初期化する
hash_update_file /// bool hash_update_file ( resource $context , string $filename [, resource $context= NULL ] )\nアクティブなハッシュコンテキストに、ファイルから データを投入する
hash_update_stream /// int hash_update_stream ( resource $context , resource $handle [, int $length= -1 ] )\nアクティブなハッシュコンテキストに、オープンしているストリームから データを投入する
hash_update /// bool hash_update ( resource $context , string $data )\nアクティブなハッシュコンテキストにデータを投入する
hash /// string hash ( string $algo , string $data [, bool $raw_output= false ] )\nハッシュ値 (メッセージダイジェスト) を生成する
mcrypt_cbc /// string mcrypt_cbc ( int $cipher , string $key , string $data , int $mode [, string $iv ] )\nCBC モードでデータを暗号化/復号する
mcrypt_cfb /// string mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv )\nCFB モードでデータを暗号化/復号する
mcrypt_create_iv /// string mcrypt_create_iv ( int $size [, int $source= MCRYPT_DEV_RANDOM ] )\n乱数ソースから初期化ベクトル(IV)を生成する
mcrypt_decrypt /// string mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )\n指定したパラメータで暗号化されたテキストを復号する
mcrypt_ecb /// string mcrypt_ecb ( int $cipher , string $key , string $data , int $mode )\n非推奨: ECB モードでデータを暗号化/復号する
mcrypt_enc_get_algorithms_name /// string mcrypt_enc_get_algorithms_name ( resource $td )\nオープンされたアルゴリズムの名前を返す
mcrypt_enc_get_block_size /// int mcrypt_enc_get_block_size ( resource $td )\nオープンされたアルゴリズムのブロックサイズを返す
mcrypt_enc_get_iv_size /// int mcrypt_enc_get_iv_size ( resource $td )\nオープンされたアルゴリズムの IV の大きさを返す
mcrypt_enc_get_key_size /// int mcrypt_enc_get_key_size ( resource $td )\nオープンされたモードでサポートされる最大キー長を返す
mcrypt_enc_get_modes_name /// string mcrypt_enc_get_modes_name ( resource $td )\nオープンされたモードの名前を返す
mcrypt_enc_get_supported_key_sizes /// array mcrypt_enc_get_supported_key_sizes ( resource $td )\nオープンされたアルゴリズムでサポートされるキー長を配列にして返す
mcrypt_enc_is_block_algorithm_mode /// bool mcrypt_enc_is_block_algorithm_mode ( resource $td )\nオープンされたモードの暗号がブロックモードで動作するかどうかを調べる
mcrypt_enc_is_block_algorithm /// bool mcrypt_enc_is_block_algorithm ( resource $td )\nオープンされたモードの暗号がブロックアルゴリズムであるかどうかを調べる
mcrypt_enc_is_block_mode /// bool mcrypt_enc_is_block_mode ( resource $td )\nオープンされたモードがブロック出力を行うかどうかを調べる
mcrypt_enc_self_test /// int mcrypt_enc_self_test ( resource $td )\nオープンしたモジュールのセルフテストを実行する
mcrypt_encrypt /// string mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )\n指定したパラメータでプレーンテキストを暗号化する
mcrypt_generic_deinit /// bool mcrypt_generic_deinit ( resource $td )\n暗号化モジュールを終了する
mcrypt_generic_end /// bool mcrypt_generic_end ( resource $td )\n暗号処理を終了する
mcrypt_generic_init /// int mcrypt_generic_init ( resource $td , string $key , string $iv )\n暗号化に必要な全てのバッファを初期化する
mcrypt_generic /// string mcrypt_generic ( resource $td , string $data )\nデータを暗号化する
mcrypt_get_block_size /// int mcrypt_get_block_size ( int $cipher )\n指定した暗号のブロックサイズを得る
mcrypt_get_cipher_name /// string mcrypt_get_cipher_name ( int $cipher )\n指定した暗号の名前を得る
mcrypt_get_iv_size /// int mcrypt_get_iv_size ( string $cipher , string $mode )\n指定した暗号/モードの組み合わせに属する IV の大きさを返す
mcrypt_get_key_size /// int mcrypt_get_key_size ( int $cipher )\n指定した暗号のキーの長さを得る
mcrypt_list_algorithms /// array mcrypt_list_algorithms ([ string $lib_dir= ini_get("mcrypt.algorithms_dir") ] )\nサポートされる全ての暗号を配列として取得する
mcrypt_list_modes /// array mcrypt_list_modes ([ string $lib_dir= ini_get("mcrypt.algorithms_dir") ] )\nサポートされる全てのモードの配列を取得する
mcrypt_module_close /// bool mcrypt_module_close ( resource $td )\nmcrypt モジュールを閉じる
mcrypt_module_get_algo_block_size /// int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )\n指定したアルゴリズムのブロック長を返す
mcrypt_module_get_algo_key_size /// int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )\nオープンされたモードでサポートされる最大キー長を返す
mcrypt_module_get_supported_key_sizes /// array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )\nオープンされたアルゴリズムでサポートされるキーのサイズを配列として返す
mcrypt_module_is_block_algorithm_mode /// bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )\n指定したモジュールがブロックアルゴリズムであるかどうかを返す
mcrypt_module_is_block_algorithm /// bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )\n指定したアルゴリズムがブロックアルゴリズムであるかを調べる
mcrypt_module_is_block_mode /// bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )\n指定したモードがブロック出力を行うかどうかを返す
mcrypt_module_open /// resource mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory )\n使用するアルゴリズムおよびモードのモジュールをオープンする
mcrypt_module_self_test /// bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )\n指定したモジュールのセルフテストを実行する
mcrypt_ofb /// string mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv )\nOFB モードでデータを暗号化/復号する
mdecrypt_generic /// string mdecrypt_generic ( resource $td , string $data )\nデータを復号する
mhash_count /// int mhash_count ( void )\n利用可能なハッシュ ID の最大値を得る
mhash_get_block_size /// int mhash_get_block_size ( int $hash )\n指定したハッシュのブロックサイズを得る
mhash_get_hash_name /// string mhash_get_hash_name ( int $hash )\n指定したハッシュの名前を得る
mhash_keygen_s2k /// string mhash_keygen_s2k ( int $hash , string $password , string $salt , int $bytes )\nキーを生成する
mhash /// string mhash ( int $hash , string $data [, string $key ] )\nハッシュ値を計算する
openssl_csr_export_to_file /// bool openssl_csr_export_to_file ( resource $csr , string $outfilename [, bool $notext= true ] )\nCSR をファイルにエクスポートする
openssl_csr_export /// bool openssl_csr_export ( resource $csr , string &$out [, bool $notext= true ] )\nCSR を文字列としてエクスポートする
openssl_csr_get_public_key /// resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames= true ] )\nCERT の公開鍵を返す
openssl_csr_get_subject /// array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames= true ] )\nCERT の subject を返す
openssl_csr_new /// mixed openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] )\nCSR を作成する
openssl_csr_sign /// resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial= 0 ]] )\n他の CERT（あるいは自分自身）で証明書をサインする
openssl_error_string /// string openssl_error_string ( void )\nOpenSSL エラーメッセージを返す
openssl_free_key /// void openssl_free_key ( resource $key_identifier )\nキーリソースを開放する
openssl_get_privatekey /// openssl_pkey_get_private のエイリアス
openssl_get_publickey /// openssl_pkey_get_public のエイリアス
openssl_open /// bool openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id )\nシール(暗号化)されたデータをオープン(復号)する
openssl_pkcs12_export_to_file /// bool openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] )\nPKCS#12 互換の証明書保存ファイルをエクスポートする
openssl_pkcs12_export /// bool openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] )\nPKCS#12 互換の証明書保存ファイルを変数にエクスポートする
openssl_pkcs12_read /// bool openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass )\nPKCS#12 認証ストアをパースして配列形式にする
openssl_pkcs7_decrypt /// bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )\nS/MIME 暗号化されたメッセージを復号する
openssl_pkcs7_encrypt /// bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags= 0 [, int $cipherid= OPENSSL_CIPHER_RC2_40 ]] )\nS/MIME メッセージを暗号化する
openssl_pkcs7_sign /// bool openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags= PKCS7_DETACHED [, string $extracerts ]] )\nS/MIME メッセージにサインする
openssl_pkcs7_verify /// mixed openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )\nS/MIME でサインされたメッセージの署名を検証する
openssl_pkey_export_to_file /// bool openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] )\nエクスポート可能な形式で、キーをファイルに取得する
openssl_pkey_export /// bool openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] )\nエクスポート可能な形式で、キーを文字列に取得する
openssl_pkey_free /// void openssl_pkey_free ( resource $key )\n秘密鍵を開放する
openssl_pkey_get_details /// array openssl_pkey_get_details ( resource $key )\nキーの詳細の配列を返す
openssl_pkey_get_private /// resource openssl_pkey_get_private ( mixed $key [, string $passphrase= "" ] )\n秘密鍵を取得する
openssl_pkey_get_public /// resource openssl_pkey_get_public ( mixed $certificate )\n証明書から公開鍵を抽出し、使用できるようにする
openssl_pkey_new /// resource openssl_pkey_new ([ array $configargs ] )\n新規に秘密鍵を生成する
openssl_private_decrypt /// bool openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding= OPENSSL_PKCS1_PADDING ] )\n秘密鍵でデータを復号する
openssl_private_encrypt /// bool openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding= OPENSSL_PKCS1_PADDING ] )\n秘密鍵でデータを暗号化する
openssl_public_decrypt /// bool openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding= OPENSSL_PKCS1_PADDING ] )\n公開鍵でデータを復号する
openssl_public_encrypt /// bool openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding= OPENSSL_PKCS1_PADDING ] )\n公開鍵でデータを暗号化する
openssl_seal /// int openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids )\nデータをシール(暗号化)する
openssl_sign /// bool openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, int $signature_alg= OPENSSL_ALGO_SHA1 ] )\n署名を生成する
openssl_verify /// int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, int $signature_alg ] )\n署名を検証する
openssl_x509_check_private_key /// bool openssl_x509_check_private_key ( mixed $cert , mixed $key )\n秘密鍵が証明書に対応するかを確認する
openssl_x509_checkpurpose /// int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo [, string $untrustedfile ]] )\n証明書が特定の目的に使用可能かどうか確認する
openssl_x509_export_to_file /// bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext ] )\n証明書をファイルにエクスポートする
openssl_x509_export /// bool openssl_x509_export ( mixed $x509 , string &$output [, bool $notext ] )\n証明書を文字列としてエクスポートする
openssl_x509_free /// void openssl_x509_free ( resource $x509cert )\n証明書リソースを開放する
openssl_x509_parse /// array openssl_x509_parse ( mixed $x509cert [, bool $shortnames= true ] )\nX509 証明書をパースし、配列として情報を返す
openssl_x509_read /// resource openssl_x509_read ( mixed $x509certdata )\nX.509 証明書をパースし、リソース ID を返す
dio_close /// void dio_close ( resource $fd )\nfd で指定したファイル記述子を閉じる
dio_fcntl /// mixed dio_fcntl ( resource $fd , int $cmd [, mixed $args ] )\nfd について C ライブラリの fcntl を実行する
dio_open /// resource dio_open ( string $filename , int $flags [, int $mode= 0 ] )\n指定したパーミッション flags と作成許可 mode を指定して 新しいファイルをオープンする
dio_read /// string dio_read ( resource $fd [, int $len= 1024 ] )\nファイル記述子からバイトデータを読み込む
dio_seek /// int dio_seek ( resource $fd , int $pos [, int $whence= SEEK_SET ] )\nfd 上で whence から pos に移動する
dio_stat /// array dio_stat ( resource $fd )\nファイル記述子 fd に関する stat 情報を取得する
dio_tcsetattr /// bool dio_tcsetattr ( resource $fd , array $options )\nシリアルポートの端末属性とボーレートを設定する
dio_truncate /// bool dio_truncate ( resource $fd , int $offset )\nファイル記述子 fd をオフセットバイトへ丸める
dio_write /// int dio_write ( resource $fd , string $data [, int $len= 0 ] )\nオプションで丸め長さを指定してデータを書き込む
chdir /// bool chdir ( string $directory )\nディレクトリを変更する
chroot /// bool chroot ( string $directory )\nルートディレクトリを変更する
closedir /// void closedir ([ resource $dir_handle ] )\nディレクトリハンドルをクローズする
getcwd /// string getcwd ( void )\nカレントのワーキングディレクトリを取得する
opendir /// resource opendir ( string $path [, resource $context ] )\nディレクトリハンドルをオープンする
readdir /// string readdir ([ resource $dir_handle ] )\nディレクトリハンドルからエントリを読み込む
rewinddir /// void rewinddir ([ resource $dir_handle ] )\nディレクトリハンドルを元に戻す
scandir /// array scandir ( string $directory [, int $sorting_order= 0 [, resource $context ]] )\n指定されたパスのファイルとディレクトリのリストを取得する
finfo_buffer /// string finfo_buffer ( resource $finfo , string $string= NULL [, int $options= FILEINFO_NONE [, resource $context= NULL ]] )\n文字列バッファの情報を返す
finfo_close /// bool finfo_close ( resource $finfo )\nfileinfo リソースを閉じる
finfo_file /// string finfo_file ( resource $finfo , string $file_name= NULL [, int $options= FILEINFO_NONE [, resource $context= NULL ]] )\nファイルについての情報を返す
finfo_open /// resource finfo_open ([ int $options= FILEINFO_NONE [, string $magic_file= NULL ]] )\n新しい fileinfo リソースを作成する
finfo_set_flags /// bool finfo_set_flags ( resource $finfo , int $options )\nlibmagic のオプションを設定する
basename /// string basename ( string $path [, string $suffix ] )\nパス中のファイル名の部分を返す
chgrp /// bool chgrp ( string $filename , mixed $group )\nファイルのグループを変更する
chmod /// bool chmod ( string $filename , int $mode )\nファイルのモードを変更する
chown /// bool chown ( string $filename , mixed $user )\nファイルの所有者を変更する
clearstatcache /// void clearstatcache ([ bool $clear_realpath_cache= false [, string $filename ]] )\nファイルのステータスのキャッシュをクリアする
copy /// bool copy ( string $source , string $dest [, resource $context ] )\nファイルをコピーする
delete /// void delete ( void )\nunlink か unset を参照してください
dirname /// string dirname ( string $path )\nパス中のディレクトリ名の部分を返す
disk_free_space /// float disk_free_space ( string $directory )\nディレクトリの利用可能なスペースを返す
disk_total_space /// float disk_total_space ( string $directory )\nディレクトリの全体サイズを返す
diskfreespace /// disk_free_space のエイリアス
fclose /// bool fclose ( resource $handle )\nオープンされたファイルポインタをクローズする
feof /// bool feof ( resource $handle )\nファイルポインタがファイル終端に達しているかどうか調べる
fflush /// bool fflush ( resource $handle )\n出力をファイルにフラッシュする
fgetc /// string fgetc ( resource $handle )\nファイルポインタから1文字取り出す
fgetcsv /// array fgetcsv ( resource $handle [, int $length [, string $delimiter [, string $enclosure [, string $escape ]]]] )\nファイルポインタから行を取得し、CSVフィールドを処理する
fgets /// string fgets ( resource $handle [, int $length ] )\nファイルポインタから 1 行取得する
fgetss /// string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )\nファイルポインタから 1 行取り出し、HTML タグを取り除く
file_exists /// bool file_exists ( string $filename )\nファイルまたはディレクトリが存在するかどうか調べる
file_get_contents /// string file_get_contents ( string $filename [, int $flags= 0 [, resource $context [, int $offset= -1 [, int $maxlen= -1 ]]]] )\nファイルの内容を全て文字列に読み込む
file_put_contents /// int file_put_contents ( string $filename , mixed $data [, int $flags= 0 [, resource $context ]] )\n文字列をファイルに書き込む
file /// array file ( string $filename [, int $flags= 0 [, resource $context ]] )\nファイル全体を読み込んで配列に格納する
fileatime /// int fileatime ( string $filename )\nファイルの最終アクセス時刻を取得する
filectime /// int filectime ( string $filename )\nファイルの inode 変更時刻を取得する
filegroup /// int filegroup ( string $filename )\nファイルのグループを取得する
fileinode /// int fileinode ( string $filename )\nファイルの inode を取得する
filemtime /// int filemtime ( string $filename )\nファイルの更新時刻を取得する
fileowner /// int fileowner ( string $filename )\nファイルの所有者を取得する
fileperms /// int fileperms ( string $filename )\nファイルのパーミッションを取得する
filesize /// int filesize ( string $filename )\nファイルのサイズを取得する
filetype /// string filetype ( string $filename )\nファイルタイプを取得する
flock /// bool flock ( resource $handle , int $operation [, int &$wouldblock ] )\n汎用のファイルロックを行う
fnmatch /// bool fnmatch ( string $pattern , string $string [, int $flags= 0 ] )\nファイル名がパターンにマッチするか調べる
fopen /// resource fopen ( string $filename , string $mode [, bool $use_include_path= false [, resource $context ]] )\nファイルまたは URL をオープンする
fpassthru /// int fpassthru ( resource $handle )\nファイルポインタ上に残っているすべてのデータを出力する
fputcsv /// int fputcsv ( resource $handle , array $fields [, string $delimiter [, string $enclosure ]] )\n行を CSV 形式にフォーマットし、ファイルポインタに書き込む
fputs /// fwrite のエイリアス
fread /// string fread ( resource $handle , int $length )\nバイナリセーフなファイルの読み込み
fscanf /// mixed fscanf ( resource $handle , string $format [, mixed &$... ] )\nフォーマットに基づきファイルからの入力を処理する
fseek /// int fseek ( resource $handle , int $offset [, int $whence ] )\nファイルポインタを移動する
fstat /// array fstat ( resource $handle )\nオープンしたファイルポインタからファイルに関する情報を取得する
ftell /// int ftell ( resource $handle )\nファイルの読み書き用ポインタの現在位置を返す
ftruncate /// bool ftruncate ( resource $handle , int $size )\nファイルを指定した長さに丸める
fwrite /// int fwrite ( resource $handle , string $string [, int $length ] )\nバイナリセーフなファイル書き込み処理
glob /// array glob ( string $pattern [, int $flags= 0 ] )\nパターンにマッチするパス名を探す
is_dir /// bool is_dir ( string $filename )\nファイルがディレクトリかどうかを調べる
is_executable /// bool is_executable ( string $filename )\nファイルが実行可能かどうかを調べる
is_file /// bool is_file ( string $filename )\n通常ファイルかどうかを調べる
is_link /// bool is_link ( string $filename )\nファイルがシンボリックリンクかどうかを調べる
is_readable /// bool is_readable ( string $filename )\nファイルが読み込み可能かどうかを知る
is_uploaded_file /// bool is_uploaded_file ( string $filename )\nHTTP POST でアップロードされたファイルかどうかを調べる
is_writable /// bool is_writable ( string $filename )\nファイルが書き込み可能かどうかを調べる
is_writeable /// is_writable のエイリアス
lchgrp /// bool lchgrp ( string $filename , mixed $group )\nシンボリックリンクのグループ所有権を変更する
lchown /// bool lchown ( string $filename , mixed $user )\nシンボリックリンクの所有者を変更する
link /// bool link ( string $target , string $link )\nハードリンクを作成する
linkinfo /// int linkinfo ( string $path )\nリンクに関する情報を取得する
lstat /// array lstat ( string $filename )\nファイルあるいはシンボリックリンクの情報を取得する
mkdir /// bool mkdir ( string $pathname [, int $mode= 0777 [, bool $recursive= false [, resource $context ]]] )\nディレクトリを作る
move_uploaded_file /// bool move_uploaded_file ( string $filename , string $destination )\nアップロードされたファイルを新しい位置に移動する
parse_ini_file /// array parse_ini_file ( string $filename [, bool $process_sections= false [, int $scanner_mode= INI_SCANNER_NORMAL ]] )\n設定ファイルをパースする
parse_ini_string /// array parse_ini_string ( string $ini [, bool $process_sections= false [, int $scanner_mode= INI_SCANNER_NORMAL ]] )\n設定文字列をパースする
pathinfo /// mixed pathinfo ( string $path [, int $options= PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )\nファイルパスに関する情報を返す
pclose /// int pclose ( resource $handle )\nプロセスのファイルポインタをクローズする
popen /// resource popen ( string $command , string $mode )\nプロセスへのファイルポインタをオープンする
readfile /// int readfile ( string $filename [, bool $use_include_path= false [, resource $context ]] )\nファイルを出力する
readlink /// string readlink ( string $path )\nシンボリックリンク先を返す
realpath /// string realpath ( string $path )\n絶対パス名を返す
rename /// bool rename ( string $oldname , string $newname [, resource $context ] )\nファイルをリネームする
rewind /// bool rewind ( resource $handle )\nファイルポインタの位置を先頭に戻す
rmdir /// bool rmdir ( string $dirname [, resource $context ] )\nディレクトリを削除する
set_file_buffer /// stream_set_write_buffer のエイリアス
stat /// array stat ( string $filename )\nファイルに関する情報を取得する
symlink /// bool symlink ( string $target , string $link )\nシンボリックリンクを作成する
tempnam /// string tempnam ( string $dir , string $prefix )\n一意なファイル名を生成する
tmpfile /// resource tmpfile ( void )\nテンポラリファイルを作成する
touch /// bool touch ( string $filename [, int $time= time() [, int $atime ]] )\nファイルの最終アクセス時刻および最終更新日をセットする
umask /// int umask ([ int $mask ] )\n現在の umask を変更する
unlink /// bool unlink ( string $filename [, resource $context ] )\nファイルを削除する
inotify_add_watch /// int inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask )\n初期化済みの inotify インスタンスに監視対象を追加する
inotify_init /// resource inotify_init ( void )\ninotify インスタンスを初期化する
inotify_queue_len /// int inotify_queue_len ( resource $inotify_instance )\n待機中のイベントがある場合に正の数を返す
inotify_read /// array inotify_read ( resource $inotify_instance )\ninotify インスタンスからイベントを読み込む
inotify_rm_watch /// bool inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor )\n既存の監視を inotify インスタンスから削除する
mime_content_type /// string mime_content_type ( string $filename )\nファイルの MIME Content-type を検出する (非推奨)
xattr_get /// string xattr_get ( string $filename , string $name [, int $flags= 0 ] )\n拡張属性を取得する
xattr_list /// array xattr_list ( string $filename [, int $flags= 0 ] )\n拡張属性の一覧を取得する
xattr_remove /// bool xattr_remove ( string $filename , string $name [, int $flags= 0 ] )\n拡張属性を削除する
xattr_set /// bool xattr_set ( string $filename , string $name , string $value [, int $flags= 0 ] )\n拡張属性を設定する
xattr_supported /// bool xattr_supported ( string $filename [, int $flags= 0 ] )\nファイルシステムが拡張属性をサポートしているかどうかを調べる
xdiff_file_bdiff_size /// int xdiff_file_bdiff_size ( string $file )\nバイナリ diff を適用して作成するファイルのサイズを読み込む
xdiff_file_bdiff /// bool xdiff_file_bdiff ( string $old_file , string $new_file , string $dest )\n2 つのファイルのバイナリ diff を作成する
xdiff_file_bpatch /// bool xdiff_file_bpatch ( string $file , string $patch , string $dest )\nファイルにバイナリ diff 形式のパッチを適用する
xdiff_file_diff_binary /// bool xdiff_file_diff_binary ( string $file1 , string $file2 , string $dest )\nxiff_file_bdiff のエイリアス
xdiff_file_diff /// bool xdiff_file_diff ( string $old_file , string $new_file , string $dest [, int $context= 3 [, bool $minimal= false ]] )\n2 つのファイルの unified diff を作成する
xdiff_file_merge3 /// mixed xdiff_file_merge3 ( string $old_file , string $new_file1 , string $new_file2 , string $dest )\n3 つのファイルをひとつに統合する
xdiff_file_patch_binary /// bool xdiff_file_patch_binary ( string $file , string $patch , string $dest )\nxdiff_file_bpatch のエイリアス
xdiff_file_patch /// mixed xdiff_file_patch ( string $file , string $patch , string $dest [, int $flags= DIFF_PATCH_NORMAL ] )\nファイルに unified diff 形式のパッチを適用する
xdiff_file_rabdiff /// bool xdiff_file_rabdiff ( string $old_file , string $new_file , string $dest )\n2 つのファイルのバイナリ diff を、Rabin の polynomial fingerprinting アルゴリズムで作成する
xdiff_string_bdiff_size /// int xdiff_string_bdiff_size ( string $patch )\nバイナリ diff を適用して作成するファイルのサイズを読み込む
xdiff_string_bdiff /// string xdiff_string_bdiff ( string $old_data , string $new_data )\n2 つの文字列のバイナリ diff を作成する
xdiff_string_bpatch /// string xdiff_string_bpatch ( string $str , string $patch )\n文字列にバイナリ diff 形式のパッチを適用する
xdiff_string_diff_binary /// string xdiff_string_bdiff ( string $old_data , string $new_data )\nxdiff_string_bdiff のエイリアス
xdiff_string_diff /// string xdiff_string_diff ( string $old_data , string $new_data [, int $context= 3 [, bool $minimal= false ]] )\n2 つの文字列の unified diff を作成する
xdiff_string_merge3 /// mixed xdiff_string_merge3 ( string $old_data , string $new_data1 , string $new_data2 [, string &$error ] )\n3 つの文字列をひとつに統合する
xdiff_string_patch_binary /// string xdiff_string_patch_binary ( string $str , string $patch )\nxdiff_string_bpatch のエイリアス
xdiff_string_patch /// string xdiff_string_patch ( string $str , string $patch [, int $flags [, string &$error ]] )\n文字列に unified diff 形式のパッチを適用する
xdiff_string_rabdiff /// string xdiff_string_bdiff ( string $old_data , string $new_data )\n2 つの文字列のバイナリ diff を、Rabin の polynomial fingerprinting アルゴリズムで作成する
enchant_broker_describe /// array enchant_broker_describe ( resource $broker )\nEnchant プロバイダを列挙する
enchant_broker_dict_exists /// bool enchant_broker_dict_exists ( resource $broker , string $tag )\n辞書が存在するかどうかを調べる。空でないタグを使用する
enchant_broker_free_dict /// bool enchant_broker_free_dict ( resource $dict )\n辞書リソースを開放する
enchant_broker_free /// bool enchant_broker_free ( resource $broker )\nブローカーリソースおよびその辞書を開放する
enchant_broker_get_error /// string enchant_broker_get_error ( resource $broker )\nブローカーの直近のエラーを返す
enchant_broker_init /// resource enchant_broker_init ( void )\n要求を満たすブローカーオブジェクトを作成する
enchant_broker_list_dicts /// mixed enchant_broker_list_dicts ( resource $broker )\n使用可能な辞書の一覧を返す
enchant_broker_request_dict /// resource enchant_broker_request_dict ( resource $broker , string $tag )\nタグを使用して新しい辞書を作成する
enchant_broker_request_pwl_dict /// resource enchant_broker_request_pwl_dict ( resource $broker , string $filename )\nPWL ファイルを使用して辞書を作成する
enchant_broker_set_ordering /// bool enchant_broker_set_ordering ( resource $broker , string $tag , string $ordering )\nその言語で使用する辞書の優先順位を宣言する
enchant_dict_add_to_personal /// void enchant_dict_add_to_personal ( resource $dict , string $word )\nパーソナル単語リストに単語を追加する
enchant_dict_add_to_session /// void enchant_dict_add_to_session ( resource $dict , string $word )\n'単語' を、このスペルチェックセッションに追加する
enchant_dict_check /// bool enchant_dict_check ( resource $dict , string $word )\n単語のスペルが正しいかどうかを調べる
enchant_dict_describe /// mixed enchant_dict_describe ( resource $dict )\n個々の辞書について説明する
enchant_dict_get_error /// string enchant_dict_get_error ( resource $dict )\n現在のスペリングセッションの直近のエラーを返す
enchant_dict_is_in_session /// bool enchant_dict_is_in_session ( resource $dict , string $word )\nこのスペリングセッションに '単語' が存在するかどうかを調べる
enchant_dict_quick_check /// bool enchant_dict_quick_check ( resource $dict , string $word [, array &$suggestions ] )\n単語のスペルが正しいかどうかを調べ、修正候補を提供する
enchant_dict_store_replacement /// void enchant_dict_store_replacement ( resource $dict , string $mis , string $cor )\n単語の修正候補を追加する
enchant_dict_suggest /// array enchant_dict_suggest ( resource $dict , string $word )\n修正候補となる値の一覧を返す
fribidi_log2vis /// string fribidi_log2vis ( string $str , string $direction , int $charset )\n論理表記を物理表記に変換する
bind_textdomain_codeset /// string bind_textdomain_codeset ( string $domain , string $codeset )\nDOMAIN メッセージカタログから返されるメッセージの文字エンコーディングを指定する
bindtextdomain /// string bindtextdomain ( string $domain , string $directory )\nドメインのパスを設定する
dcgettext /// string dcgettext ( string $domain , string $message , int $category )\n単一の参照に関するドメインを上書きする
dcngettext /// string dcngettext ( string $domain , string $msgid1 , string $msgid2 , int $n , int $category )\ndcgettext の複数形版
dgettext /// string dgettext ( string $domain , string $message )\n現在のドメインを上書きする
dngettext /// string dngettext ( string $domain , string $msgid1 , string $msgid2 , int $n )\ndgettext の複数形版
gettext /// string gettext ( string $message )\n現在のドメインのメッセージを参照する
ngettext /// string ngettext ( string $msgid1 , string $msgid2 , int $n )\ngettext の複数形版
textdomain /// string textdomain ( string $text_domain )\nデフォルトドメインを設定する
locale_get_default /// string locale_get_default ( void )\nデフォルトのロケールを取得する
locale_set_default /// bool locale_set_default ( string $name )\nデフォルトのロケールを設定する
iconv_get_encoding /// mixed iconv_get_encoding ([ string $type= "all" ] )\niconv 拡張モジュールの内部設定変数を取得する
iconv_mime_decode_headers /// array iconv_mime_decode_headers ( string $encoded_headers [, int $mode= 0 [, string $charset= ini_set("iconv.internal_encoding") ]] )\n複数の MIME ヘッダフィールドを一度にデコードする
iconv_mime_decode /// string iconv_mime_decode ( string $encoded_header [, int $mode= 0 [, string $charset= ini_set("iconv.internal_encoding") ]] )\nMIME ヘッダフィールドをデコードする
iconv_mime_encode /// string iconv_mime_encode ( string $field_name , string $field_value [, array $preferences= NULL ] )\nMIME ヘッダフィールドを作成する
iconv_set_encoding /// bool iconv_set_encoding ( string $type , string $charset )\n文字エンコーディング変換用の設定を行なう
iconv_strlen /// int iconv_strlen ( string $str [, string $charset= ini_set("iconv.internal_encoding") ] )\n文字列の文字数を返す
iconv_strpos /// int iconv_strpos ( string $haystack , string $needle [, int $offset= 0 [, string $charset= ini_set("iconv.internal_encoding") ]] )\n文字列が最初に現れる場所を見つける
iconv_strrpos /// int iconv_strrpos ( string $haystack , string $needle [, string $charset= ini_set("iconv.internal_encoding") ] )\n文字列が最後に現れる場所を見つける
iconv_substr /// string iconv_substr ( string $str , int $offset [, int $length= 0 [, string $charset= ini_set("iconv.internal_encoding") ]] )\n文字列の一部を切り出す
iconv /// string iconv ( string $in_charset , string $out_charset , string $str )\n文字列を指定した文字エンコーディングに変換する
ob_iconv_handler /// string ob_iconv_handler ( string $contents , int $status )\n出力バッファハンドラとして文字エンコーディングを変換する
idn_strerror /// string idn_strerror ( int $errorcode )\nIDNA エラーコードに対応する文字列を返す
idn_to_ascii /// string idn_to_ascii ( string $utf8_domain [, int &$errorcode ] )\nUTF-8 エンコードされたドメイン名を ASCII に変換する
idn_to_utf8 /// string idn_to_utf8 ( string $ascii_domain [, int &$errorcode ] )\nASCII エンコードされたドメイン名を UTF-8 に変換する
grapheme_extract /// string grapheme_extract ( string $haystack , int $size [, int $extract_type [, int $start [, int &$next ]]] )\nデフォルトの書記素クラスタシーケンスをテキストバッファから取り出す関数。 テキストは UTF-8 でエンコードされている必要がある
grapheme_stripos /// int grapheme_stripos ( string $haystack , string $needle [, int $offset ] )\n大文字小文字を区別せず、文字列内で最初にあらわれる場所の (書記素単位の) 位置を見つける
grapheme_stristr /// string grapheme_stristr ( string $haystack , string $needle [, bool $before_needle ] )\n大文字小文字を区別せず、haystack 文字列の中で needle が最初に登場した場所以降の部分文字列を返す
grapheme_strlen /// int grapheme_strlen ( string $input )\n書記素単位で文字列の長さを取得する
grapheme_strpos /// int grapheme_strpos ( string $haystack , string $needle [, int $offset ] )\n文字列内で最初にあらわれる場所の (書記素単位の) 位置を見つける
grapheme_strripos /// int grapheme_strripos ( string $haystack , string $needle [, int $offset ] )\n大文字小文字を区別せず、文字列内で最後にあらわれる場所の (書記素単位の) 位置を見つける
grapheme_strrpos /// int grapheme_strrpos ( string $haystack , string $needle [, int $offset ] )\n文字列内で最後にあらわれる場所の (書記素単位の) 位置を見つける
grapheme_strstr /// string grapheme_strstr ( string $haystack , string $needle [, bool $before_needle ] )\nhaystack 文字列の中で、needle が最初に登場した場所以降の部分文字列を返す
grapheme_substr /// int grapheme_substr ( string $string , int $start [, int $length ] )\n部分文字列を返す
intl_error_name /// string intl_error_name ( int $error_code )\n指定したエラーコードに対応する名前を取得する
intl_get_error_code /// int intl_get_error_code ( void )\n直近のエラーコードを取得する
intl_get_error_message /// string intl_get_error_message ( void )\n直近のエラーの説明を取得する
intl_is_failure /// bool intl_is_failure ( int $error_code )\n指定したエラーコードが失敗を表すかどうかを調べる
mb_check_encoding /// bool mb_check_encoding ([ string $var= NULL [, string $encoding= mb_internal_encoding() ]] )\n文字列が、指定したエンコーディングで有効なものかどうかを調べる
mb_convert_case /// string mb_convert_case ( string $str , int $mode= MB_CASE_UPPER [, string $encoding= mb_internal_encoding() ] )\n文字列に対してケースフォルディングを行う
mb_convert_encoding /// string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding ] )\n文字エンコーディングを変換する
mb_convert_kana /// string mb_convert_kana ( string $str [, string $option [, string $encoding ]] )\nカナを("全角かな"、"半角かな"等に)変換する
mb_convert_variables /// string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )\n変数の文字コードを変換する
mb_decode_mimeheader /// string mb_decode_mimeheader ( string $str )\nMIME ヘッダフィールドの文字列をデコードする
mb_decode_numericentity /// string mb_decode_numericentity ( string $str , array $convmap , string $encoding )\nHTML 数値エンティティを文字にデコードする
mb_detect_encoding /// string mb_detect_encoding ( string $str [, mixed $encoding_list= mb_detect_order() [, bool $strict= false ]] )\n文字エンコーディングを検出する
mb_detect_order /// mixed mb_detect_order ([ mixed $encoding_list ] )\n文字エンコーディング検出順序を設定あるいは取得する
mb_encode_mimeheader /// string mb_encode_mimeheader ( string $str [, string $charset [, string $transfer_encoding [, string $linefeed [, int $indent ]]]] )\nMIMEヘッダの文字列をエンコードする
mb_encode_numericentity /// string mb_encode_numericentity ( string $str , array $convmap , string $encoding )\n文字を HTML 数値エンティティにエンコードする
mb_ereg_match /// bool mb_ereg_match ( string $pattern , string $string [, string $option= "msr" ] )\nマルチバイト文字列が正規表現に一致するか調べる
mb_ereg_replace /// string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option= "msr" ] )\nマルチバイト文字列に正規表現による置換を行う
mb_ereg_search_getpos /// int mb_ereg_search_getpos ( void )\n次の正規表現検索を開始する位置を取得する
mb_ereg_search_getregs /// array mb_ereg_search_getregs ( void )\nマルチバイト文字列が正規表現に一致する部分があるか調べる
mb_ereg_search_init /// bool mb_ereg_search_init ( string $string [, string $pattern [, string $option= "msr" ]] )\nマルチバイト正規表現検索用の文字列と正規表現を設定する
mb_ereg_search_pos /// array mb_ereg_search_pos ([ string $pattern [, string $option= "ms" ]] )\n指定したマルチバイト文字列が正規表現に一致する部分の位置と長さを返す
mb_ereg_search_regs /// array mb_ereg_search_regs ([ string $pattern [, string $option= "ms" ]] )\n指定したマルチバイト文字列が正規表現に一致する部分を取得する
mb_ereg_search_setpos /// bool mb_ereg_search_setpos ( int $position )\n次の正規表現検索を開始する位置を設定する
mb_ereg_search /// bool mb_ereg_search ([ string $pattern [, string $option= "ms" ]] )\n指定したマルチバイト文字列が正規表現に一致するか調べる
mb_ereg /// int mb_ereg ( string $pattern , string $string [, array $regs ] )\nマルチバイト文字列に正規表現マッチを行う
mb_eregi_replace /// string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option= "msri" ] )\nマルチバイト文字列に大文字小文字を区別せずに正規表現による置換を行う
mb_eregi /// int mb_eregi ( string $pattern , string $string [, array $regs ] )\nマルチバイト文字列に大文字小文字を区別しない正規表現マッチを行う
mb_get_info /// mixed mb_get_info ([ string $type= "all" ] )\nmbstring の内部設定値を取得する
mb_http_input /// mixed mb_http_input ([ string $type= "" ] )\nHTTP 入力文字エンコーディングを検出する
mb_http_output /// mixed mb_http_output ([ string $encoding ] )\nHTTP 出力文字エンコーディングを設定あるいは取得する
mb_internal_encoding /// mixed mb_internal_encoding ([ string $encoding= mb_internal_encoding() ] )\n内部文字エンコーディングを設定あるいは取得する
mb_language /// mixed mb_language ([ string $language ] )\n現在の言語を設定あるいは取得する
mb_list_encodings /// array mb_list_encodings ( void )\nサポートするすべてのエンコーディングの配列を返す
mb_output_handler /// string mb_output_handler ( string $contents , int $status )\n出力バッファ内で文字エンコーディングを変換するコールバック関数
mb_parse_str /// bool mb_parse_str ( string $encoded_string [, array &$result ] )\nGET/POST/COOKIE データをパースし、グローバル変数を設定する
mb_preferred_mime_name /// string mb_preferred_mime_name ( string $encoding )\nMIME 文字設定を文字列で得る
mb_regex_encoding /// mixed mb_regex_encoding ([ string $encoding ] )\n現在の正規表現用のエンコーディングを文字列として返す
mb_regex_set_options /// string mb_regex_set_options ([ string $options= "msr" ] )\nマルチバイト正規表現関数のデフォルトオプションを取得または設定する
mb_send_mail /// bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers= NULL [, string $additional_parameter= NULL ]] )\nエンコード変換を行ってメールを送信する
mb_split /// array mb_split ( string $pattern , string $string [, int $limit= -1 ] )\nマルチバイト文字列を正規表現により分割する
mb_strcut /// string mb_strcut ( string $str , int $start [, int $length [, string $encoding ]] )\n文字列の一部を得る
mb_strimwidth /// string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker [, string $encoding ]] )\n指定した幅で文字列を丸める
mb_stripos /// int mb_stripos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )\n大文字小文字を区別せず、 文字列の中で指定した文字列が最初に現れる位置を探す
mb_stristr /// string mb_stristr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )\n大文字小文字を区別せず、 文字列の中で指定した文字列が最初に現れる位置を探す
mb_strlen /// int mb_strlen ( string $str [, string $encoding ] )\n文字列の長さを得る
mb_strpos /// int mb_strpos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )\n文字列の中に指定した文字列が最初に現れる位置を見つける
mb_strrchr /// string mb_strrchr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )\n別の文字列の中で、ある文字が最後に現れる場所を見つける
mb_strrichr /// string mb_strrichr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )\n大文字小文字を区別せず、 別の文字列の中である文字が最後に現れる場所を探す
mb_strripos /// int mb_strripos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )\n大文字小文字を区別せず、 文字列の中で指定した文字列が最後に現れる位置を探す
mb_strrpos /// int mb_strrpos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )\n文字列の中に指定した文字列が最後に現れる位置を見つける
mb_strstr /// string mb_strstr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )\n文字列の中で、指定した文字列が最初に現れる位置を見つける
mb_strtolower /// string mb_strtolower ( string $str [, string $encoding= mb_internal_encoding() ] )\n文字列を小文字にする
mb_strtoupper /// string mb_strtoupper ( string $str [, string $encoding= mb_internal_encoding() ] )\n文字列を大文字にする
mb_strwidth /// int mb_strwidth ( string $str [, string $encoding ] )\n文字列の幅を返す
mb_substitute_character /// mixed mb_substitute_character ([ mixed $substrchar ] )\n置換文字を設定あるいは取得する
mb_substr_count /// int mb_substr_count ( string $haystack , string $needle [, string $encoding ] )\n部分文字列の出現回数を数える
mb_substr /// string mb_substr ( string $str , int $start [, int $length [, string $encoding ]] )\n文字列の一部を得る
pspell_add_to_personal /// bool pspell_add_to_personal ( int $dictionary_link , string $word )\nユーザの単語リストに単語を追加する
pspell_add_to_session /// bool pspell_add_to_session ( int $dictionary_link , string $word )\n現在のセッションの単語リストに単語を追加する
pspell_check /// bool pspell_check ( int $dictionary_link , string $word )\n単語をチェックする
pspell_clear_session /// bool pspell_clear_session ( int $dictionary_link )\n現在のセッションをクリアする
pspell_config_create /// int pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] )\n辞書をオープンする際に使用する設定を作成する
pspell_config_data_dir /// bool pspell_config_data_dir ( int $conf , string $directory )\n言語データファイルの場所
pspell_config_dict_dir /// bool pspell_config_dict_dir ( int $conf , string $directory )\nメイン単語リストの場所
pspell_config_ignore /// bool pspell_config_ignore ( int $dictionary_link , int $n )\n長さが N 文字未満の単語を無視する
pspell_config_mode /// bool pspell_config_mode ( int $dictionary_link , int $mode )\n返される提案の数のモードを変更する
pspell_config_personal /// bool pspell_config_personal ( int $dictionary_link , string $file )\n個人の単語リストを保持するファイルを設定する
pspell_config_repl /// bool pspell_config_repl ( int $dictionary_link , string $file )\n置換候補を保持するファイルを設定する
pspell_config_runtogether /// bool pspell_config_runtogether ( int $dictionary_link , bool $flag )\n複合語を有効な単語の組み合わせとして考慮する
pspell_config_save_repl /// bool pspell_config_save_repl ( int $dictionary_link , bool $flag )\n単語リストと共に置換リストを保存するかどうかを定義する
pspell_new_config /// int pspell_new_config ( int $config )\n指定した設定に基づき新規辞書をロードする
pspell_new_personal /// int pspell_new_personal ( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode= 0 ]]]] )\n個人の単語リストを有する新規辞書をロードする
pspell_new /// int pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode= 0 ]]]] )\n新規辞書をロードする
pspell_save_wordlist /// bool pspell_save_wordlist ( int $dictionary_link )\n個人の単語リストをファイルに保存する
pspell_store_replacement /// bool pspell_store_replacement ( int $dictionary_link , string $misspelled , string $correct )\n単語を置換する組を保存する
pspell_suggest /// array pspell_suggest ( int $dictionary_link , string $word )\n単語のスペルについて修正候補を示す
recode_file /// bool recode_file ( string $request , resource $input , resource $output )\nコード変換指令に基づきファイルからファイルにコード変換する
recode_string /// string recode_string ( string $request , string $string )\nコード変換指令に基づき文字列のコードを変換する
recode /// recode_string のエイリアス
unicode_decode /// unicode unicode_decode ( string $input , string $encoding [, int $errmode ] )\nバイナリ文字列を Unicode 文字列に変換する
unicode_encode /// string unicode_encode ( unicode $input , string $encoding [, int $errmode ] )\nunicode 文字列を任意のエンコーディングに変換する
unicode_get_error_mode /// int unicode_get_error_mode ( int $direction )\n文字列変換のエラーモードを取得する
unicode_get_subst_char /// unicode unicode_get_subst_char ( void )\n文字列変換エラー時に使用する置換文字を取得する
unicode_set_error_mode /// bool unicode_set_error_mode ( int $direction , int $mode )\n文字列変換のエラーモードを設定する
unicode_set_subst_char /// bool unicode_set_subst_char ( unicode $character )\n文字列変換エラー時に使用する置換文字を設定する
exif_imagetype /// int exif_imagetype ( string $filename )\nイメージの型を定義する
exif_read_data /// array exif_read_data ( string $filename [, string $sections= NULL [, bool $arrays= false [, bool $thumbnail= false ]]] )\nJPEG あるいは TIFF から EXIF ヘッダを読み込む
exif_tagname /// string exif_tagname ( int $index )\nインデックスに対応するヘッダ名を取得する
exif_thumbnail /// string exif_thumbnail ( string $filename [, int &$width [, int &$height [, int &$imagetype ]]] )\nTIFF あるいは JPEG 形式の画像に埋め込まれたサムネイルを取得する
read_exif_data /// exif_read_data のエイリアス
gd_info /// array gd_info ( void )\n現在インストールされているGDライブラリに関する情報を取得する
getimagesize /// array getimagesize ( string $filename [, array &$imageinfo ] )\n画像の大きさを取得する
image_type_to_extension /// string image_type_to_extension ( int $imagetype [, bool $include_dot ] )\n画像形式からファイルの拡張子を取得する
image_type_to_mime_type /// string image_type_to_mime_type ( int $imagetype )\ngetimagesize, exif_read_data, exif_thumbnail, exif_imagetypeから返される 画像形式のMIMEタイプを取得する
image2wbmp /// bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )\nブラウザまたはファイルにイメージを出力する
imagealphablending /// bool imagealphablending ( resource $image , bool $blendmode )\nイメージのブレンドモードを設定する
imageantialias /// bool imageantialias ( resource $image , bool $enabled )\nアンチエイリアス機能を使用すべきかどうかを判断する
imagearc /// bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )\n部分楕円を描画する
imagechar /// bool imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color )\n水平に文字を描画する
imagecharup /// bool imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color )\n垂直に文字を描画する
imagecolorallocate /// int imagecolorallocate ( resource $image , int $red , int $green , int $blue )\n画像で使用する色を作成する
imagecolorallocatealpha /// int imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha )\n画像で使用する色を透過度を指定して作成する
imagecolorat /// int imagecolorat ( resource $image , int $x , int $y )\nピクセルの色のインデックスを取得する
imagecolorclosest /// int imagecolorclosest ( resource $image , int $red , int $green , int $blue )\n指定した色に最も近い色のインデックスを取得する
imagecolorclosestalpha /// int imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha )\n指定した色+アルファ値に最も近い色のインデックスを取得する
imagecolorclosesthwb /// int imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue )\n色合い、白、黒を有する色のインデックスを得る
imagecolordeallocate /// bool imagecolordeallocate ( resource $image , int $color )\nイメージの色リソースを開放する
imagecolorexact /// int imagecolorexact ( resource $image , int $red , int $green , int $blue )\n指定した色のインデックスを取得する
imagecolorexactalpha /// int imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha )\n指定した色+アルファ値のインデックスを取得する
imagecolormatch /// bool imagecolormatch ( resource $image1 , resource $image2 )\nパレットイメージの色を True カラーイメージに近づける
imagecolorresolve /// int imagecolorresolve ( resource $image , int $red , int $green , int $blue )\n指定した色または出来るだけ近い色のインデックスを得る
imagecolorresolvealpha /// int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )\n指定した色+アルファ値または最も近い色のインデックスを取得する
imagecolorset /// void imagecolorset ( resource $image , int $index , int $red , int $green , int $blue )\n指定したパレットインデックスの色を設定する
imagecolorsforindex /// array imagecolorsforindex ( resource $image , int $index )\nカラーインデックスからカラーを取得する
imagecolorstotal /// int imagecolorstotal ( resource $image )\n画像パレットの色数を検出する
imagecolortransparent /// int imagecolortransparent ( resource $image [, int $color ] )\n透明色を定義する
imageconvolution /// bool imageconvolution ( resource $image , array $matrix , float $div , float $offset )\ndiv および offset の係数を使用し、3x3 の畳み込み配列を適用する
imagecopy /// bool imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h )\n画像の一部をコピーする
imagecopymerge /// bool imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )\nイメージの一部をコピー、マージする
imagecopymergegray /// bool imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )\nグレースケールでイメージの一部をコピー、マージする
imagecopyresampled /// bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )\n再サンプリングを行いイメージの一部をコピー、伸縮する
imagecopyresized /// bool imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )\n画像の一部をコピーしサイズを変更する
imagecreate /// resource imagecreate ( int $width , int $height )\nパレットを使用する新規画像を作成する
imagecreatefromgd2 /// resource imagecreatefromgd2 ( string $filename )\nGD2 ファイルまたは URL から新規イメージを生成する
imagecreatefromgd2part /// resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )\nGD2 ファイルまたは URL の指定した部分から新規イメージを生成する
imagecreatefromgd /// resource imagecreatefromgd ( string $filename )\nGD ファイルまたは URL から新規イメージを生成する
imagecreatefromgif /// resource imagecreatefromgif ( string $filename )\nファイルまたは URL から新規画像を作成する
imagecreatefromjpeg /// resource imagecreatefromjpeg ( string $filename )\nファイル又は URL から新規 JPEG 画像を作成する
imagecreatefrompng /// resource imagecreatefrompng ( string $filename )\nファイルまたは URL から新規 PNG 画像を作成する
imagecreatefromstring /// resource imagecreatefromstring ( string $data )\n文字列の中のイメージストリームから新規イメージを作成する
imagecreatefromwbmp /// resource imagecreatefromwbmp ( string $filename )\nファイルまたは URL から新規イメージを作成する
imagecreatefromxbm /// resource imagecreatefromxbm ( string $filename )\nファイル又は URL から新規イメージを生成する
imagecreatefromxpm /// resource imagecreatefromxpm ( string $filename )\nファイルまたは URL から新規イメージを生成する
imagecreatetruecolor /// resource imagecreatetruecolor ( int $width , int $height )\nTrueColor イメージを新規に作成する
imagedashedline /// bool imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )\n破線を描画する
imagedestroy /// bool imagedestroy ( resource $image )\n画像を破棄する
imageellipse /// bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )\n楕円を描画する
imagefill /// bool imagefill ( resource $image , int $x , int $y , int $color )\n塗り潰す
imagefilledarc /// bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style )\n楕円弧を描画し、塗りつぶす
imagefilledellipse /// bool imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )\n塗りつぶされた楕円を描画する
imagefilledpolygon /// bool imagefilledpolygon ( resource $image , array $points , int $num_points , int $color )\n塗りつぶした多角形を描画する
imagefilledrectangle /// bool imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )\n塗りつぶした矩形を描画する
imagefilltoborder /// bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )\n特定色で塗りつぶす
imagefilter /// bool imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )\n画像にフィルタを適用する
imagefontheight /// int imagefontheight ( int $font )\nフォントの高さを取得する
imagefontwidth /// int imagefontwidth ( int $font )\nフォントの幅を取得する
imageftbbox /// array imageftbbox ( float $size , float $angle , string $fontfile , string $text [, array $extrainfo ] )\nfreetype2 によるフォントを用いたテキストを囲む箱を取得する
imagefttext /// array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ] )\nFreeType 2 によるフォントを用いてイメージにテキストを描画する
imagegammacorrect /// bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )\nGD イメージにガンマ補正を適用する
imagegd2 /// bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type ]]] )\nGD2 イメージをブラウザまたはファイルに出力する
imagegd /// bool imagegd ( resource $image [, string $filename ] )\nGD イメージをブラウザまたはファイルに出力する
imagegif /// bool imagegif ( resource $image [, string $filename ] )\nブラウザまたはファイルへ画像を出力する
imagegrabscreen /// resource imagegrabscreen ( void )\n画面全体をキャプチャする
imagegrabwindow /// resource imagegrabwindow ( int $window [, int $client_area= 0 ] )\nウィンドウをキャプチャする
imageinterlace /// int imageinterlace ( resource $image [, int $interlace= 0 ] )\nインターレースを有効もしくは無効にする
imageistruecolor /// bool imageistruecolor ( resource $image )\n画像が truecolor かどうか調べる
imagejpeg /// bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )\n画像をブラウザまたはファイルに出力する
imagelayereffect /// bool imagelayereffect ( resource $image , int $effect )\nアルファブレンディングフラグを設定し、 libgd にバンドルされているレイヤ効果を使用する
imageline /// bool imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )\n直線を描画する
imageloadfont /// int imageloadfont ( string $file )\n新しいフォントを読み込む
imagepalettecopy /// void imagepalettecopy ( resource $destination , resource $source )\nあるイメージから他のイメージにパレットをコピーする
imagepng /// bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )\nPNG イメージをブラウザまたはファイルに出力する
imagepolygon /// bool imagepolygon ( resource $image , array $points , int $num_points , int $color )\n多角形を描画する
imagepsbbox /// array imagepsbbox ( string $text , resource $font , int $size )\nPostScript Type1 フォントを用いてテキスト矩形のバウンディングボックスを指定する
imagepsencodefont /// bool imagepsencodefont ( resource $font_index , string $encodingfile )\nフォントの文字エンコードベクトルを変更する
imagepsextendfont /// bool imagepsextendfont ( resource $font_index , float $extend )\nフォントを展開または圧縮する
imagepsfreefont /// bool imagepsfreefont ( resource $font_index )\nPostScript Type 1 フォント用メモリを解放する
imagepsloadfont /// resource imagepsloadfont ( string $filename )\nファイルから PostScript Type 1 フォントをロードする
imagepsslantfont /// bool imagepsslantfont ( resource $font_index , float $slant )\nフォントを傾ける
imagepstext /// array imagepstext ( resource $image , string $text , resource $font_index , int $size , int $foreground , int $background , int $x , int $y [, int $space= 0 [, int $tightness= 0 [, float $angle= 0.0 [, int $antialias_steps= 4 ]]]] )\nPostScript Type1 フォントを用いて画像の上に文字列を描く
imagerectangle /// bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )\n矩形を描画する
imagerotate /// resource imagerotate ( resource $image , float $angle , int $bgd_color [, int $ignore_transparent= 0 ] )\n指定された角度で画像を回転する
imagesavealpha /// bool imagesavealpha ( resource $image , bool $saveflag )\nPNG 画像を保存する際に（単一色の透過設定ではない）完全な アルファチャネル情報を保存するフラグを設定する
imagesetbrush /// bool imagesetbrush ( resource $image , resource $brush )\n線の描画用にブラシイメージを設定する
imagesetpixel /// bool imagesetpixel ( resource $image , int $x , int $y , int $color )\n点を生成する
imagesetstyle /// bool imagesetstyle ( resource $image , array $style )\n線描画用のスタイルを設定する
imagesetthickness /// bool imagesetthickness ( resource $image , int $thickness )\n線描画用の線幅を設定する
imagesettile /// bool imagesettile ( resource $image , resource $tile )\n塗りつぶし用のイメージを設定する
imagestring /// bool imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color )\n文字列を水平に描画する
imagestringup /// bool imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color )\n文字列を垂直に描画する
imagesx /// int imagesx ( resource $image )\n画像の幅を取得する
imagesy /// int imagesy ( resource $image )\n画像の高さを取得する
imagetruecolortopalette /// bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )\nTrueColor イメージをパレットイメージに変換する
imagettfbbox /// array imagettfbbox ( float $size , float $angle , string $fontfile , string $text )\nTypeType フォントを使用したテキストの bounding box を生成する
imagettftext /// array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )\nTrueType フォントを使用してテキストを画像に書き込む
imagetypes /// int imagetypes ( void )\nこの PHP がサポートしている画像形式を返す
imagewbmp /// bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )\nブラウザまたはファイルにイメージを出力する
imagexbm /// bool imagexbm ( resource $image , string $filename [, int $foreground ] )\nXBM 画像をブラウザあるいはファイルに出力する
iptcembed /// mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool ] )\nバイナリ IPTC データを JPEG イメージに埋めこむ
iptcparse /// array iptcparse ( string $iptcblock )\nバイナリの IPTC ブロックのタグをパースする
jpeg2wbmp /// bool jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )\nJPEG イメージファイルから WBMP イメージファイルに変換する
png2wbmp /// bool png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )\nPNG イメージファイルから WBMP イメージファイルに変換する
Imagick::adaptiveBlurImage /// bool Imagick::adaptiveBlurImage ( float $radius , float $sigma [, int $channel= Imagick::CHANNEL_ALL ] )\nadaptive blur (順応性にじみ) フィルタを画像に追加する
Imagick::adaptiveResizeImage /// bool Imagick::adaptiveResizeImage ( int $columns , int $rows [, bool $fit= false ] )\nデータに依存する三角測量にもとづいて画像のサイズを変更する
Imagick::adaptiveSharpenImage /// bool Imagick::adaptiveSharpenImage ( float $radius , float $sigma [, int $channel= Imagick::CHANNEL_ALL ] )\n順応して画像をシャープにする
Imagick::adaptiveThresholdImage /// bool Imagick::adaptiveThresholdImage ( int $width , int $height , int $offset )\n輝度の範囲にもとづいて各ピクセルの閾値を選択する
Imagick::addImage /// bool Imagick::addImage ( Imagick $source )\n新しい画像を Imagick オブジェクトの画像リストに追加する
Imagick::addNoiseImage /// bool Imagick::addNoiseImage ( int $noise_type [, int $channel= Imagick::CHANNEL_ALL ] )\nランダムなノイズを画像に追加する
Imagick::affineTransformImage /// bool Imagick::affineTransformImage ( ImagickDraw $matrix )\n画像を変換する
Imagick::annotateImage /// bool Imagick::annotateImage ( ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text )\n画像にテキストによる注記を加える
Imagick::appendImages /// Imagick Imagick::appendImages ( bool $stack )\n画像群を追加する
Imagick::averageImages /// Imagick Imagick::averageImages ( void )\n画像群を平均化する
Imagick::blackThresholdImage /// bool Imagick::blackThresholdImage ( mixed $threshold )\n閾値に満たないすべてのピクセルを黒にする
Imagick::blurImage /// bool Imagick::blurImage ( float $radius , float $sigma [, int $channel ] )\nblur (にじみ) フィルタを画像に追加する
Imagick::borderImage /// bool Imagick::borderImage ( mixed $bordercolor , int $width , int $height )\n画像の周りを枠線で囲む
Imagick::charcoalImage /// bool Imagick::charcoalImage ( float $radius , float $sigma )\n木炭画をシミュレートする
Imagick::chopImage /// bool Imagick::chopImage ( int $width , int $height , int $x , int $y )\n画像の一部を取り除き、切り詰める
Imagick::clear /// bool Imagick::clear ( void )\nImagick オブジェクトに関連付けられたすべてのリソースをクリアする
Imagick::clipImage /// bool Imagick::clipImage ( void )\n8BIM プロファイルの最初のパスにそって切り取る
Imagick::clipPathImage /// bool Imagick::clipPathImage ( string $pathname , bool $inside )\n8BIM プロファイルの指定した名前のパスにそって切り取る
Imagick::clone /// Imagick Imagick::clone ( void )\nImagick オブジェクトの完全なコピーを作成する
Imagick::clutImage /// bool Imagick::clutImage ( Imagick $lookup_table [, float $channel= Imagick::CHANNEL_ALL ] )\nルックアップテーブルをもとに画像の色を置き換える
Imagick::coalesceImages /// Imagick Imagick::coalesceImages ( void )\n複数の画像を合成する
Imagick::colorFloodfillImage /// bool Imagick::colorFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y )\n対象にマッチする任意の点の色の値を変更する
Imagick::colorizeImage /// bool Imagick::colorizeImage ( mixed $colorize , mixed $opacity )\n塗りつぶし色と画像を混合する
Imagick::combineImages /// Imagick Imagick::combineImages ( int $channelType )\nひとつあるいは複数の画像をひとつにまとめる
Imagick::commentImage /// bool Imagick::commentImage ( string $comment )\nコメントを画像に追加する
Imagick::compareImageChannels /// array Imagick::compareImageChannels ( Imagick $image , int $channelType , int $metricType )\nひとつあるいは複数の画像の差を返す
Imagick::compareImageLayers /// Imagick Imagick::compareImageLayers ( int $method )\n複数の画像の中で最大の境界範囲を返す
Imagick::compareImages /// array Imagick::compareImages ( Imagick $compare , int $metric )\nある画像を再構築された画像と比較する
Imagick::compositeImage /// bool Imagick::compositeImage ( Imagick $composite_object , int $composite , int $x , int $y [, int $channel= Imagick::CHANNEL_ALL ] )\nある画像を別の画像に合成する
Imagick::__construct /// Imagick Imagick::__construct ([ mixed $files ] )\nImagick のコンストラクタ
Imagick::contrastImage /// bool Imagick::contrastImage ( bool $sharpen )\n画像のコントラストを変更する
Imagick::contrastStretchImage /// bool Imagick::contrastStretchImage ( float $black_point , float $white_point [, int $channel= Imagick::CHANNEL_ALL ] )\nカラー画像のコントラストを強調する
Imagick::convolveImage /// bool Imagick::convolveImage ( array $kernel [, int $channel= Imagick::CHANNEL_ALL ] )\n独自の畳み込み関数を画像に適用する
Imagick::cropImage /// bool Imagick::cropImage ( int $width , int $height , int $x , int $y )\n画像の一部を抽出する
Imagick::cropThumbnailImage /// bool Imagick::cropThumbnailImage ( int $width , int $height )\n切り取ってサムネイルを作成する
Imagick::current /// Imagick Imagick::current ( void )\n現在の Imagick オブジェクトへの参照を返す
Imagick::cycleColormapImage /// bool Imagick::cycleColormapImage ( int $displace )\n画像のカラーマップを移動する
Imagick::deconstructImages /// bool Imagick::deconstructImages ( void )\n画像間の特定のピクセルの差を返す
Imagick::despeckleImage /// bool Imagick::despeckleImage ( void )\n画像内のスペックルノイズを軽減する
Imagick::destroy /// bool Imagick::destroy ( void )\nImagick オブジェクトを破棄する
Imagick::displayImage /// bool Imagick::displayImage ( string $servername )\n画像を表示する
Imagick::displayImages /// bool Imagick::displayImages ( string $servername )\n画像あるいは画像シーケンスを表示する
Imagick::distortImage /// bool Imagick::distortImage ( int $method , array $arguments , bool $bestfit )\nさまざまな方式で画像を歪める
Imagick::drawImage /// bool Imagick::drawImage ( ImagickDraw $draw )\n現在の画像上の ImagickDraw オブジェクトをレンダリングする
Imagick::edgeImage /// bool Imagick::edgeImage ( float $radius )\n画像の輪郭を強調する
Imagick::embossImage /// bool Imagick::embossImage ( float $radius , float $sigma )\nグレースケール画像に三次元効果を施して返す
Imagick::enhanceImage /// bool Imagick::enhanceImage ( void )\nノイジーな画像の品質を向上させる
Imagick::equalizeImage /// bool Imagick::equalizeImage ( void )\n画像ヒストグラムを均等化する
Imagick::evaluateImage /// bool Imagick::evaluateImage ( int $op , float $constant [, int $channel= Imagick::CHANNEL_ALL ] )\n式を画像に適用する
Imagick::flattenImages /// Imagick Imagick::flattenImages ( void )\n画像シーケンスをマージする
Imagick::flipImage /// bool Imagick::flipImage ( void )\n垂直方向に反転した画像を作成する
Imagick::flopImage /// bool Imagick::flopImage ( void )\n水平方向に反転した画像を作成する
Imagick::frameImage /// bool Imagick::frameImage ( mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel )\n三次元の枠線をシミュレートする
Imagick::fxImage /// Imagick Imagick::fxImage ( string $expression [, int $channel= Imagick::CHANNEL_ALL ] )\n式を画像の各ピクセルに適用する
Imagick::gammaImage /// bool Imagick::gammaImage ( float $gamma [, int $channel= Imagick::CHANNEL_ALL ] )\n画像をガンマ補正する
Imagick::gaussianBlurImage /// bool Imagick::gaussianBlurImage ( float $radius , float $sigma [, int $channel= Imagick::CHANNEL_ALL ] )\n画像をぼかす
Imagick::getCompression /// int Imagick::getCompression ( void )\nオブジェクトの圧縮形式を取得する
Imagick::getCompressionQuality /// int Imagick::getCompressionQuality ( void )\nオブジェクトの圧縮品質を取得する
Imagick::getCopyright /// string Imagick::getCopyright ( void )\nImageMagick API の著作権情報を文字列で返す
Imagick::getFilename /// string Imagick::getFilename ( void )\n画像シーケンスに関連付けられたファイル名を取得する
Imagick::getFormat /// string Imagick::getFormat ( void )\nImagick オブジェクトのフォーマットを取得する
Imagick::getHomeURL /// string Imagick::getHomeURL ( void )\nImageMagick のホーム URL を返す
Imagick::getImage /// Imagick Imagick::getImage ( void )\n新しい Imagick オブジェクトを返す
Imagick::getImageBackgroundColor /// ImagickPixel Imagick::getImageBackgroundColor ( void )\n画像の背景色を返す
Imagick::getImageBlob /// string Imagick::getImageBlob ( void )\n画像シーケンスを blob で返す
Imagick::getImageBluePrimary /// array Imagick::getImageBluePrimary ( float $x , float $y )\n青が一番強い点を返す
Imagick::getImageBorderColor /// ImagickPixel Imagick::getImageBorderColor ( void )\n画像の前景色を返す
Imagick::getImageChannelDepth /// int Imagick::getImageChannelDepth ( int $channelType )\n特定の画像チャネルの深度を返す
Imagick::getImageChannelDistortion /// float Imagick::getImageChannelDistortion ( Imagick $reference , int $channel , int $metric )\n画像のチャネルを再構築した画像と比較する
Imagick::getImageChannelExtrema /// array Imagick::getImageChannelExtrema ( int $channel )\nひとつあるいは複数の画像チャネルの極値を取得する
Imagick::getImageChannelMean /// array Imagick::getImageChannelMean ( int $channel )\n平均値と標準偏差を取得する
Imagick::getImageChannelStatistics /// array Imagick::getImageChannelStatistics ( void )\n画像の各チャネルの統計情報を返す
Imagick::getImageColormapColor /// ImagickPixel Imagick::getImageColormapColor ( int $index )\n指定したインデックスに対応する色マップ上の色を返す
Imagick::getImageColors /// int Imagick::getImageColors ( void )\n画像で使われている色の数を取得する
Imagick::getImageColorspace /// int Imagick::getImageColorspace ( void )\n画像の色空間を取得する
Imagick::getImageCompose /// int Imagick::getImageCompose ( void )\n画像の合成演算子を返す
Imagick::getImageDelay /// int Imagick::getImageDelay ( void )\n画像の遅延を取得する
Imagick::getImageDepth /// int Imagick::getImageDepth ( void )\n画像の深度を取得する
Imagick::getImageDispose /// int Imagick::getImageDispose ( void )\n画像の配置方法を取得する
Imagick::getImageDistortion /// float Imagick::getImageDistortion ( MagickWand $reference , int $metric )\nある画像と再構築した画像を比較する
Imagick::getImageExtrema /// array Imagick::getImageExtrema ( void )\n画像の極値を取得する
Imagick::getImageFilename /// string Imagick::getImageFilename ( void )\nシーケンス内の特定の画像のファイル名を返す
Imagick::getImageFormat /// string Imagick::getImageFormat ( void )\nシーケンス内の特定の画像のフォーマットを返す
Imagick::getImageGamma /// float Imagick::getImageGamma ( void )\n画像のガンマを取得する
Imagick::getImageGeometry /// array Imagick::getImageGeometry ( void )\n幅と高さを連想配列で取得する
Imagick::getImageGreenPrimary /// array Imagick::getImageGreenPrimary ( void )\n緑が一番強い点を返す
Imagick::getImageHeight /// int Imagick::getImageHeight ( void )\n画像の高さを返す
Imagick::getImageHistogram /// array Imagick::getImageHistogram ( void )\n画像のヒストグラムを取得する
Imagick::getImageIndex /// int Imagick::getImageIndex ( void )\n現在アクティブな画像のインデックスを取得する
Imagick::getImageInterlaceScheme /// int Imagick::getImageInterlaceScheme ( void )\n画像のインターレース手法を取得する
Imagick::getImageInterpolateMethod /// int Imagick::getImageInterpolateMethod ( void )\n画像の補間方式を返す
Imagick::getImageIterations /// int Imagick::getImageIterations ( void )\n画像の反復を取得する
Imagick::getImageLength /// int Imagick::getImageLength ( void )\n画像の長さをバイト数で取得する
Imagick::getImageMagickLicense /// string Imagick::getImageMagickLicense ( void )\nImageMagick のライセンスを文字列で返す
Imagick::getImageMatte /// int Imagick::getImageMatte ( void )\n画像がマットチャネルを持っているかどうかを返す
Imagick::getImageMatteColor /// ImagickPixel Imagick::getImageMatteColor ( void )\n画像のマット色を返す
Imagick::getImageOrientation /// int Imagick::getImageOrientation ( void )\n画像の方向を取得する
Imagick::getImagePage /// array Imagick::getImagePage ( void )\nページのジオメトリを返す
Imagick::getImagePixelColor /// ImagickPixel Imagick::getImagePixelColor ( int $x , int $y )\n指定したピクセルの色を返す
Imagick::getImageProfile /// string Imagick::getImageProfile ( string $name )\n指定した名前の画像プロファイルを返す
Imagick::getImageProfiles /// array Imagick::getImageProfiles ([ string $pattern= "*" [, bool $only_names= true ]] )\n画像プロファイルを返す
Imagick::getImageProperties /// array Imagick::getImageProperties ([ string $pattern= "*" [, bool $only_names= true ]] )\n画像のプロパティを返す
Imagick::getImageProperty /// string Imagick::getImageProperty ( string $name )\n指定した名前の画像のプロパティを返す
Imagick::getImageRedPrimary /// array Imagick::getImageRedPrimary ( void )\n赤が一番強い点を返す
Imagick::getImageRegion /// Imagick Imagick::getImageRegion ( int $width , int $height , int $x , int $y )\n画像の一部を抽出する
Imagick::getImageRenderingIntent /// int Imagick::getImageRenderingIntent ( void )\n画像のレンダリング方向を取得する
Imagick::getImageResolution /// array Imagick::getImageResolution ( void )\n画像の X 方向と Y 方向の解像度を取得する
Imagick::getImagesBlob /// string Imagick::getImagesBlob ( void )\nすべての画像シーケンスを blob で返す
Imagick::getImageScene /// int Imagick::getImageScene ( void )\n画像のシーンを取得する
Imagick::getImageSignature /// string Imagick::getImageSignature ( void )\nSHA-256 メッセージダイジェストを生成する
Imagick::getImageSize /// int Imagick::getImageSize ( void )\n画像の長さをバイト数で返す
Imagick::getImageTicksPerSecond /// int Imagick::getImageTicksPerSecond ( void )\n画像の ticks-per-second を取得する
Imagick::getImageTotalInkDensity /// float Imagick::getImageTotalInkDensity ( void )\n画像の総インク密度を取得する
Imagick::getImageType /// int Imagick::getImageType ( void )\n画像の型を取得する
Imagick::getImageUnits /// int Imagick::getImageUnits ( void )\n画像の解像度の単位を取得する
Imagick::getImageVirtualPixelMethod /// int Imagick::getImageVirtualPixelMethod ( void )\n仮想ピクセルメソッドを取得する
Imagick::getImageWhitePoint /// array Imagick::getImageWhitePoint ( void )\n色度が白い点を返す
Imagick::getImageWidth /// int Imagick::getImageWidth ( void )\n画像の幅を返す
Imagick::getInterlaceScheme /// int Imagick::getInterlaceScheme ( void )\nオブジェクトのインターレース方式を取得する
Imagick::getIteratorIndex /// int Imagick::getIteratorIndex ( void )\n現在アクティブな画像のインデックスを取得する
Imagick::getNumberImages /// int Imagick::getNumberImages ( void )\nオブジェクト内の画像の数を返す
Imagick::getOption /// string Imagick::getOption ( string $key )\n指定したキーに対応する値を返す
Imagick::getPackageName /// string Imagick::getPackageName ( void )\nImageMagick パッケージ名を返す
Imagick::getPage /// array Imagick::getPage ( void )\nページのジオメトリを返す
Imagick::getPixelIterator /// ImagickPixelIterator Imagick::getPixelIterator ( void )\nMagickPixelIterator を返す
Imagick::getPixelRegionIterator /// ImagickPixelIterator Imagick::getPixelRegionIterator ( int $x , int $y , int $columns , int $rows )\n画像セクションの ImagickPixelIterator を取得する
Imagick::getQuantumDepth /// array Imagick::getQuantumDepth ( void )\nquantum depth を取得する
Imagick::getQuantumRange /// array Imagick::getQuantumRange ( void )\nImagick quantum range を返す
Imagick::getReleaseDate /// string Imagick::getReleaseDate ( void )\nImageMagick のリリース日を返す
Imagick::getResource /// int Imagick::getResource ( int $type )\n指定したリソースのメモリ使用状況を返す
Imagick::getResourceLimit /// int Imagick::getResourceLimit ( int $type )\n指定したリソースの制限を返す
Imagick::getSamplingFactors /// array Imagick::getSamplingFactors ( void )\n水平方向および垂直方向のサンプリング係数を取得する
Imagick::getSize /// array Imagick::getSize ( void )\nImagick オブジェクトのサイズを取得する
Imagick::getSizeOffset /// int Imagick::getSizeOffset ( void )\nサイズのオフセットを返す
Imagick::getVersion /// array Imagick::getVersion ( void )\nImageMagick API のバージョンを返す
Imagick::hasNextImage /// bool Imagick::hasNextImage ( void )\nオブジェクトが次の画像を保持しているかどうかを調べる
Imagick::hasPreviousImage /// bool Imagick::hasPreviousImage ( void )\nオブジェクトが前の画像を保持しているかどうかを調べる
Imagick::identifyImage /// array Imagick::identifyImage ([ bool $appendRawOutput= false ] )\n画像を識別し、属性を取得する
Imagick::implodeImage /// bool Imagick::implodeImage ( float $radius )\n新しい画像をコピーとして作成する
Imagick::labelImage /// bool Imagick::labelImage ( string $label )\nラベルを画像に追加する
Imagick::levelImage /// bool Imagick::levelImage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel= Imagick::CHANNEL_ALL ] )\n画像のレベルを調節する
Imagick::linearStretchImage /// bool Imagick::linearStretchImage ( float $blackPoint , float $whitePoint )\n画像の輝度を引き伸ばして飽和させる
Imagick::magnifyImage /// bool Imagick::magnifyImage ( void )\n画像を 2 倍に比例拡大する
Imagick::mapImage /// bool Imagick::mapImage ( Imagick $map , bool $dither )\n画像の色を、参照画像の中の最も近い色に置き換える
Imagick::matteFloodfillImage /// bool Imagick::matteFloodfillImage ( float $alpha , float $fuzz , mixed $bordercolor , int $x , int $y )\n色の透明度を変更する
Imagick::medianFilterImage /// bool Imagick::medianFilterImage ( float $radius )\nデジタルフィルタを適用する
Imagick::minifyImage /// bool Imagick::minifyImage ( void )\n画像をその半分のサイズに比例縮小する
Imagick::modulateImage /// bool Imagick::modulateImage ( float $brightness , float $saturation , float $hue )\n明度、飽和度、色相を制御する
Imagick::montageImage /// Imagick Imagick::montageImage ( ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame )\n合成画像を作成する
Imagick::morphImages /// Imagick Imagick::morphImages ( int $number_frames )\n複数の画像をモーフィングする
Imagick::mosaicImages /// Imagick Imagick::mosaicImages ( void )\n画像からモザイクを作成する
Imagick::motionBlurImage /// bool Imagick::motionBlurImage ( float $radius , float $sigma , float $angle [, int $channel= Imagick::CHANNEL_DEFAULT ] )\nモーションブラーをシミュレートする
Imagick::negateImage /// bool Imagick::negateImage ( bool $gray [, int $channel= Imagick::CHANNEL_ALL ] )\n画像の色を打ち消す
Imagick::newImage /// bool Imagick::newImage ( int $cols , int $rows , mixed $background [, string $format ] )\n新しい画像を作成する
Imagick::newPseudoImage /// bool Imagick::newPseudoImage ( int $columns , int $rows , string $pseudoString )\n新しい画像を作成する
Imagick::nextImage /// bool Imagick::nextImage ( void )\n次の画像に移動する
Imagick::normalizeImage /// bool Imagick::normalizeImage ([ int $channel ] )\nカラー画像のコントラストを強調する
Imagick::oilPaintImage /// bool Imagick::oilPaintImage ( float $radius )\n油絵をシミュレートする
Imagick::optimizeImageLayers /// bool Imagick::optimizeImageLayers ( void )\n画像の繰り返し部分を削除して最適化する
Imagick::orderedPosterizeImage /// bool Imagick::orderedPosterizeImage ( string $threshold_map [, int $channel= Imagick::CHANNEL_ALL ] )\n配列ディザリングを行う
Imagick::colorFloodfillImage /// bool Imagick::paintFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y [, int $channel= Imagick::CHANNEL_ALL ] )\n色にマッチするピクセルを変更する
Imagick::paintOpaqueImage /// bool Imagick::paintOpaqueImage ( mixed $target , mixed $fill , float $fuzz [, int $channel= Imagick::CHANNEL_ALL ] )\n色にマッチするピクセルを変更する
Imagick::paintTransparentImage /// bool Imagick::paintTransparentImage ( mixed $target , float $alpha , float $fuzz )\n色にマッチするピクセルを塗りつぶし色に変更する
Imagick::pingImage /// bool Imagick::pingImage ( string $filename )\n画像の基本属性を取得する
Imagick::pingImageBlob /// bool Imagick::pingImageBlob ( string $image )\n手早く属性を取得する
Imagick::pingImageFile /// bool Imagick::pingImageFile ( resource $filehandle [, string $fileName ] )\n画像の基本属性を手軽に取得する
Imagick::polaroidImage /// bool Imagick::polaroidImage ( ImagickDraw $properties , float $angle )\nポラロイド写真をシミュレートする
Imagick::posterizeImage /// bool Imagick::posterizeImage ( int $levels , bool $dither )\n指定した色数まで画像を減色する
Imagick::previewImages /// bool Imagick::previewImages ( int $preview )\n画像処理用の適切なパラメータを手早く取得する
Imagick::previousImage /// bool Imagick::previousImage ( void )\nオブジェクト内の前の画像に移動する
Imagick::profileImage /// bool Imagick::profileImage ( string $name , string $profile )\n画像のプロファイルを追加あるいは削除する
Imagick::quantizeImage /// bool Imagick::quantizeImage ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )\n参照画像内の色を解析する
Imagick::quantizeImages /// bool Imagick::quantizeImages ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )\n画像シーケンス内の色を解析する
Imagick::queryFontMetrics /// array Imagick::queryFontMetrics ( ImagickDraw $properties , string $text [, bool $multiline ] )\nフォントメトリクスを表す配列を返す
Imagick::queryFonts /// array Imagick::queryFonts ([ string $pattern= "*" ] )\n設定したフォントを返す
Imagick::queryFormats /// array Imagick::queryFormats ([ string $pattern= "*" ] )\nImagick がサポートするフォーマットを返す
Imagick::radialBlurImage /// bool Imagick::radialBlurImage ( float $angle [, int $channel= Imagick::CHANNEL_ALL ] )\n画像にラジアルブラーを施す
Imagick::raiseImage /// bool Imagick::raiseImage ( int $width , int $height , int $x , int $y , bool $raise )\n三次元のボタン風の効果をシミュレートする
Imagick::randomThresholdImage /// bool Imagick::randomThresholdImage ( float $low , float $high [, int $channel= Imagick::CHANNEL_ALL ] )\nコントラストの高い 2 色の画像を作成する
Imagick::readImage /// bool Imagick::readImage ( string $filename )\nファイルから画像を読み込む
Imagick::readImageBlob /// bool Imagick::readImageBlob ( string $image [, string $filename ] )\nバイナリ文字列から画像を読み込む
Imagick::readImageFile /// bool Imagick::readImageFile ( resource $filehandle [, string $fileName ] )\nオープンしているファイルハンドルから画像を読み込む
Imagick::reduceNoiseImage /// bool Imagick::reduceNoiseImage ( float $radius )\n画像の輪郭をなめらかにする
Imagick::removeImage /// bool Imagick::removeImage ( void )\n画像リストから画像を削除する
Imagick::removeImageProfile /// string Imagick::removeImageProfile ( string $name )\n指定した名前の画像プロファイルを削除してそれを返す
Imagick::render /// bool Imagick::render ( void )\nそれまでのすべての描画コマンドをレンダリングする
Imagick::resampleImage /// bool Imagick::resampleImage ( float $x_resolution , float $y_resolution , int $filter , float $blur )\n画像を指定した解像度にリサンプリングする
Imagick::resizeImage /// bool Imagick::resizeImage ( int $columns , int $rows , int $filter , float $blur [, bool $fit= false ] )\n画像のサイズを変更する
Imagick::rollImage /// bool Imagick::rollImage ( int $x , int $y )\n画像を補正する
Imagick::rotateImage /// bool Imagick::rotateImage ( mixed $background , float $degrees )\n画像を回転する
Imagick::roundCorners /// bool Imagick::roundCorners ( float $x_rounding , float $y_rounding [, float $stroke_width= 10 [, float $displace= 5 [, float $size_correction= -6 ]]] )\n画像の角を丸める
Imagick::sampleImage /// bool Imagick::sampleImage ( int $columns , int $rows )\nピクセルのサンプリングによって画像の倍率を変更する
Imagick::scaleImage /// bool Imagick::scaleImage ( int $cols , int $rows [, bool $fit= false ] )\n画像のサイズを変更する
Imagick::separateImageChannel /// bool Imagick::separateImageChannel ( int $channel )\n画像からチャネルを分離する
Imagick::sepiaToneImage /// bool Imagick::sepiaToneImage ( float $threshold )\n画像をセピア調にする
Imagick::setBackgroundColor /// bool Imagick::setBackgroundColor ( mixed $background )\nオブジェクトのデフォルト背景色を設定する
Imagick::setCompression /// bool Imagick::setCompression ( int $compression )\nオブジェクトのデフォルトの圧縮方式を設定する
Imagick::setCompressionQuality /// bool Imagick::setCompressionQuality ( int $quality )\nオブジェクトのデフォルトの圧縮品質を設定する
Imagick::setFilename /// bool Imagick::setFilename ( string $filename )\n画像を読み書きする前にファイル名を設定する
Imagick::setFirstIterator /// bool Imagick::setFirstIterator ( void )\nImagick イテレータを最初の画像に設定する
Imagick::setFont /// bool Imagick::setFont ( string $font )\n画像を畳み込むすべてのメソッドについての画像バイアスを設定する
Imagick::setFormat /// bool Imagick::setFormat ( string $format )\nImagick オブジェクトのフォーマットを設定する
Imagick::setImage /// bool Imagick::setImage ( Imagick $replace )\nオブジェクト内の画像を置き換える
Imagick::setImageBackgroundColor /// bool Imagick::setImageBackgroundColor ( mixed $background )\n画像の背景色を設定する
Imagick::setImageBias /// bool Imagick::setImageBias ( float $bias )\n画像を折りたたむ任意のメソッドについて画像のバイアスを設定する
Imagick::setImageBluePrimary /// bool Imagick::setImageBluePrimary ( float $x , float $y )\n青が一番強い点を設定する
Imagick::setImageBorderColor /// bool Imagick::setImageBorderColor ( mixed $border )\n画像の前景色を設定する
Imagick::setImageChannelDepth /// bool Imagick::setImageChannelDepth ( int $channel , int $depth )\n特定の画像チャネルの深度を設定する
Imagick::setImageColormapColor /// bool Imagick::setImageColormapColor ( int $index , ImagickPixel $color )\n指定した色マップインデックスの色を設定する
Imagick::setImageColorspace /// bool Imagick::setImageColorspace ( int $colorspace )\n画像の色空間を設定する
Imagick::setImageCompose /// bool Imagick::setImageCompose ( int $compose )\n画像の合成演算子を設定する
Imagick::setImageCompression /// bool Imagick::setImageCompression ( int $compression )\n画像の圧縮を設定する
Imagick::setImageDelay /// bool Imagick::setImageDelay ( int $delay )\n画像の遅延を設定する
Imagick::setImageDepth /// bool Imagick::setImageDepth ( int $depth )\n画像の深度を設定する
Imagick::setImageDispose /// bool Imagick::setImageDispose ( int $dispose )\n画像の配置方法を設定する
Imagick::setImageExtent /// bool Imagick::setImageExtent ( int $columns , int $rows )\n画像のサイズを設定する
Imagick::setImageFilename /// bool Imagick::setImageFilename ( string $filename )\n特定の画像のファイル名を設定する
Imagick::setImageFormat /// bool Imagick::setImageFormat ( string $format )\n特定の画像のフォーマットを設定する
Imagick::setImageGamma /// bool Imagick::setImageGamma ( float $gamma )\n画像のガンマを設定する
Imagick::setImageGreenPrimary /// bool Imagick::setImageGreenPrimary ( float $x , float $y )\n緑が一番強い点を設定する
Imagick::setImageIndex /// bool Imagick::setImageIndex ( int $index )\nイテレータの位置を設定する
Imagick::setImageInterlaceScheme /// bool Imagick::setImageInterlaceScheme ( int $interlace_scheme )\n画像のインターレース手法を設定する
Imagick::setImageInterpolateMethod /// bool Imagick::setImageInterpolateMethod ( int $method )\n画像のピクセル補間方式を設定する
Imagick::setImageIterations /// bool Imagick::setImageIterations ( int $iterations )\n画像の反復を設定する
Imagick::setImageMatte /// bool Imagick::setImageMatte ( bool $matte )\n画像のマットチャネルを設定する
Imagick::setImageMatteColor /// bool Imagick::setImageMatteColor ( mixed $matte )\n画像のマット色を設定する
Imagick::setImageOpacity /// bool Imagick::setImageOpacity ( float $opacity )\n画像の不透明度を設定する
Imagick::setImageOrientation /// bool Imagick::setImageOrientation ( int $orientation )\n画像の方向を設定する
Imagick::setImagePage /// bool Imagick::setImagePage ( int $width , int $height , int $x , int $y )\n画像のページのジオメトリを設定する
Imagick::setImageProfile /// bool Imagick::setImageProfile ( string $name , string $profile )\n指定した名前の画像プロファイルを Imagick オブジェクトに追加する
Imagick::setImageProperty /// bool Imagick::setImageProperty ( string $name , string $value )\n画像のプロパティを設定する
Imagick::setImageRedPrimary /// bool Imagick::setImageRedPrimary ( float $x , float $y )\n赤が一番強い点を設定する
Imagick::setImageRenderingIntent /// bool Imagick::setImageRenderingIntent ( int $rendering_intent )\n画像のレンダリング方向を設定する
Imagick::setImageResolution /// bool Imagick::setImageResolution ( float $x_resolution , float $y_resolution )\n画像の解像度を設定する
Imagick::setImageScene /// bool Imagick::setImageScene ( int $scene )\n画像のシーンを設定する
Imagick::setImageTicksPerSecond /// bool Imagick::setImageTicksPerSecond ( int $ticks_per-second )\n画像の ticks-per-second を設定する
Imagick::setImageType /// bool Imagick::setImageType ( int $image_type )\n画像の型を設定する
Imagick::setImageUnits /// bool Imagick::setImageUnits ( int $units )\n画像の解像度の単位を設定する
Imagick::setImageVirtualPixelMethod /// bool Imagick::setImageVirtualPixelMethod ( int $method )\n画像の仮想ピクセルメソッドを設定する
Imagick::setImageWhitePoint /// bool Imagick::setImageWhitePoint ( float $x , float $y )\n画像の色度が白い点を設定する
Imagick::setInterlaceScheme /// bool Imagick::setInterlaceScheme ( int $interlace_scheme )\n画像の圧縮を設定する
Imagick::setIteratorIndex /// bool Imagick::setIteratorIndex ( int $index )\nイテレータの位置を設定する
Imagick::setLastIterator /// bool Imagick::setLastIterator ( void )\nImagick イテレータを最後の画像に設定する
Imagick::setOption /// bool Imagick::setOption ( string $key , string $value )\nオプションを設定する
Imagick::setPage /// bool Imagick::setPage ( int $width , int $height , int $x , int $y )\nImagick オブジェクトのページジオメトリを設定する
Imagick::setResolution /// bool Imagick::setResolution ( float $x_resolution , float $y_resolution )\n画像の解像度を設定する
Imagick::setResourceLimit /// bool Imagick::setResourceLimit ( int $type , int $limit )\n特定のリソースの制限をメガバイト単位で設定する
Imagick::setSamplingFactors /// bool Imagick::setSamplingFactors ( array $factors )\n画像のサンプリング係数を設定する
Imagick::setSize /// bool Imagick::setSize ( int $columns , int $rows )\nImagick オブジェクトのサイズを設定する
Imagick::setSizeOffset /// bool Imagick::setSizeOffset ( int $columns , int $rows , int $offset )\nImagick オブジェクトのサイズのオフセットを設定する
Imagick::setType /// bool Imagick::setType ( int $image_type )\n画像タイプ属性を設定する
Imagick::shadeImage /// bool Imagick::shadeImage ( bool $gray , float $azimuth , float $elevation )\n3D 効果を作成する
Imagick::shadowImage /// bool Imagick::shadowImage ( float $opacity , float $sigma , int $x , int $y )\n画像の影をシミュレートする
Imagick::sharpenImage /// bool Imagick::sharpenImage ( float $radius , float $sigma [, int $channel= Imagick::CHANNEL_ALL ] )\n画像をシャープにする
Imagick::shaveImage /// bool Imagick::shaveImage ( int $columns , int $rows )\n画像の輪郭からピクセルを刈り取る
Imagick::shearImage /// bool Imagick::shearImage ( mixed $background , float $x_shear , float $y_shear )\n平行四辺形を作成する
Imagick::sigmoidalContrastImage /// bool Imagick::sigmoidalContrastImage ( bool $sharpen , float $alpha , float $beta [, int $channel= Imagick::CHANNEL_ALL ] )\n画像のコントラストを調整する
Imagick::sketchImage /// bool Imagick::sketchImage ( float $radius , float $sigma , float $angle )\n鉛筆画をシミュレートする
Imagick::solarizeImage /// bool Imagick::solarizeImage ( int $threshold )\n画像にソラリゼーション効果を適用する
Imagick::spliceImage /// bool Imagick::spliceImage ( int $width , int $height , int $x , int $y )\n無地の画像を作成する
Imagick::spreadImage /// bool Imagick::spreadImage ( float $radius )\nブロック内の各ピクセルをランダムに移動する
Imagick::steganoImage /// Imagick Imagick::steganoImage ( Imagick $watermark_wand , int $offset )\nデジタル透かしを画像に埋め込む
Imagick::stereoImage /// bool Imagick::stereoImage ( Imagick $offset_wand )\nふたつの画像を合成する
Imagick::stripImage /// bool Imagick::stripImage ( void )\n画像からすべてのプロパティやコメントを除去する
Imagick::swirlImage /// bool Imagick::swirlImage ( float $degrees )\n画像の中心から、ピクセルを渦巻状にする
Imagick::textureImage /// bool Imagick::textureImage ( Imagick $texture_wand )\nテクスチャ画像をタイル状に並べる
Imagick::thresholdImage /// bool Imagick::thresholdImage ( float $threshold [, int $channel= Imagick::CHANNEL_ALL ] )\n閾値にもとづいて個々のピクセルの値を変更する
Imagick::thumbnailImage /// bool Imagick::thumbnailImage ( int $columns , int $rows [, bool $fit= false ] )\n画像のサイズを変更する
Imagick::tintImage /// bool Imagick::tintImage ( mixed $tint , mixed $opacity )\n色ベクトルを画像の各ピクセルに適用する
Imagick::transformImage /// Imagick Imagick::transformImage ( string $crop , string $geometry )\n切り取るサイズと画像のジオメトリを設定する便利なメソッド
Imagick::transposeImage /// bool Imagick::transposeImage ( void )\n垂直方向に反転させた画像を作成する
Imagick::transverseImage /// bool Imagick::transverseImage ( void )\n水平方向に反転させた画像を作成する
Imagick::trimImage /// bool Imagick::trimImage ( float $fuzz )\n画像の輪郭を削除する
Imagick::uniqueImageColors /// bool Imagick::uniqueImageColors ( void )\nある 1 色以外のすべての色のピクセルを削除する
Imagick::unsharpMaskImage /// bool Imagick::unsharpMaskImage ( float $radius , float $sigma , float $amount , float $threshold [, int $channel= Imagick::CHANNEL_ALL ] )\n画像をシャープにする
Imagick::valid /// bool Imagick::valid ( void )\n現在のアイテムが有効かどうかを調べる
Imagick::vignetteImage /// bool Imagick::vignetteImage ( float $blackPoint , float $whitePoint , int $x , int $y )\nビネットフィルタを画像に追加する
Imagick::waveImage /// bool Imagick::waveImage ( float $amplitude , float $length )\nウェーブフィルタを画像に適用する
Imagick::whiteThresholdImage /// bool Imagick::whiteThresholdImage ( mixed $threshold )\n閾値に満たないすべてのピクセルを白にする
Imagick::writeImage /// bool Imagick::writeImage ([ string $filename ] )\n指定した名前で画像を書き込む
Imagick::writeImages /// bool Imagick::writeImages ( string $filename , bool $adjoin )\n画像あるいは画像シーケンスを書き込む
ImagickDraw::affine /// bool ImagickDraw::affine ( array $affine )\n現在のアフィン変換行列を設定する
ImagickDraw::annotation /// bool ImagickDraw::annotation ( float $x , float $y , string $text )\n画像上にテキストを描画する
ImagickDraw::arc /// bool ImagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )\n円弧を描画する
ImagickDraw::bezier /// bool ImagickDraw::bezier ( array $coordinates )\nベジエ曲線を描画する
ImagickDraw::circle /// bool ImagickDraw::circle ( float $ox , float $oy , float $px , float $py )\n円を描画する
ImagickDraw::clear /// bool ImagickDraw::clear ( void )\nImagickDraw をクリアする
ImagickDraw::clone /// ImagickDraw ImagickDraw::clone ( void )\n指定した ImagickDraw オブジェクトの完全なコピーを作成する
ImagickDraw::color /// bool ImagickDraw::color ( float $x , float $y , int $paintMethod )\n画像上に色を描画する
ImagickDraw::comment /// bool ImagickDraw::comment ( string $comment )\nコメントを追加する
ImagickDraw::composite /// bool ImagickDraw::composite ( int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand )\n現在の画像上に別の画像を合成する
ImagickDraw::__construct /// ImagickDraw ImagickDraw::__construct ( void )\nImagickDraw コンストラクタ
ImagickDraw::destroy /// bool ImagickDraw::destroy ( void )\n関連付けられたすべてのリソースを開放する
ImagickDraw::ellipse /// bool ImagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )\n画像上に楕円を描画する
ImagickDraw::getClipPath /// string ImagickDraw::getClipPath ( void )\n現在のクリッピングパスの ID を取得する
ImagickDraw::getClipRule /// int ImagickDraw::getClipRule ( void )\n現在の多角形塗りつぶしルールを返す
ImagickDraw::getClipUnits /// int ImagickDraw::getClipUnits ( void )\nクリップパスの単位の解釈を返す
ImagickDraw::getFillColor /// ImagickPixel ImagickDraw::getFillColor ( void )\n塗りつぶし色を返す
ImagickDraw::getFillOpacity /// float ImagickDraw::getFillOpacity ( void )\n描画時の透過度を返す
ImagickDraw::getFillRule /// int ImagickDraw::getFillRule ( void )\n塗りつぶしルールを返す
ImagickDraw::getFont /// string ImagickDraw::getFont ( void )\nフォントを返す
ImagickDraw::getFontFamily /// string ImagickDraw::getFontFamily ( void )\nフォントファミリーを返す
ImagickDraw::getFontSize /// float ImagickDraw::getFontSize ( void )\nフォントのポイント数を返す
ImagickDraw::getFontStyle /// int ImagickDraw::getFontStyle ( void )\nフォントのスタイルを返す
ImagickDraw::getFontWeight /// int ImagickDraw::getFontWeight ( void )\nフォントの重さを返す
ImagickDraw::getGravity /// int ImagickDraw::getGravity ( void )\nテキストの配置時の gravity を返す
ImagickDraw::getStrokeAntialias /// bool ImagickDraw::getStrokeAntialias ( void )\n現在の縁取りのアンチエイリアス設定を返す
ImagickDraw::getStrokeColor /// ImagickPixel ImagickDraw::getStrokeColor ( ImagickPixel $stroke_color )\nオブジェクトの縁取りに使用する色を返す
ImagickDraw::getStrokeDashArray /// array ImagickDraw::getStrokeDashArray ( void )\nパスの描画に使用する破線のパターンを表す配列を返す
ImagickDraw::getStrokeDashOffset /// float ImagickDraw::getStrokeDashOffset ( void )\n破線パターンにおける破線の開始オフセットを返す
ImagickDraw::getStrokeLineCap /// int ImagickDraw::getStrokeLineCap ( void )\n開かれたサブパスを描画する際に使用する端点の形状を返す
ImagickDraw::getStrokeLineJoin /// int ImagickDraw::getStrokeLineJoin ( void )\nパスの角を描画する際に使用する形状を返す
ImagickDraw::getStrokeMiterLimit /// int ImagickDraw::getStrokeMiterLimit ( void )\nマイターリミットを返す
ImagickDraw::getStrokeOpacity /// float ImagickDraw::getStrokeOpacity ( void )\nオブジェクトの枠線の透明度を返す
ImagickDraw::getStrokeWidth /// float ImagickDraw::getStrokeWidth ( void )\nオブジェクトの枠線の描画に使用する線の幅を返す
ImagickDraw::getTextAlignment /// int ImagickDraw::getTextAlignment ( void )\nテキストの配置を返す
ImagickDraw::getTextAntialias /// bool ImagickDraw::getTextAntialias ( void )\n現在のテキストのアンチエイリアス設定を返す
ImagickDraw::getTextDecoration /// int ImagickDraw::getTextDecoration ( void )\nテキストの装飾を返す
ImagickDraw::getTextEncoding /// string ImagickDraw::getTextEncoding ( void )\nテキストによる注記の際に使用するコードセットを返す
ImagickDraw::getTextUnderColor /// ImagickPixel ImagickDraw::getTextUnderColor ( void )\nテキストの背景色を返す
ImagickDraw::getVectorGraphics /// string ImagickDraw::getVectorGraphics ( void )\nベクターグラフィックを含む文字列を返す
ImagickDraw::line /// bool ImagickDraw::line ( float $sx , float $sy , float $ex , float $ey )\n直線を描画する
ImagickDraw::matte /// bool ImagickDraw::matte ( float $x , float $y , int $paintMethod )\n画像の opacity チャネル上に描画する
ImagickDraw::pathClose /// bool ImagickDraw::pathClose ( void )\nパス要素を現在のパスに追加する
ImagickDraw::pathCurveToAbsolute /// bool ImagickDraw::pathCurveToAbsolute ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )\n三次ベジエ曲線を描画する
ImagickDraw::pathCurveToQuadraticBezierAbsolute /// bool ImagickDraw::pathCurveToQuadraticBezierAbsolute ( float $x1 , float $y1 , float $x , float $y )\n二次ベジエ曲線を描画する
ImagickDraw::pathCurveToQuadraticBezierRelative /// bool ImagickDraw::pathCurveToQuadraticBezierRelative ( float $x1 , float $y1 , float $x , float $y )\n二次ベジエ曲線を描画する
ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute /// bool ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute ( float $x , float $y )\n二次ベジエ曲線を描画する
ImagickDraw::pathCurveToQuadraticBezierSmoothRelative /// bool ImagickDraw::pathCurveToQuadraticBezierSmoothRelative ( float $x , float $y )\n二次ベジエ曲線を描画する
ImagickDraw::pathCurveToRelative /// bool ImagickDraw::pathCurveToRelative ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )\n三次ベジエ曲線を描画する
ImagickDraw::pathCurveToSmoothAbsolute /// bool ImagickDraw::pathCurveToSmoothAbsolute ( float $x2 , float $y2 , float $x , float $y )\n三次ベジエ曲線を描画する
ImagickDraw::pathCurveToSmoothRelative /// bool ImagickDraw::pathCurveToSmoothRelative ( float $x2 , float $y2 , float $x , float $y )\n三次ベジエ曲線を描画する
ImagickDraw::pathEllipticArcAbsolute /// bool ImagickDraw::pathEllipticArcAbsolute ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )\n楕円弧を描画する
ImagickDraw::pathEllipticArcRelative /// bool ImagickDraw::pathEllipticArcRelative ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )\n楕円弧を描画する
ImagickDraw::pathFinish /// bool ImagickDraw::pathFinish ( void )\n現在のパスを終了する
ImagickDraw::pathLineToAbsolute /// bool ImagickDraw::pathLineToAbsolute ( float $x , float $y )\n直線パスを描画する
ImagickDraw::pathLineToHorizontalAbsolute /// bool ImagickDraw::pathLineToHorizontalAbsolute ( float $x )\n水平直線パスを描画する
ImagickDraw::pathLineToHorizontalRelative /// bool ImagickDraw::pathLineToHorizontalRelative ( float $x )\n水平直線パスを描画する
ImagickDraw::pathLineToRelative /// bool ImagickDraw::pathLineToRelative ( float $x , float $y )\n直線パスを描画する
ImagickDraw::pathLineToVerticalAbsolute /// bool ImagickDraw::pathLineToVerticalAbsolute ( float $y )\n垂直直線パスを描画する
ImagickDraw::pathLineToVerticalRelative /// bool ImagickDraw::pathLineToVerticalRelative ( float $y )\n垂直直線パスを描画する
ImagickDraw::pathMoveToAbsolute /// bool ImagickDraw::pathMoveToAbsolute ( float $x , float $y )\n新しいサブパスを開始する
ImagickDraw::pathMoveToRelative /// bool ImagickDraw::pathMoveToRelative ( float $x , float $y )\n新しいサブパスを開始する
ImagickDraw::pathStart /// bool ImagickDraw::pathStart ( void )\nパス描画リストの開始を宣言する
ImagickDraw::point /// bool ImagickDraw::point ( float $x , float $y )\n点を描画する
ImagickDraw::polygon /// bool ImagickDraw::polygon ( array $coordinates )\n多角形を描画する
ImagickDraw::polyline /// bool ImagickDraw::polyline ( array $coordinates )\n線分群を描画する
ImagickDraw::pop /// bool ImagickDraw::pop ( void )\nスタック内の現在の ImagickDraw を破棄し、事前に push された ImagickDraw を返す
ImagickDraw::popClipPath /// bool ImagickDraw::popClipPath ( void )\nクリップパスの定義を終了する
ImagickDraw::popDefs /// bool ImagickDraw::popDefs ( void )\n定義リストを終了する
ImagickDraw::popPattern /// bool ImagickDraw::popPattern ( void )\nパターン定義を終了する
ImagickDraw::push /// bool ImagickDraw::push ( void )\n現在の ImagickDraw をコピーしてスタックに格納する
ImagickDraw::pushClipPath /// bool ImagickDraw::pushClipPath ( string $clip_mask_id )\nクリップパスの定義を開始する
ImagickDraw::pushDefs /// bool ImagickDraw::pushDefs ( void )\n後に続くコマンドが、処理の前に名前つき要素を作成することを示す
ImagickDraw::pushPattern /// bool ImagickDraw::pushPattern ( string $pattern_id , float $x , float $y , float $width , float $height )\n後に続く ImagickDraw::opPattern() までのコマンドが、名前付きパターンを構成することを示す
ImagickDraw::rectangle /// bool ImagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )\n矩形を描画する
ImagickDraw::render /// bool ImagickDraw::render ( void )\nこれまでのすべての描画コマンドを画像上にレンダリングする
ImagickDraw::rotate /// bool ImagickDraw::rotate ( float $degrees )\n指定した回転を現在の座標空間に適用する
ImagickDraw::roundRectangle /// bool ImagickDraw::roundRectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )\n角が丸い矩形を描画する
ImagickDraw::scale /// bool ImagickDraw::scale ( float $x , float $y )\n倍率を調整する
ImagickDraw::setClipPath /// bool ImagickDraw::setClipPath ( string $clip_mask )\n指定した名前のクリッピングパスを画像に関連付ける
ImagickDraw::setClipRule /// bool ImagickDraw::setClipRule ( int $fill_rule )\nクリッピングパスで使用する多角形塗りつぶしルールを設定する
ImagickDraw::setClipUnits /// bool ImagickDraw::setClipUnits ( int $clip_units )\nクリップパスの単位の解釈を設定する
ImagickDraw::setFillAlpha /// bool ImagickDraw::setFillAlpha ( float $opacity )\n色やテクスチャによる塗りつぶしの際の透過度を設定する
ImagickDraw::setFillColor /// bool ImagickDraw::setFillColor ( ImagickPixel $fill_pixel )\nオブジェクトの塗りつぶしに使用する色を設定する
ImagickDraw::setFillOpacity /// bool ImagickDraw::setFillOpacity ( float $fillOpacity )\n色やテクスチャによる塗りつぶしの際の透過度を設定する
ImagickDraw::setFillPatternURL /// bool ImagickDraw::setFillPatternURL ( string $fill_url )\nオブジェクトの塗りつぶしパターンとして使用する URL を設定する
ImagickDraw::setFillRule /// bool ImagickDraw::setFillRule ( int $fill_rule )\n多角形の描画時に使用する塗りつぶしルールを設定する
ImagickDraw::setFont /// bool ImagickDraw::setFont ( string $font_name )\nテキストによる注記を行う際に使用するフォントを設定する
ImagickDraw::setFontFamily /// bool ImagickDraw::setFontFamily ( string $font_family )\nテキストによる注記を行う際に使用するフォントファミリーを設定する
ImagickDraw::setFontSize /// bool ImagickDraw::setFontSize ( float $pointsize )\nテキストによる注記を行う際に使用するフォントのポイント数を設定する
ImagickDraw::setFontStretch /// bool ImagickDraw::setFontStretch ( int $fontStretch )\nテキストによる注記を行う際に使用するフォントの伸縮を設定する
ImagickDraw::setFontStyle /// bool ImagickDraw::setFontStyle ( int $style )\nテキストによる注記を行う際に使用するフォントのスタイルを設定する
ImagickDraw::setFontWeight /// bool ImagickDraw::setFontWeight ( int $font_weight )\nフォントの重さを設定する
ImagickDraw::setGravity /// bool ImagickDraw::setGravity ( int $gravity )\nテキストの配置時の gravity を設定する
ImagickDraw::setStrokeAlpha /// bool ImagickDraw::setStrokeAlpha ( float $opacity )\nオブジェクトの枠線の透明度を指定する
ImagickDraw::setStrokeAntialias /// bool ImagickDraw::setStrokeAntialias ( bool $stroke_antialias )\n縁取りの枠線をアンチエイリアス処理するかどうかを制御する
ImagickDraw::setStrokeColor /// bool ImagickDraw::setStrokeColor ( ImagickPixel $stroke_pixel )\nオブジェクトの縁取りに使用する色を設定する
ImagickDraw::setStrokeDashArray /// bool ImagickDraw::setStrokeDashArray ( array $dashArray )\nパスの描画に使用する破線のパターンを指定する
ImagickDraw::setStrokeDashOffset /// bool ImagickDraw::setStrokeDashOffset ( float $dash_offset )\n破線パターンにおける破線の開始オフセットを指定する
ImagickDraw::setStrokeLineCap /// bool ImagickDraw::setStrokeLineCap ( int $linecap )\n開かれたサブパスを描画する際に使用する端点の形状を指定する
ImagickDraw::setStrokeLineJoin /// bool ImagickDraw::setStrokeLineJoin ( int $linejoin )\nパスの角を描画する際に使用する形状を指定する
ImagickDraw::setStrokeMiterLimit /// bool ImagickDraw::setStrokeMiterLimit ( int $miterlimit )\nマイターリミットを指定する
ImagickDraw::setStrokeOpacity /// bool ImagickDraw::setStrokeOpacity ( float $stroke_opacity )\nオブジェクトの枠線の透明度を指定する
ImagickDraw::setStrokePatternURL /// bool ImagickDraw::setStrokePatternURL ( string $stroke_url )\nオブジェクトの枠線の描画に使用するパターンを設定する
ImagickDraw::setStrokeWidth /// bool ImagickDraw::setStrokeWidth ( float $stroke_width )\nオブジェクトの枠線の描画に使用する線の幅を設定する
ImagickDraw::setTextAlignment /// bool ImagickDraw::setTextAlignment ( int $alignment )\nテキストの配置を指定する
ImagickDraw::setTextAntialias /// bool ImagickDraw::setTextAntialias ( bool $antiAlias )\nテキストをアンチエイリアス処理するかどうかを制御する
ImagickDraw::setTextDecoration /// bool ImagickDraw::setTextDecoration ( int $decoration )\n装飾を指定する
ImagickDraw::setTextEncoding /// bool ImagickDraw::setTextEncoding ( string $encoding )\nテキストのコードセットを指定する
ImagickDraw::setTextUnderColor /// bool ImagickDraw::setTextUnderColor ( ImagickPixel $under_color )\n背景の矩形の色を指定する
ImagickDraw::setVectorGraphics /// bool ImagickDraw::setVectorGraphics ( string $xml )\nベクターグラフィックを設定する
ImagickDraw::setViewbox /// bool ImagickDraw::setViewbox ( int $x1 , int $y1 , int $x2 , int $y2 )\nキャンバス全体の大きさを設定する
ImagickDraw::skewX /// bool ImagickDraw::skewX ( float $degrees )\n現在の座標系を水平方向に傾ける
ImagickDraw::skewY /// bool ImagickDraw::skewY ( float $degrees )\n現在の座標系を垂直方向に傾ける
ImagickDraw::translate /// bool ImagickDraw::translate ( float $x , float $y )\n現在の座標系に変換を適用する
ImagickPixel::clear /// bool ImagickPixel::clear ( void )\nこのオブジェクトに関連付けられたリソースを消去する
ImagickPixel::__construct /// ImagickPixel ImagickPixel::__construct ([ string $color ] )\nImagickPixel のコンストラクタ
ImagickPixel::destroy /// bool ImagickPixel::destroy ( void )\nこのオブジェクトに関連付けられているリソースの割り当てを解除する
ImagickPixel::getColor /// array ImagickPixel::getColor ([ bool $normalized= false ] )\n色を返す
ImagickPixel::getColorAsString /// string ImagickPixel::getColorAsString ( void )\n色を文字列で返す
ImagickPixel::getColorCount /// int ImagickPixel::getColorCount ( void )\nこの色に関連付けられている色カウントを返す
ImagickPixel::getColorValue /// float ImagickPixel::getColorValue ( int $color )\n指定した色チャネルの値を正規化したものを取得する
ImagickPixel::getHSL /// array ImagickPixel::getHSL ( void )\nImagickPixel オブジェクトの HSL カラーを正規化したものを返す
ImagickPixel::isSimilar /// bool isSimilar ( ImagickPixel $color , float $fuzz )\nこの色と別の色の差を調べる
ImagickPixel::setColor /// bool ImagickPixel::setColor ( string $color )\n色を設定する
ImagickPixel::setColorValue /// bool ImagickPixel::setColorValue ( int $color , float $value )\n指定したチャネルの正規化した値を設定する
ImagickPixel::setHSL /// bool ImagickPixel::setHSL ( float $hue , float $saturation , float $luminosity )\n正規化した HSL カラーを設定する
ImagickPixelIterator::clear /// bool ImagickPixelIterator::clear ( void )\nPixelIterator に関連付けられたリソースを消去する
ImagickPixelIterator::__construct /// ImagickPixelIterator ImagickPixelIterator::__construct ( Imagick $wand )\nImagickPixelIterator のコンストラクタ
ImagickPixelIterator::destroy /// bool ImagickPixelIterator::destroy ( void )\nPixelIterator に関連付けられているリソースの割り当てを解除する
ImagickPixelIterator::getCurrentIteratorRow /// array ImagickPixelIterator::getCurrentIteratorRow ( void )\nImagickPixel オブジェクトのの現在の行を返す
ImagickPixelIterator::getIteratorRow /// int ImagickPixelIterator::getIteratorRow ( void )\npixel iterator の現在の行を返す
ImagickPixelIterator::getNextIteratorRow /// array ImagickPixelIterator::getNextIteratorRow ( void )\npixel iterator の次の行を返す
ImagickPixelIterator::getPreviousIteratorRow /// array ImagickPixelIterator::getPreviousIteratorRow ( void )\n前の行を返す
ImagickPixelIterator::newPixelIterator /// bool ImagickPixelIterator::newPixelIterator ( Imagick $wand )\n新しい pixel iterator を返す
ImagickPixelIterator::newPixelRegionIterator /// bool ImagickPixelIterator::newPixelRegionIterator ( Imagick $wand , int $x , int $y , int $columns , int $rows )\n新しい pixel iterator を返す
ImagickPixelIterator::resetIterator /// bool ImagickPixelIterator::resetIterator ( void )\npixel iterator をリセットする
ImagickPixelIterator::setIteratorFirstRow /// bool ImagickPixelIterator::setIteratorFirstRow ( void )\npixel iterator を最初の行に設定する
ImagickPixelIterator::setIteratorLastRow /// bool ImagickPixelIterator::setIteratorLastRow ( void )\npixel iterator を最後の行に設定する
ImagickPixelIterator::setIteratorRow /// bool ImagickPixelIterator::setIteratorRow ( int $row )\npixel iterator の行を設定する
ImagickPixelIterator::syncIterator /// bool ImagickPixelIterator::syncIterator ( void )\npixel iterator を同期する
cyrus_authenticate /// void cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] )\nCyrus IMAP サーバに対する認証を行う
cyrus_bind /// bool cyrus_bind ( resource $connection , array $callbacks )\nCyrus IMAP 接続へのコールバックをバインドする
cyrus_close /// bool cyrus_close ( resource $connection )\nCyrus IMAP サーバへの接続を閉じる
cyrus_connect /// resource cyrus_connect ([ string $host [, string $port [, int $flags ]]] )\nCyrus IMAP サーバに接続する
cyrus_query /// array cyrus_query ( resource $connection , string $query )\nCyrus IMAP サーバへクエリを送信する
cyrus_unbind /// bool cyrus_unbind ( resource $connection , string $trigger_name )\nアンバインドする ...
imap_8bit /// string imap_8bit ( string $string )\n8 ビット文字列を quoted-printable 文字列に変換する
imap_alerts /// array imap_alerts ( void )\n発生した IMAP 警告メッセージを返す
imap_append /// bool imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options= NULL ] )\n指定されたメールボックスに文字列メッセージを追加する
imap_base64 /// string imap_base64 ( string $text )\nBASE64 でエンコードされたテキストをデコードする
imap_binary /// string imap_binary ( string $string )\n8 ビット文字列を base64 文字列に変換する
imap_body /// string imap_body ( resource $imap_stream , int $msg_number [, int $options= 0 ] )\nメッセージ本文を読む
imap_bodystruct /// object imap_bodystruct ( resource $imap_stream , int $msg_number , string $section )\n指定したメッセージの指定した body セクションの構造を読み込む
imap_check /// object imap_check ( resource $imap_stream )\n現在のメールボックスをチェックする
imap_clearflag_full /// bool imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options= 0 ] )\nメッセージのフラグをクリアする
imap_close /// bool imap_close ( resource $imap_stream [, int $flag= 0 ] )\nIMAP ストリームをクローズする
imap_createmailbox /// bool imap_createmailbox ( resource $imap_stream , string $mailbox )\n新しいメールボックスを作る
imap_delete /// bool imap_delete ( resource $imap_stream , int $msg_number [, int $options= 0 ] )\n現在のメールボックスから削除するメッセージに印を付ける
imap_deletemailbox /// bool imap_deletemailbox ( resource $imap_stream , string $mailbox )\nメールボックスを削除する
imap_errors /// array imap_errors ( void )\n発生したすべての IMAP エラーを返す
imap_expunge /// bool imap_expunge ( resource $imap_stream )\n削除用にマークされたすべてのメッセージを削除する
imap_fetch_overview /// array imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options= 0 ] )\n指定したメッセージのヘッダ情報の概要を読む
imap_fetchbody /// string imap_fetchbody ( resource $imap_stream , int $msg_number , string $section [, int $options= 0 ] )\nメッセージ本文中の特定のセクションを取り出す
imap_fetchheader /// string imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options= 0 ] )\nメッセージのヘッダを返す
imap_fetchstructure /// object imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options= 0 ] )\n特定のメッセージの構造を読み込む
imap_get_quota /// array imap_get_quota ( resource $imap_stream , string $quota_root )\nクオータレベルの設定、メールボックス毎の使用状況を取得する
imap_get_quotaroot /// array imap_get_quotaroot ( resource $imap_stream , string $quota_root )\nユーザ単位のクォータ設定を取得する
imap_getacl /// array imap_getacl ( resource $imap_stream , string $mailbox )\n与えられたメールボックスの ACL を取得する
imap_getmailboxes /// array imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern )\nメールボックスのリストを読み込み、各ボックスに関する詳細な情報を返す
imap_getsubscribed /// array imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern )\n購読中の全メールボックスの一覧を取得する
imap_header /// imap_headerinfo のエイリアス
imap_headerinfo /// object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength= 0 [, int $subjectlength= 0 [, string $defaulthost= NULL ]]] )\nメッセージヘッダを読み込む
imap_headers /// array imap_headers ( resource $imap_stream )\nメールボックス内のすべてのメッセージのヘッダを返す
imap_last_error /// string imap_last_error ( void )\nページリクエスト時に生じた直近の IMAP エラーを返す
imap_list /// array imap_list ( resource $imap_stream , string $ref , string $pattern )\nメールボックスのリストを読み込む
imap_listmailbox /// imap_list のエイリアス
imap_listscan /// array imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content )\n指定したテキストにマッチするメールボックスの一覧を返す
imap_listsubscribed /// imap_lsub のエイリアス
imap_lsub /// array imap_lsub ( resource $imap_stream , string $ref , string $pattern )\n購読しているすべてのメールボックスの一覧を得る
imap_mail_compose /// string imap_mail_compose ( array $envelope , array $body )\n指定したエンベロープおよびボディセクションに基づいて MIME メッセージを作成する
imap_mail_copy /// bool imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options= 0 ] )\n指定されたメッセージをメールボックスにコピーする
imap_mail_move /// bool imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options= 0 ] )\n指定されたメッセージをメールボックスに移動する
imap_mail /// bool imap_mail ( string $to , string $subject , string $message [, string $additional_headers= NULL [, string $cc= NULL [, string $bcc= NULL [, string $rpath= NULL ]]]] )\ne-mail メッセージを送信する
imap_mailboxmsginfo /// object imap_mailboxmsginfo ( resource $imap_stream )\n現在のメールボックスに関する情報を得る
imap_mime_header_decode /// array imap_mime_header_decode ( string $text )\nMIME ヘッダ要素をデコードする
imap_msgno /// int imap_msgno ( resource $imap_stream , int $uid )\n指定した UID のメッセージ番号を返す
imap_num_msg /// int imap_num_msg ( resource $imap_stream )\n現在のメールボックスのメッセージ数を取得する
imap_num_recent /// int imap_num_recent ( resource $imap_stream )\n現在のメールボックスにある新規メッセージ数を取得する
imap_open /// resource imap_open ( string $mailbox , string $username , string $password [, int $options= NIL [, int $n_retries= 0 ]] )\nメールボックスへの IMAP ストリームをオープンする
imap_ping /// bool imap_ping ( resource $imap_stream )\nIMAP ストリームがアクティブかどうかを調べる
imap_qprint /// string imap_qprint ( string $string )\nquoted-printable 文字列を 8 ビット文字列に変換する
imap_renamemailbox /// bool imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox )\nメールボックスの名前を変更する
imap_reopen /// bool imap_reopen ( resource $imap_stream , string $mailbox [, int $options= 0 [, int $n_retries= 0 ]] )\n新規メールボックスへの IMAP ストリームを再度オープンする
imap_rfc822_parse_adrlist /// array imap_rfc822_parse_adrlist ( string $address , string $default_host )\nアドレス文字列を解釈します
imap_rfc822_parse_headers /// object imap_rfc822_parse_headers ( string $headers [, string $defaulthost= "UNKNOWN" ] )\n文字列からメールヘッダを解釈する
imap_rfc822_write_address /// string imap_rfc822_write_address ( string $mailbox , string $host , string $personal )\n指定したメールボックス、ホスト、個人情報を、 電子メールアドレスとして適当な形式にして返す
imap_savebody /// bool imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number= "" [, int $options= 0 ]] )\n指定した本文部をファイルに保存する
imap_scanmailbox /// imap_listscan のエイリアス
imap_search /// array imap_search ( resource $imap_stream , string $criteria [, int $options= SE_FREE [, string $charset= NIL ]] )\n指定した検索条件にマッチするメッセージを配列として返す
imap_set_quota /// bool imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit )\n指定したメールボックスにクォータを設定する
imap_setacl /// bool imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights )\n指定したメールボックスの ACL を設定する
imap_setflag_full /// bool imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options= NIL ] )\nメッセージにフラグをセットする
imap_sort /// array imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options= 0 [, string $search_criteria= NULL [, string $charset= NIL ]]] )\nメッセージヘッダの配列をソートする
imap_status /// object imap_status ( resource $imap_stream , string $mailbox , int $options )\n現在のメールボックス以外のメールボックスのステータス情報を返す
imap_subscribe /// bool imap_subscribe ( resource $imap_stream , string $mailbox )\nメールボックスを購読する
imap_thread /// array imap_thread ( resource $imap_stream [, int $options= SE_FREE ] )\nスレッド化したメッセージのツリーを返す
imap_timeout /// mixed imap_timeout ( int $timeout_type [, int $timeout= -1 ] )\nimap タイムアウトを設定あるいは取得する
imap_uid /// int imap_uid ( resource $imap_stream , int $msg_number )\n指定したメッセージシーケンス番号の UID を返す
imap_undelete /// bool imap_undelete ( resource $imap_stream , int $msg_number [, int $flags= 0 ] )\n削除マークがついているメッセージのマークをはずす
imap_unsubscribe /// bool imap_unsubscribe ( resource $imap_stream , string $mailbox )\nメールボックスの購読をやめる
imap_utf7_decode /// string imap_utf7_decode ( string $text )\n修正版 UTF-7 エンコードされた文字列をデコードする
imap_utf7_encode /// string imap_utf7_encode ( string $data )\nISO-8859-1 文字列を修正版 UTF-7 テキストに変換する
imap_utf8 /// string imap_utf8 ( string $mime_encoded_text )\nMIME エンコードされたテキストを UTF-8 に変換する
ezmlm_hash /// int ezmlm_hash ( string $addr )\nEZMLM で必要なハッシュ値を計算する
mail /// bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )\nメールを送信する
mailparse_determine_best_xfer_encoding /// string mailparse_determine_best_xfer_encoding ( resource $fp )\n最も適したエンコーディングを取得する
mailparse_msg_create /// resource mailparse_msg_create ( void )\nmime メールリソースを作成する
mailparse_msg_extract_part_file /// string mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callback $callbackfunc ] )\nメッセージセクションを展開/デコードする
mailparse_msg_extract_part /// void mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callback $callbackfunc ] )\nメッセージセクションを展開/デコードする
mailparse_msg_extract_whole_part_file /// string mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename [, callback $callbackfunc ] )\nヘッダを含むメッセージセクションを、transfer encoding をデコードせずに展開する
mailparse_msg_free /// bool mailparse_msg_free ( resource $mimemail )\nMIME リソースを解放する
mailparse_msg_get_part_data /// array mailparse_msg_get_part_data ( resource $mimemail )\nメッセージに関する情報の連想配列を返す
mailparse_msg_get_part /// resource mailparse_msg_get_part ( resource $mimemail , string $mimesection )\nMIME メッセージの指定したセクションに関するハンドルを返す
mailparse_msg_get_structure /// array mailparse_msg_get_structure ( resource $mimemail )\n指定したメッセージ内の MIME セクション名の配列を返す
mailparse_msg_parse_file /// resource mailparse_msg_parse_file ( string $filename )\nファイルをパースする
mailparse_msg_parse /// bool mailparse_msg_parse ( resource $mimemail , string $data )\nデータをパースし、バッファに追加する
mailparse_rfc822_parse_addresses /// array mailparse_rfc822_parse_addresses ( string $addresses )\nRFC 822 準拠のアドレスをパースする
mailparse_stream_encode /// bool mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding )\nソースファイルポインタからストリームデータを取得し、 エンコーディングを適用し、出力ファイルポインタに書き込む
mailparse_uudecode_all /// array mailparse_uudecode_all ( resource $fp )\nファイルポインタからデータをスキャンし、uuencode されたファイルを展開する
vpopmail_add_alias_domain_ex /// bool vpopmail_add_alias_domain_ex ( string $olddomain , string $newdomain )\n既存の仮想ドメインにエイリアスを追加する
vpopmail_add_alias_domain /// bool vpopmail_add_alias_domain ( string $domain , string $aliasdomain )\n仮想ドメインへのエイリアスを追加する
vpopmail_add_domain_ex /// bool vpopmail_add_domain_ex ( string $domain , string $passwd [, string $quota [, string $bounce [, bool $apop ]]] )\n新規に仮想ドメインを追加する
vpopmail_add_domain /// bool vpopmail_add_domain ( string $domain , string $dir , int $uid , int $gid )\n仮想ドメインを新たに追加する
vpopmail_add_user /// bool vpopmail_add_user ( string $user , string $domain , string $password [, string $gecos [, bool $apop ]] )\n指定した仮想ドメインに新規ユーザを追加する
vpopmail_alias_add /// bool vpopmail_alias_add ( string $user , string $domain , string $alias )\n仮想エイリアスを追加する
vpopmail_alias_del_domain /// bool vpopmail_alias_del_domain ( string $domain )\nあるドメインに関する仮想エイリアスを全て削除する
vpopmail_alias_del /// bool vpopmail_alias_del ( string $user , string $domain )\nあるユーザの仮想エイリアスを全て削除する
vpopmail_alias_get_all /// array vpopmail_alias_get_all ( string $domain )\nあるドメインに関するエイリアスを全て取得する
vpopmail_alias_get /// array vpopmail_alias_get ( string $alias , string $domain )\nあるドメインに関するエイリアスを取得する
vpopmail_auth_user /// bool vpopmail_auth_user ( string $user , string $domain , string $password [, string $apop ] )\nユーザ名/ドメイン/パスワードの認証を試みる
vpopmail_del_domain_ex /// bool vpopmail_del_domain_ex ( string $domain )\n仮想ドメインを削除する
vpopmail_del_domain /// bool vpopmail_del_domain ( string $domain )\n仮想ドメインを削除する
vpopmail_del_user /// bool vpopmail_del_user ( string $user , string $domain )\n仮想ドメインからユーザを削除する
vpopmail_error /// string vpopmail_error ( void )\n直近の vpopmail エラーに関するエラーメッセージを取得する
vpopmail_passwd /// bool vpopmail_passwd ( string $user , string $domain , string $password [, bool $apop ] )\n仮想ユーザのパスワードを変更する
vpopmail_set_user_quota /// bool vpopmail_set_user_quota ( string $user , string $domain , string $quota )\n仮想ユーザの容量制限(クオータ)を設定する
bcadd /// string bcadd ( string $left_operand , string $right_operand [, int $scale ] )\n2つの任意精度の数値を加算する
bccomp /// int bccomp ( string $left_operand , string $right_operand [, int $scale ] )\n2 つの任意精度数値を比較する
bcdiv /// string bcdiv ( string $left_operand , string $right_operand [, int $scale ] )\n2つの任意精度数値で除算を行う
bcmod /// string bcmod ( string $left_operand , string $modulus )\n2 つの任意精度数値の剰余を取得する
bcmul /// string bcmul ( string $left_operand , string $right_operand [, int $scale ] )\n2つの任意精度数値の乗算を行う
bcpow /// string bcpow ( string $left_operand , string $right_operand [, int $scale ] )\n任意精度数値をべき乗する
bcpowmod /// string bcpowmod ( string $left_operand , string $right_operand , string $modulus [, int $scale ] )\n任意精度数値のべき乗の、指定した数値による剰余
bcscale /// bool bcscale ( int $scale )\nすべての BC 演算関数におけるデフォルトのスケールを設定する
bcsqrt /// string bcsqrt ( string $operand [, int $scale ] )\n任意精度数値の平方根を取得する
bcsub /// string bcsub ( string $left_operand , string $right_operand [, int $scale ] )\n任意精度数値の減算を行う
gmp_abs /// resource gmp_abs ( resource $a )\n絶対値
gmp_add /// resource gmp_add ( resource $a , resource $b )\n数値を加算する
gmp_and /// resource gmp_and ( resource $a , resource $b )\nビット AND を計算する
gmp_clrbit /// void gmp_clrbit ( resource &$a , int $index )\nビットをクリアする
gmp_cmp /// int gmp_cmp ( resource $a , resource $b )\n数を比較する
gmp_com /// resource gmp_com ( resource $a )\n1 の補数を計算する
gmp_div_q /// resource gmp_div_q ( resource $a , resource $b [, int $round= GMP_ROUND_ZERO ] )\n数値を除算する
gmp_div_qr /// array gmp_div_qr ( resource $n , resource $d [, int $round= GMP_ROUND_ZERO ] )\n除算を行い、商と余りを得る
gmp_div_r /// resource gmp_div_r ( resource $n , resource $d [, int $round= GMP_ROUND_ZERO ] )\n除算の余りを計算する
gmp_div /// gmp_div_q のエイリアス
gmp_divexact /// resource gmp_divexact ( resource $n , resource $d )\n正確な除算
gmp_fact /// resource gmp_fact ( int $a )\n階乗
gmp_gcd /// resource gmp_gcd ( resource $a , resource $b )\n最大公約数を計算する
gmp_gcdext /// array gmp_gcdext ( resource $a , resource $b )\n最大公約数と乗数を計算する
gmp_hamdist /// int gmp_hamdist ( resource $a , resource $b )\nハミング距離
gmp_init /// resource gmp_init ( mixed $number [, int $base= 0 ] )\nGMP 数を作成する
gmp_intval /// int gmp_intval ( resource $gmpnumber )\nGMP 数を整数に変換する
gmp_invert /// resource gmp_invert ( resource $a , resource $b )\n法による逆
gmp_jacobi /// int gmp_jacobi ( resource $a , resource $p )\nヤコビ記号
gmp_legendre /// int gmp_legendre ( resource $a , resource $p )\nルジェンドル記号
gmp_mod /// resource gmp_mod ( resource $n , resource $d )\nモジュロ演算
gmp_mul /// resource gmp_mul ( resource $a , resource $b )\n数値を乗算する
gmp_neg /// resource gmp_neg ( resource $a )\n符号を反転する
gmp_nextprime /// resource gmp_nextprime ( int $a )\n次の素数を見つける
gmp_or /// resource gmp_or ( resource $a , resource $b )\nビット OR を計算する
gmp_perfect_square /// bool gmp_perfect_square ( resource $a )\n平方数かどうかを調べる
gmp_popcount /// int gmp_popcount ( resource $a )\nセットされているビットの数
gmp_pow /// resource gmp_pow ( resource $base , int $exp )\nべき乗を計算する
gmp_powm /// resource gmp_powm ( resource $base , resource $exp , resource $mod )\nべき乗とモジュロを計算する
gmp_prob_prime /// int gmp_prob_prime ( resource $a [, int $reps= 10 ] )\n数が"おそらく素数"であるかどうかを調べる
gmp_random /// resource gmp_random ([ int $limiter= 20 ] )\n乱数を生成する
gmp_scan0 /// int gmp_scan0 ( resource $a , int $start )\n0 を探す
gmp_scan1 /// int gmp_scan1 ( resource $a , int $start )\n1 を探す
gmp_setbit /// void gmp_setbit ( resource &$a , int $index [, bool $set_clear= true ] )\nビットを設定する
gmp_sign /// int gmp_sign ( resource $a )\n数の符号
gmp_sqrt /// resource gmp_sqrt ( resource $a )\n平方根を計算する
gmp_sqrtrem /// array gmp_sqrtrem ( resource $a )\n余りつきの平方根
gmp_strval /// string gmp_strval ( resource $gmpnumber [, int $base ] )\nGMP 数を文字列に変換する
gmp_sub /// resource gmp_sub ( resource $a , resource $b )\n数値の減算
gmp_testbit /// bool gmp_testbit ( resource $a , int $index )\nビットが設定されているかどうかを調べる
gmp_xor /// resource gmp_xor ( resource $a , resource $b )\nビット XOR を計算する
abs /// number abs ( mixed $number )\n絶対値
acos /// float acos ( float $arg )\n逆余弦（アークコサイン）
acosh /// float acosh ( float $arg )\n逆双曲線余弦（アークハイパボリックコサイン）
asin /// float asin ( float $arg )\n逆正弦（アークサイン）
asinh /// float asinh ( float $arg )\n逆双曲線正弦（アークハイパボリックサイン）
atan2 /// float atan2 ( float $y , float $x )\n2 変数のアークタンジェント
atan /// float atan ( float $arg )\n逆正接（アークタンジェント）
atanh /// float atanh ( float $arg )\n逆双曲線正接（アークハイパボリックタンジェント）
base_convert /// string base_convert ( string $number , int $frombase , int $tobase )\n数値の基数を任意に変換する
bindec /// number bindec ( string $binary_string )\n2 進数 を 10 進数に変換する
ceil /// float ceil ( float $value )\n端数の切り上げ
cos /// float cos ( float $arg )\n余弦（コサイン）
cosh /// float cosh ( float $arg )\n双曲線余弦（ハイパボリックコサイン）
decbin /// string decbin ( int $number )\n10 進数を 2 進数に変換する
dechex /// string dechex ( int $number )\n10 進数を 16 進数に変換する
decoct /// string decoct ( int $number )\n10 進数を 8 進数に変換する
deg2rad /// float deg2rad ( float $number )\n度単位の数値をラジアン単位に変換する
exp /// float exp ( float $arg )\ne の累乗を計算する
expm1 /// float expm1 ( float $arg )\n値がゼロに近い時にでも精度を保つために exp(number) - 1 を返す
floor /// float floor ( float $value )\n端数の切り捨て
fmod /// float fmod ( float $x , float $y )\n引数で除算をした際の剰余を返す
getrandmax /// int getrandmax ( void )\n乱数の最大値を取得する
hexdec /// number hexdec ( string $hex_string )\n16 進数を 10 進数に変換する
hypot /// float hypot ( float $x , float $y )\n直角三角形の斜辺の長さを計算する
is_finite /// bool is_finite ( float $val )\n値が有限の数値であるかどうかを判定する
is_infinite /// bool is_infinite ( float $val )\n値が無限大であるかどうかを判定する
is_nan /// bool is_nan ( float $val )\n値が数値でないかどうかを判定する
lcg_value /// float lcg_value ( void )\n複合線形合同法
log10 /// float log10 ( float $arg )\n底が 10 の対数
log1p /// float log1p ( float $number )\n値がゼロに近い時にでも精度を保つ方法で計算した log(1 + number) を返す
log /// float log ( float $arg [, float $base= M_E ] )\n自然対数
max /// mixed max ( array $values )\n最大値を返す
min /// mixed min ( array $values )\n最小値を返す
mt_getrandmax /// int mt_getrandmax ( void )\n乱数値の最大値を表示する
mt_rand /// int mt_rand ( void )\nよりよい乱数値を生成する
mt_srand /// void mt_srand ([ int $seed ] )\n改良型乱数生成器にシードを指定する
octdec /// number octdec ( string $octal_string )\n8 進数を 10 進数に変換する
pi /// float pi ( void )\n円周率の値を得る
pow /// number pow ( number $base , number $exp )\n指数表現
rad2deg /// float rad2deg ( float $number )\nラジアン単位の数値を度単位に変換する
rand /// int rand ( void )\n乱数を生成する
round /// float round ( float $val [, int $precision= 0 [, int $mode= PHP_ROUND_HALF_UP ]] )\n浮動小数点数を丸める
sin /// float sin ( float $arg )\n正弦（サイン）
sinh /// float sinh ( float $arg )\n双曲線正弦（ハイパボリックサイン）
sqrt /// float sqrt ( float $arg )\n平方根
srand /// void srand ([ int $seed ] )\n乱数ジェネレータを初期化する
tan /// float tan ( float $arg )\n正接（タンジェント）
tanh /// float tanh ( float $arg )\n双曲線正接（ハイパボリックタンジェント）
stats_absolute_deviation /// float stats_absolute_deviation ( array $a )\n値の配列の絶対偏差を返す
stats_cdf_beta /// float stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which )\nベータ分布用の CDF 関数。ベータ分布のパラメータのいずれかを、 その他のパラメータの値から計算する
stats_cdf_binomial /// float stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which )\n二項分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_cauchy /// float stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which )\n未ドキュメント化
stats_cdf_chisquare /// float stats_cdf_chisquare ( float $par1 , float $par2 , int $which )\nカイ二乗分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_exponential /// float stats_cdf_exponential ( float $par1 , float $par2 , int $which )\n未ドキュメント化
stats_cdf_f /// float stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which )\nF 分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_gamma /// float stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which )\nガンマ分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_laplace /// float stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which )\n未ドキュメント化
stats_cdf_logistic /// float stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which )\n未ドキュメント化
stats_cdf_negative_binomial /// float stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which )\n負の二項分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_noncentral_chisquare /// float stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which )\n非心カイ二乗分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_noncentral_f /// float stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which )\n非心 F 分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_poisson /// float stats_cdf_poisson ( float $par1 , float $par2 , int $which )\nポアソン分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_t /// float stats_cdf_t ( float $par1 , float $par2 , int $which )\nT 分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_cdf_uniform /// float stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which )\n未ドキュメント化
stats_cdf_weibull /// float stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which )\n未ドキュメント化
stats_covariance /// float stats_covariance ( array $a , array $b )\nふたつのデータセットの共分散を計算する
stats_den_uniform /// float stats_den_uniform ( float $x , float $a , float $b )\n未ドキュメント化
stats_dens_beta /// float stats_dens_beta ( float $x , float $a , float $b )\n未ドキュメント化
stats_dens_cauchy /// float stats_dens_cauchy ( float $x , float $ave , float $stdev )\n未ドキュメント化
stats_dens_chisquare /// float stats_dens_chisquare ( float $x , float $dfr )\n未ドキュメント化
stats_dens_exponential /// float stats_dens_exponential ( float $x , float $scale )\n未ドキュメント化
stats_dens_f /// float stats_dens_f ( float $x , float $dfr1 , float $dfr2 )\n説明
stats_dens_gamma /// float stats_dens_gamma ( float $x , float $shape , float $scale )\n未ドキュメント化
stats_dens_laplace /// float stats_dens_laplace ( float $x , float $ave , float $stdev )\n未ドキュメント化
stats_dens_logistic /// float stats_dens_logistic ( float $x , float $ave , float $stdev )\n未ドキュメント化
stats_dens_negative_binomial /// float stats_dens_negative_binomial ( float $x , float $n , float $pi )\n未ドキュメント化
stats_dens_normal /// float stats_dens_normal ( float $x , float $ave , float $stdev )\n未ドキュメント化
stats_dens_pmf_binomial /// float stats_dens_pmf_binomial ( float $x , float $n , float $pi )\n未ドキュメント化
stats_dens_pmf_hypergeometric /// float stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 )\n説明
stats_dens_pmf_poisson /// float stats_dens_pmf_poisson ( float $x , float $lb )\n未ドキュメント化
stats_dens_t /// float stats_dens_t ( float $x , float $dfr )\n未ドキュメント化
stats_dens_weibull /// float stats_dens_weibull ( float $x , float $a , float $b )\n未ドキュメント化
stats_harmonic_mean /// number stats_harmonic_mean ( array $a )\n値の配列の調和平均を返す
stats_kurtosis /// float stats_kurtosis ( array $a )\n配列内のデータの尖度を計算する
stats_rand_gen_beta /// float stats_rand_gen_beta ( float $a , float $b )\n無作為な値を生成する
stats_rand_gen_chisquare /// float stats_rand_gen_chisquare ( float $df )\n自由度 "df" の乱数で表されるカイ二乗分布から、無作為な値を返す
stats_rand_gen_exponential /// float stats_rand_gen_exponential ( float $av )\n平均値 "av" の指数分布から、無作為な値を返す
stats_rand_gen_f /// float stats_rand_gen_f ( float $dfn , float $dfd )\n無作為な値を返す
stats_rand_gen_funiform /// float stats_rand_gen_funiform ( float $low , float $high )\nlow (それ自身は含まない) と high (それ自身は含まない) の間の一様な浮動小数点数値を生成する
stats_rand_gen_gamma /// float stats_rand_gen_gamma ( float $a , float $r )\nガンマ分布から無作為な値を生成する
stats_rand_gen_ibinomial_negative /// int stats_rand_gen_ibinomial_negative ( int $n , float $p )\n負の二項分布から無作為な値を生成する。引数: n - 無作為な値を生成するために行う負の二項分布の試行回数 (n > 0)、p - 事象の発生する確率 (0 < p < 1))
stats_rand_gen_ibinomial /// int stats_rand_gen_ibinomial ( int $n , float $pp )\n二項分布から無作為な値を生成する。二項分布の試行回数を "n" (n >= 0)、各試行で事象の発生する確率を "pp" ([0;1]) とし、BTPE アルゴリズムを使用する
stats_rand_gen_int /// int stats_rand_gen_int ( void )\n1 から 2147483562 までの間の無作為な整数値を生成する
stats_rand_gen_ipoisson /// int stats_rand_gen_ipoisson ( float $mu )\n平均 "mu" (mu >= 0.0) のポアソン分布から無作為な値を生成する
stats_rand_gen_iuniform /// int stats_rand_gen_iuniform ( int $low , int $high )\nLOW (それ自身を含む) と HIGH (それ自身を含む) の間の一様分布から整数値を生成する
stats_rand_gen_noncenral_chisquare /// float stats_rand_gen_noncenral_chisquare ( float $df , float $xnonc )\n自由度 "df"、非心母数 "xnonc" の非心カイ二乗分布から無作為な値を生成する。 d は >= 1.0、xnonc は >= 0.0 でなければならない
stats_rand_gen_noncentral_f /// float stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc )\n分子の自由度が "dfn"、分母の自由度が "dfd"、非心母数が "xnonc" の非心 F (分散比) 分布から、無作為な値を返す。 非心カイ二乗変量の分子とカイ二乗変量の分母の比を直接生成する
stats_rand_gen_noncentral_t /// float stats_rand_gen_noncentral_t ( float $df , float $xnonc )\n非心 T 分布から無作為な値を生成する
stats_rand_gen_normal /// float stats_rand_gen_normal ( float $av , float $sd )\nmean、av および標準偏差 sd (sd >= 0) によって表される正規分布から無作為な値を生成する。 Method : Renames SNORM from TOMS as slightly modified by BWB to use RANF instead of SUNIF.
stats_rand_gen_t /// float stats_rand_gen_t ( float $df )\nT 分布から無作為な値を生成する
stats_rand_get_seeds /// array stats_rand_get_seeds ( void )\n未ドキュメント化
stats_rand_phrase_to_seeds /// array stats_rand_phrase_to_seeds ( string $phrase )\n乱数ジェネレータ用のふたつのシードを生成する
stats_rand_ranf /// float stats_rand_ranf ( void )\n0 から 1 (区間の両端は含まない) までの一様分布から、 現在のジェネレータを使用して無作為な浮動小数点数値を返す
stats_rand_setall /// void stats_rand_setall ( int $iseed1 , int $iseed2 )\n未ドキュメント化
stats_skew /// float stats_skew ( array $a )\n配列内のデータの歪度を計算する
stats_standard_deviation /// float stats_standard_deviation ( array $a [, bool $sample= false ] )\n標準偏差を返す
stats_stat_binomial_coef /// float stats_stat_binomial_coef ( int $x , int $n )\n未ドキュメント化
stats_stat_correlation /// float stats_stat_correlation ( array $arr1 , array $arr2 )\n未ドキュメント化
stats_stat_gennch /// float stats_stat_gennch ( int $n )\n未ドキュメント化
stats_stat_independent_t /// float stats_stat_independent_t ( array $arr1 , array $arr2 )\n未ドキュメント化
stats_stat_innerproduct /// float stats_stat_innerproduct ( array $arr1 , array $arr2 )\n説明
stats_stat_noncentral_t /// float stats_stat_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which )\n非心 t 分布のパラメータのいずれかを、その他のパラメータの値から計算する
stats_stat_paired_t /// float stats_stat_paired_t ( array $arr1 , array $arr2 )\n未ドキュメント化
stats_stat_percentile /// float stats_stat_percentile ( float $df , float $xnonc )\n未ドキュメント化
stats_stat_powersum /// float stats_stat_powersum ( array $arr , float $power )\n未ドキュメント化
stats_variance /// float stats_variance ( array $a [, bool $sample= false ] )\n母分散を返す
fdf_add_doc_javascript /// bool fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code )\nFDF ドキュメントに javascript コードを追加する
fdf_add_template /// bool fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename )\nテンプレートを FDF ドキュメントに追加する
fdf_close /// void fdf_close ( resource $fdf_document )\nFDF ドキュメントを閉じる
fdf_create /// resource fdf_create ( void )\n新規 FDF ドキュメントを作成する
fdf_enum_values /// bool fdf_enum_values ( resource $fdf_document , callback $function [, mixed $userdata ] )\n各ドキュメントの値に対してユーザ定義関数をコールする
fdf_errno /// int fdf_errno ( void )\n直近の fdf 操作に関するエラーコードを返す
fdf_error /// string fdf_error ([ int $error_code ] )\n直近の fdf エラーコードについての説明を返す
fdf_get_ap /// bool fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename )\nフィールドの外観を取得する
fdf_get_attachment /// array fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath )\nFDF に埋め込まれている、アップロードされたファイルを展開する
fdf_get_encoding /// string fdf_get_encoding ( resource $fdf_document )\n/Encoding キーの値を取得する
fdf_get_file /// string fdf_get_file ( resource $fdf_document )\n/F キーの値を得る
fdf_get_flags /// int fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags )\nフィールドのフラグを取得する
fdf_get_opt /// mixed fdf_get_opt ( resource $fdf_document , string $fieldname [, int $element ] )\nフィールドのオプション配列から値を取得する
fdf_get_status /// string fdf_get_status ( resource $fdf_document )\n/STATUS キーの値を得る
fdf_get_value /// mixed fdf_get_value ( resource $fdf_document , string $fieldname [, int $which ] )\nフィールドの値を得る
fdf_get_version /// string fdf_get_version ([ resource $fdf_document ] )\nFDF API あるいはファイルのバージョンを取得する
fdf_header /// void fdf_header ( void )\nFDF 固有の出力ヘッダをセットする
fdf_next_field_name /// string fdf_next_field_name ( resource $fdf_document [, string $fieldname ] )\n次のフィールド名を得る
fdf_open_string /// resource fdf_open_string ( string $fdf_data )\n文字列から FDF ドキュメントを読み込む
fdf_open /// resource fdf_open ( string $filename )\nFDF ドキュメントをオープンする
fdf_remove_item /// bool fdf_remove_item ( resource $fdf_document , string $fieldname , int $item )\nフォームのターゲットフレームを設定する
fdf_save_string /// string fdf_save_string ( resource $fdf_document )\nFDF ドキュメントを文字列として返す
fdf_save /// bool fdf_save ( resource $fdf_document [, string $filename ] )\nFDF ドキュメントを保存する
fdf_set_ap /// bool fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number )\nフィールドの外観を設定する
fdf_set_encoding /// bool fdf_set_encoding ( resource $fdf_document , string $encoding )\nFDF 文字エンコーディングを設定する
fdf_set_file /// bool fdf_set_file ( resource $fdf_document , string $url [, string $target_frame ] )\nFDF データを表示する PDF ドキュメントを設定する
fdf_set_flags /// bool fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags )\nフィールドのフラグを設定する
fdf_set_javascript_action /// bool fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script )\nフィールドの javascript アクションを設定する
fdf_set_on_import_javascript /// bool fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import )\nAcrobat が FDF をオープンした際に実行される javascript のコードを追加する
fdf_set_opt /// bool fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 )\nフィールドのオプションを設定する
fdf_set_status /// bool fdf_set_status ( resource $fdf_document , string $status )\n/STATUS キーの値を設定する
fdf_set_submit_form_action /// bool fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags )\nフィールドの投稿フォームアクションを設定する
fdf_set_target_frame /// bool fdf_set_target_frame ( resource $fdf_document , string $frame_name )\nフォームの表示対象となるフレームを設定する
fdf_set_value /// bool fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value [, int $isName ] )\nフィールドの値を設定する
fdf_set_version /// bool fdf_set_version ( resource $fdf_document , string $version )\nFDF ファイルのバージョン番号を設定する
gnupg_adddecryptkey /// bool gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase )\n復号のためのキーを追加する
gnupg_addencryptkey /// bool gnupg_addencryptkey ( resource $identifier , string $fingerprint )\n暗号化のためのキーを追加する
gnupg_addsignkey /// bool gnupg_addsignkey ( resource $identifier , string $fingerprint [, string $passphrase ] )\n署名のためのキーを追加する
gnupg_cleardecryptkeys /// bool gnupg_cleardecryptkeys ( resource $identifier )\n事前に復号のために設定されたすべてのキーを削除する
gnupg_clearencryptkeys /// bool gnupg_clearencryptkeys ( resource $identifier )\n事前に暗号化のために設定されたすべてのキーを削除する
gnupg_clearsignkeys /// bool gnupg_clearsignkeys ( resource $identifier )\n事前に署名のために設定されたすべてのキーを削除する
gnupg_decrypt /// string gnupg_decrypt ( resource $identifier , string $text )\n指定されたテキストを復号する
gnupg_decryptverify /// array gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext )\n指定されたテキストを復号し、検証する
gnupg_encrypt /// string gnupg_encrypt ( resource $identifier , string $plaintext )\n指定したテキストを暗号化する
gnupg_encryptsign /// string gnupg_encryptsign ( resource $identifier , string $plaintext )\n指定したテキストを暗号化し、署名する
gnupg_export /// string gnupg_export ( resource $identifier , string $fingerprint )\nキーをエクスポートする
gnupg_geterror /// string gnupg_geterror ( resource $identifier )\n関数が失敗した場合にエラー文字列を返す
gnupg_getprotocol /// int gnupg_getprotocol ( resource $identifier )\nすべての操作で現在アクティブなプロトコルを返す
gnupg_import /// array gnupg_import ( resource $identifier , string $keydata )\nキーをインポートする
gnupg_init /// resource gnupg_init ( void )\n接続を初期化する
gnupg_keyinfo /// array gnupg_keyinfo ( resource $identifier , string $pattern )\n指定したパターンに一致するすべてのキーについての情報を配列で返す
gnupg_setarmor /// bool gnupg_setarmor ( resource $identifier , int $armor )\narmor 形式を切り替える
gnupg_seterrormode /// void gnupg_seterrormode ( resource $identifier , int $errormode )\nエラー報告モードを設定する
gnupg_setsignmode /// bool gnupg_setsignmode ( resource $identifier , int $signmode )\n署名方式を設定する
gnupg_sign /// string gnupg_sign ( resource $identifier , string $plaintext )\n指定したテキストに署名する
gnupg_verify /// array gnupg_verify ( resource $identifier , string $signed_text , string $signature [, string &$plaintext ] )\n署名済みテキストを検証する
HaruDoc::addPage /// object HaruDoc::addPage ( void )\n新しいページをドキュメントに追加する
HaruDoc::addPageLabel /// bool HaruDoc::addPageLabel ( int $first_page , int $style , int $first_num [, string $prefix ] )\n指定した範囲のページにおけるページラベルの形式を設定する
HaruDoc::__construct /// void HaruDoc::__construct ( void )\n新しい HaruDoc のインスタンスを作成する
HaruDoc::createOutline /// object HaruDoc::createOutline ( string $title [, object $parent_outline [, object $encoder ]] )\nHaruOutline のインスタンスを作成する
HaruDoc::getCurrentEncoder /// object HaruDoc::getCurrentEncoder ( void )\nドキュメントが現在使用している HaruEncoder を取得する
HaruDoc::getCurrentPage /// object HaruDoc::getCurrentPage ( void )\nドキュメントの現在のページを返す
HaruDoc::getEncoder /// object HaruDoc::getEncoder ( string $encoding )\n指定したエンコーディングの HaruEncoder のインスタンスを取得する
HaruDoc::getFont /// object HaruDoc::getFont ( string $fontname [, string $encoding ] )\nHaruFont のインスタンスを取得する
HaruDoc::getInfoAttr /// string HaruDoc::getInfoAttr ( int $type )\n指定したドキュメント属性の現在の値を取得する
HaruDoc::getPageLayout /// int HaruDoc::getPageLayout ( void )\n現在のページレイアウトを取得する
HaruDoc::getPageMode /// int HaruDoc::getPageMode ( void )\n現在のページモードを取得する
HaruDoc::getStreamSize /// int HaruDoc::getStreamSize ( void )\n一時ストリームの大きさを取得する
HaruDoc::insertPage /// object HaruDoc::insertPage ( object $page )\n指定したページの直前に新しいページを挿入する
HaruDoc::loadJPEG /// object HaruDoc::loadJPEG ( string $filename )\nJPEG 画像を読み込む
HaruDoc::loadPNG /// object HaruDoc::loadPNG ( string $filename [, bool $deferred= false ] )\nPNG 画像を読み込み、HaruImage のインスタンスを返す
HaruDoc::loadRaw /// object HaruDoc::loadRaw ( string $filename , int $width , int $height , int $color_space )\nRAW 画像を読み込む
HaruDoc::loadTTC /// string HaruDoc::loadTTC ( string $fontfile , int $index [, bool $embed= false ] )\nTTC ファイルから指定したインデックスのフォントを読み込む
HaruDoc::loadTTF /// string HaruDoc::loadTTF ( string $fontfile [, bool $embed= false ] )\nTTF フォントファイルを読み込む
HaruDoc::loadType1 /// string HaruDoc::loadType1 ( string $afmfile [, string $pfmfile ] )\nType1 フォントを読み込む
HaruDoc::output /// bool HaruDoc::output ( void )\nドキュメントデータを出力バッファに書き出す
HaruDoc::readFromStream /// string HaruDoc::readFromStream ( int $bytes )\nデータを一時ストリームから読み込む
HaruDoc::resetError /// bool HaruDoc::resetError ( void )\nドキュメントハンドルのエラーの状態をリセットする
HaruDoc::resetStream /// bool HaruDoc::resetStream ( void )\n一時ストリームを巻き戻す
HaruDoc::save /// bool HaruDoc::save ( string $file )\nドキュメントを指定したファイルに保存する
HaruDoc::saveToStream /// bool HaruDoc::saveToStream ( void )\nドキュメントを一時ストリームに保存する
HaruDoc::setCompressionMode /// bool HaruDoc::setCompressionMode ( int $mode )\nドキュメントの圧縮モードを設定する
HaruDoc::setCurrentEncoder /// bool HaruDoc::setCurrentEncoder ( string $encoding )\nドキュメントの現在のエンコーダを設定する
HaruDoc::setEncryptionMode /// bool HaruDoc::setEncryptionMode ( int $mode [, int $key_len= 5 ] )\nドキュメントの暗号化モードを設定する
HaruDoc::setInfoAttr /// bool HaruDoc::setInfoAttr ( int $type , string $info )\nドキュメントの情報属性を設定する
HaruDoc::setInfoDateAttr /// bool HaruDoc::setInfoDateAttr ( int $type , int $year , int $month , int $day , int $hour , int $min , int $sec , string $ind , int $off_hour , int $off_min )\nドキュメントの情報属性に日付と時刻を設定する
HaruDoc::setOpenAction /// bool HaruDoc::setOpenAction ( object $destination )\nドキュメントを開いたときにどのページを表示するかを定義する
HaruDoc::setPageLayout /// bool HaruDoc::setPageLayout ( int $layout )\nページをどのように表示するかを設定する
HaruDoc::setPageMode /// bool HaruDoc::setPageMode ( int $mode )\nドキュメントをどのように表示するかを設定する
HaruDoc::setPagesConfiguration /// bool HaruDoc::setPagesConfiguration ( int $page_per_pages )\nページ群単位のページ数を設定する
HaruDoc::setPassword /// bool HaruDoc::setPassword ( string $owner_password , string $user_password )\nドキュメントに所有者パスワードおよびユーザパスワードを設定する
HaruDoc::setPermission /// bool HaruDoc::setPermission ( int $permission )\nドキュメントの使用権限を設定する
HaruDoc::useCNSEncodings /// bool HaruDoc::useCNSEncodings ( void )\n簡体字中国語エンコーディングを有効にする
HaruDoc::useCNSFonts /// bool HaruDoc::useCNSFonts ( void )\n組み込みの簡体字中国語フォントを有効にする
HaruDoc::useCNTEncodings /// bool HaruDoc::useCNTEncodings ( void )\n繁体字中国語エンコーディングを有効にする
HaruDoc::useCNTFonts /// bool HaruDoc::useCNTFonts ( void )\n組み込みの繁体字中国語フォントを有効にする
HaruDoc::useJPEncodings /// bool HaruDoc::useJPEncodings ( void )\n日本語エンコーディングを有効にする
HaruDoc::useJPFonts /// bool HaruDoc::useJPFonts ( void )\n組み込みの日本語フォントを有効にする
HaruDoc::useKREncodings /// bool HaruDoc::useKREncodings ( void )\n韓国/朝鮮語エンコーディングを有効にする
HaruDoc::useKRFonts /// bool HaruDoc::useKRFonts ( void )\n組み込みの韓国/朝鮮語フォントを有効にする
HaruPage::arc /// bool HaruPage::arc ( float $x , float $y , float $ray , float $ang1 , float $ang2 )\n現在のパスに弧を追加する
HaruPage::beginText /// bool HaruPage::beginText ( void )\nテキストオブジェクトを開始し、テキストの現在位置を (0,0) に設定する
HaruPage::circle /// bool HaruPage::circle ( float $x , float $y , float $ray )\n現在のパスに円を追加する
HaruPage::closePath /// bool HaruPage::closePath ( void )\n現在の位置からパスの開始位置に直線を追加する
HaruPage::concat /// bool HaruPage::concat ( float $a , float $b , float $c , float $d , float $x , float $y )\n現在のページの変換行列と指定した行列を連結する
HaruPage::createDestination /// object HaruPage::createDestination ( void )\n新しい HaruDestination のインスタンスを作成する
HaruPage::createLinkAnnotation /// object HaruPage::createLinkAnnotation ( array $rectangle , object $destination )\n新しい HaruAnnotation のインスタンスを作成する
HaruPage::createTextAnnotation /// object HaruPage::createTextAnnotation ( array $rectangle , string $text [, object $encoder ] )\n新しい HaruAnnotation のインスタンスを作成する
HaruPage::createURLAnnotation /// object HaruPage::createURLAnnotation ( array $rectangle , string $url )\n新しい HaruAnnotation のインスタンスを作成する
HaruPage::curveTo2 /// bool HaruPage::curveTo2 ( float $x2 , float $y2 , float $x3 , float $y3 )\nベジエ曲線を現在のパスに追加する
HaruPage::curveTo3 /// bool HaruPage::curveTo3 ( float $x1 , float $y1 , float $x3 , float $y3 )\nベジエ曲線を現在のパスに追加する
HaruPage::curveTo /// bool HaruPage::curveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )\nベジエ曲線を現在のパスに追加する
HaruPage::drawImage /// bool HaruPage::drawImage ( object $image , float $x , float $y , float $width , float $height )\n画像をページに表示する
HaruPage::ellipse /// bool HaruPage::ellipse ( float $x , float $y , float $xray , float $yray )\n楕円を現在のパスに追加する
HaruPage::endPath /// bool HaruPage::endPath ( void )\n塗りつぶしや描画を行わずに現在のパスオブジェクトを終了する
HaruPage::endText /// bool HaruPage::endText ( void )\n現在のテキストオブジェクトを終了する
HaruPage::eofill /// bool HaruPage::eofill ( void )\n奇偶規則を使用して現在のパスを塗りつぶす
HaruPage::eoFillStroke /// bool HaruPage::eoFillStroke ([ bool $close_path= false ] )\n奇偶規則を使用して現在のパスを塗りつぶす
HaruPage::fill /// bool HaruPage::fill ( void )\nノンゼロワインディング規則を使用して現在のパスを塗りつぶす
HaruPage::fillStroke /// bool HaruPage::fillStroke ([ bool $close_path= false ] )\nノンゼロワインディング規則を使用して現在のパスを塗りつぶす
HaruPage::getCharSpace /// float HaruPage::getCharSpace ( void )\n現在の文字間隔を取得する
HaruPage::getCMYKFill /// array HaruPage::getCMYKFill ( void )\n現在の塗りつぶし色を取得する
HaruPage::getCMYKStroke /// array HaruPage::getCMYKStroke ( void )\n現在の描画色を取得する
HaruPage::getCurrentFont /// object HaruPage::getCurrentFont ( void )\n現在使用中のフォントを取得する
HaruPage::getCurrentFontSize /// float HaruPage::getCurrentFontSize ( void )\n現在のフォントのサイズを取得する
HaruPage::getCurrentPos /// array HaruPage::getCurrentPos ( void )\nパスの描画用の現在の位置を取得する
HaruPage::getCurrentTextPos /// array HaruPage::getCurrentTextPos ( void )\nテキストの印字用の現在の位置を取得する
HaruPage::getDash /// array HaruPage::getDash ( void )\n現在の破線のパターンを取得する
HaruPage::getFillingColorSpace /// int HaruPage::getFillingColorSpace ( void )\n現在の塗りつぶしの色空間を取得する
HaruPage::getFlatness /// float HaruPage::getFlatness ( void )\nページの平坦度を取得する
HaruPage::getGMode /// int HaruPage::getGMode ( void )\n現在のグラフィックスモードを取得する
HaruPage::getGrayFill /// float HaruPage::getGrayFill ( void )\n現在の塗りつぶし色を取得する
HaruPage::getGrayStroke /// float HaruPage::getGrayStroke ( void )\n現在の描画色を取得する
HaruPage::getHeight /// float HaruPage::getHeight ( void )\nページの高さを取得する
HaruPage::getHorizontalScaling /// float HaruPage::getHorizontalScaling ( void )\n現在の水平方向の拡大率を取得する
HaruPage::getLineCap /// int HaruPage::getLineCap ( void )\n現在のパスの終端の形式を取得する
HaruPage::getLineJoin /// int HaruPage::getLineJoin ( void )\n現在のパスの角の形式を取得する
HaruPage::getLineWidth /// float HaruPage::getLineWidth ( void )\n現在の線幅を取得する
HaruPage::getMiterLimit /// float HaruPage::getMiterLimit ( void )\nマイターリミットの値を取得する
HaruPage::getRGBFill /// array HaruPage::getRGBFill ( void )\n現在の塗りつぶし色を取得する
HaruPage::getRGBStroke /// array HaruPage::getRGBStroke ( void )\n現在の描画色を取得する
HaruPage::getStrokingColorSpace /// int HaruPage::getStrokingColorSpace ( void )\n現在の描画の色空間を取得する
HaruPage::getTextLeading /// float HaruPage::getTextLeading ( void )\n現在の行間隔の値を取得する
HaruPage::getTextMatrix /// array HaruPage::getTextMatrix ( void )\nそのページの現在のテキスト変換行列を取得する
HaruPage::getTextRenderingMode /// int HaruPage::getTextRenderingMode ( void )\n現在のテキストのレンダリングモードを取得する
HaruPage::getTextRise /// float HaruPage::getTextRise ( void )\n現在のテキストライズの値を取得する
HaruPage::getTextWidth /// float HaruPage::getTextWidth ( string $text )\n現在のフォントサイズ、文字エンコーディングおよび単語間隔を使用してテキストの幅を取得する
HaruPage::getTransMatrix /// array HaruPage::getTransMatrix ( void )\nそのページの現在の変換行列を取得する
HaruPage::getWidth /// float HaruPage::getWidth ( void )\nページの幅を取得する
HaruPage::getWordSpace /// float HaruPage::getWordSpace ( void )\n現在の単語間隔の値を取得する
HaruPage::lineTo /// bool HaruPage::lineTo ( float $x , float $y )\n現在位置から指定した位置まで直線を描画する
HaruPage::measureText /// int HaruPage::measureText ( string $text , float $width [, bool $wordwrap= false ] )\n指定した幅の中に配置できる文字の数を計算する
HaruPage::moveTextPos /// bool HaruPage::moveTextPos ( float $x , float $y [, bool $set_leading= false ] )\nテキストの位置を、指定したオフセットに移動する
HaruPage::moveTo /// bool HaruPage::moveTo ( float $x , float $y )\n新しい描画パスの開始位置を設定する
HaruPage::moveToNextLine /// bool HaruPage::moveToNextLine ( void )\nテキストの位置を次の行の行頭に移動する
HaruPage::rectangle /// bool HaruPage::rectangle ( float $x , float $y , float $width , float $height )\n現在のパスに矩形を追加する
HaruPage::setCharSpace /// bool HaruPage::setCharSpace ( float $char_space )\nページの文字間隔を設定する
HaruPage::setCMYKFill /// bool HaruPage::setCMYKFill ( float $c , float $m , float $y , float $k )\nページの塗りつぶし色を設定する
HaruPage::setCMYKStroke /// bool HaruPage::setCMYKStroke ( float $c , float $m , float $y , float $k )\nページの描画色を設定する
HaruPage::setDash /// bool HaruPage::setDash ( array $pattern , int $phase )\nページの破線パターンを設定する
HaruPage::setFlatness /// bool HaruPage::setFlatness ( float $flatness )\nページの平坦度を設定する
HaruPage::setFontAndSize /// bool HaruPage::setFontAndSize ( object $font , float $size )\nページのフォントおよびフォントサイズを設定する
HaruPage::setGrayFill /// bool HaruPage::setGrayFill ( float $value )\nページの塗りつぶし色を設定する
HaruPage::setGrayStroke /// bool HaruPage::setGrayStroke ( float $value )\nページの描画色を設定する
HaruPage::setHeight /// bool HaruPage::setHeight ( float $height )\nページの高さを設定する
HaruPage::setHorizontalScaling /// bool HaruPage::setHorizontalScaling ( float $scaling )\nページの横方向の拡大率を設定する
HaruPage::setLineCap /// bool HaruPage::setLineCap ( int $cap )\nパスの終端の形式を設定する
HaruPage::setLineJoin /// bool HaruPage::setLineJoin ( int $join )\nそのページのパスの角の形式を設定する
HaruPage::setLineWidth /// bool HaruPage::setLineWidth ( float $width )\nページの線幅を設定する
HaruPage::setMiterLimit /// bool HaruPage::setMiterLimit ( float $limit )\nページのマイターリミットの現在値を設定する
HaruPage::setRGBFill /// bool HaruPage::setRGBFill ( float $r , float $g , float $b )\nページの塗りつぶし色を設定する
HaruPage::setRGBStroke /// bool HaruPage::setRGBStroke ( float $r , float $g , float $b )\nページの描画色を設定する
HaruPage::setRotate /// bool HaruPage::setRotate ( int $angle )\nページの回転角度を設定する
HaruPage::setSize /// bool HaruPage::setSize ( int $size , int $direction )\nページのサイズおよび方向を設定する
HaruPage::setSlideShow /// bool HaruPage::setSlideShow ( int $type , float $disp_time , float $trans_time )\nページの移動方式を設定する
HaruPage::setTextLeading /// bool HaruPage::setTextLeading ( float $text_leading )\nページのテキストリーディング (行間隔) を設定する
HaruPage::setTextMatrix /// bool HaruPage::setTextMatrix ( float $a , float $b , float $c , float $d , float $x , float $y )\nそのページの現在のテキスト変換行列を設定する
HaruPage::setTextRenderingMode /// bool HaruPage::setTextRenderingMode ( int $mode )\nそのページの現在のテキストのレンダリングモードを設定する
HaruPage::setTextRise /// bool HaruPage::setTextRise ( float $rise )\n現在のテキストライズの値を設定する
HaruPage::setWidth /// bool HaruPage::setWidth ( float $width )\nページの幅を設定する
HaruPage::setWordSpace /// bool HaruPage::setWordSpace ( float $word_space )\nページの単語間隔を設定する
HaruPage::showText /// bool HaruPage::showText ( string $text )\nページの現在位置にテキストを表示する
HaruPage::showTextNextLine /// bool HaruPage::showTextNextLine ( string $text [, float $word_space [, float $char_space ]] )\n現在位置を次の行の行頭に移動してテキストを表示する
HaruPage::stroke /// bool HaruPage::stroke ([ bool $close_path= false ] )\n現在のパスを描画する
HaruPage::textOut /// bool HaruPage::textOut ( float $x , float $y , string $text )\nテキストを指定した位置に表示する
HaruPage::textRect /// bool HaruPage::textRect ( float $left , float $top , float $right , float $bottom , string $text [, int $align= HaruPage::TALIGN_LEFT ] )\n指定した領域内にテキストを表示する
HaruFont::getAscent /// int HaruFont::getAscent ( void )\nフォントの垂直 ascent を取得する
HaruFont::getCapHeight /// int HaruFont::getCapHeight ( void )\n大文字のベースラインからの距離を取得する
HaruFont::getDescent /// int HaruFont::getDescent ( void )\nフォントの垂直 descent を取得する
HaruFont::getEncodingName /// string HaruFont::getEncodingName ( void )\nエンコーディング名を取得する
HaruFont::getFontName /// string HaruFont::getFontName ( void )\nフォント名を取得する
HaruFont::getTextWidth /// array HaruFont::getTextWidth ( string $text )\nテキスト全体の幅、文字数、単語数および空白の数を取得する
HaruFont::getUnicodeWidth /// int HaruFont::getUnicodeWidth ( int $character )\nフォントの文字の幅を取得する
HaruFont::getXHeight /// int HaruFont::getXHeight ( void )\n小文字のベースラインからの距離を取得する
HaruFont::measureText /// int HaruFont::measureText ( string $text , float $width , float $font_size , float $char_space , float $word_space [, bool $word_wrap= false ] )\n指定した幅に収めることのできる文字数を計算する
HaruImage::getBitsPerComponent /// int HaruImage::getBitsPerComponent ( void )\n画像の各色コンポーネントで使用するビット数を取得する
HaruImage::getColorSpace /// string HaruImage::getColorSpace ( void )\n色空間の名前を取得する
HaruImage::getHeight /// int HaruImage::getHeight ( void )\n画像の高さを取得する
HaruImage::getSize /// array HaruImage::getSize ( void )\n画像の大きさを取得する
HaruImage::getWidth /// int HaruImage::getWidth ( void )\n画像の幅を取得する
HaruImage::setColorMask /// bool HaruImage::setColorMask ( int $rmin , int $rmax , int $gmin , int $gmax , int $bmin , int $bmax )\n画像の色マスクを設定する
HaruImage::setMaskImage /// bool HaruImage::setMaskImage ( object $mask_image )\n画像マスクを設定する
HaruEncoder::getByteType /// int HaruEncoder::getByteType ( string $text , int $index )\nテキスト内のバイトの型を取得する
HaruEncoder::getType /// int HaruEncoder::getType ( void )\nエンコーダの型を取得する
HaruEncoder::getUnicode /// int HaruEncoder::getUnicode ( int $character )\n指定した文字を unicode に変換する
HaruEncoder::getWritingMode /// int HaruEncoder::getWritingMode ( void )\nエンコーダの書き込みモードを取得する
HaruOutline::setDestination /// bool HaruOutline::setDestination ( object $destination )\nアウトラインの対象を設定する
HaruOutline::setOpened /// bool HaruOutline::setOpened ( bool $opened )\nアウトラインの初期状態を設定する
HaruAnnotation::setBorderStyle /// bool HaruAnnotation::setBorderStyle ( float $width , int $dash_on , int $dash_off )\nアノテーションの枠の形式を設定する
HaruAnnotation::setHighlightMode /// bool HaruAnnotation::setHighlightMode ( int $mode )\nアノテーションの強調モードを設定する
HaruAnnotation::setIcon /// bool HaruAnnotation::setIcon ( int $icon )\nアノテーションのアイコンの形式を設定する
HaruAnnotation::setOpened /// bool HaruAnnotation::setOpened ( bool $opened )\nアノテーションの初期状態を設定する
HaruDestination::setFit /// bool HaruDestination::setFit ( void )\nページの表示を、ウィンドウにあわせるよう設定する
HaruDestination::setFitB /// bool HaruDestination::setFitB ( void )\nページの表示を、ページのバウンディングボックスをウィンドウにあわせるよう設定する
HaruDestination::setFitBH /// bool HaruDestination::setFitBH ( float $top )\nページの表示を、バウンディングボックスの幅にあわせるよう設定する
HaruDestination::setFitBV /// bool HaruDestination::setFitBV ( float $left )\nページの表示を、バウンディングボックスの高さにあわせるよう設定する
HaruDestination::setFitH /// bool HaruDestination::setFitH ( float $top )\nページの表示を、ウィンドウの幅にあわせるよう設定する
HaruDestination::setFitR /// bool HaruDestination::setFitR ( float $left , float $bottom , float $right , float $top )\nページの表示を、指定した矩形にあわせるよう設定する
HaruDestination::setFitV /// bool HaruDestination::setFitV ( float $left )\nページの表示を、ウィンドウの高さにあわせるよう設定する
HaruDestination::setXYZ /// bool HaruDestination::setXYZ ( float $left , float $top , float $zoom )\nページの表示を設定する
ming_keypress /// int ming_keypress ( string $char )\nkeyPress(char) のアクションフラグを返す
ming_setcubicthreshold /// void ming_setcubicthreshold ( int $threshold )\n三次元の閾値を設定する
ming_setscale /// void ming_setscale ( float $scale )\nグローバルなスケール要素を設定する
ming_setswfcompression /// void ming_setswfcompression ( int $level )\nSWF 出力の圧縮を設定する
ming_useconstants /// void ming_useconstants ( int $use )\n定数プールを使用する
ming_useswfversion /// void ming_useswfversion ( int $version )\nSWF のバージョンを設定する
SWFAction->__construct /// SWFAction __construct ( string $script )\n新しい SWFAction を作成する
SWFBitmap->__construct /// SWFBitmap __construct ( mixed $file [, mixed $alphafile ] )\nビットマップオブジェクトを読み込む
SWFBitmap->getHeight /// float getHeight ( void )\nビットマップの高さを返す
SWFBitmap->getWidth /// float getWidth ( void )\nビットマップの幅を返す
SWFButton->addAction /// void addAction ( SWFAction $action , int $flags )\nアクションを追加する
SWFButton->addASound /// SWFSoundInstance addASound ( SWFSound $sound , int $flags )\nボタンに音を関連付ける
SWFButton->addShape /// void addShape ( SWFShape $shape , int $flags )\nボタンに図形を追加する
SWFButton->__construct /// SWFButton __construct ( void )\n新しいボタンを作成する
SWFButton->setAction /// void setAction ( SWFAction $action )\nアクションを設定する
SWFButton->setDown /// void setDown ( SWFShape $shape )\naddShape(shape, SWFBUTTON_DOWN) のエイリアス
SWFButton->setHit /// void setHit ( SWFShape $shape )\naddShape(shape, SWFBUTTON_HIT) のエイリアス
SWFButton->setMenu /// void setMenu ( int $flag )\nメニューボタンとしての挙動を有効にする
SWFButton->setOver /// void setOver ( SWFShape $shape )\naddShape(shape, SWFBUTTON_OVER) のエイリアス
SWFButton->setUp /// void setUp ( SWFShape $shape )\naddShape(shape, SWFBUTTON_UP) のエイリアス
SWFDisplayItem->addAction /// void addAction ( SWFAction $action , int $flags )\nこの SWFAction を、指定した SWFSprite インスタンスに追加する
SWFDisplayItem->addColor /// void addColor ( int $red , int $green , int $blue [, int $a ] )\n指定した色を、このアイテムの色変換に追加する
SWFDisplayItem->endMask /// void endMask ( void )\nMASK レイヤを定義するもうひとつの方法
SWFDisplayItem->getRot /// float getRot ( void )\n説明
SWFDisplayItem->getX /// float getX ( void )\n説明
SWFDisplayItem->getXScale /// float getXScale ( void )\n説明
SWFDisplayItem->getXSkew /// float getXSkew ( void )\n説明
SWFDisplayItem->getY /// float getY ( void )\n説明
SWFDisplayItem->getYScale /// float getYScale ( void )\n説明
SWFDisplayItem->getYSkew /// float getYSkew ( void )\n説明
SWFDisplayItem->move /// void move ( float $dx , float $dy )\nオブジェクトを相対座標系で移動する
SWFDisplayItem->moveTo /// void moveTo ( float $x , float $y )\nグローバル座標系でオブジェクトを移動する
SWFDisplayItem->multColor /// void multColor ( float $red , float $green , float $blue [, float $a ] )\nアイテムの色変換を乗算する
SWFDisplayItem->remove /// void remove ( void )\nオブジェクトをムービーから削除する
SWFDisplayItem->rotate /// void rotate ( float $angle )\n相対座標で回転させる
SWFDisplayItem->rotateTo /// void rotateTo ( float $angle )\nグローバル座標で回転させる
SWFDisplayItem->scale /// void scale ( float $dx , float $dy )\n相対座標系でオブジェクトを拡大縮小する
SWFDisplayItem->scaleTo /// void scaleTo ( float $x [, float $y ] )\nグローバル座標系でオブジェクトを拡大縮小する
SWFDisplayItem->setDepth /// void setDepth ( int $depth )\nz オーダーを設定する
SWFDisplayItem->setMaskLevel /// void setMaskLevel ( int $level )\n指定したレベルに MASK レイヤを設定する
SWFDisplayItem->setMatrix /// void setMatrix ( float $a , float $b , float $c , float $d , float $x , float $y )\nアイテムの変換行列を設定する
SWFDisplayItem->setName /// void setName ( string $name )\nオブジェクトの名前を設定する
SWFDisplayItem->setRatio /// void setRatio ( float $ratio )\nオブジェクトの比を設定する
SWFDisplayItem->skewX /// void skewX ( float $ddegrees )\nX-skew を設定する
SWFDisplayItem->skewXTo /// void skewXTo ( float $degrees )\nX-skew を設定する
SWFDisplayItem->skewY /// void skewY ( float $ddegrees )\nY-skew を設定する
SWFDisplayItem->skewYTo /// void skewYTo ( float $degrees )\nY-skew を設定する
SWFFill->moveTo /// void moveTo ( float $x , float $y )\n塗りつぶしの原点を移動する
SWFFill->rotateTo /// void rotateTo ( float $angle )\n塗りつぶしの回転を設定する
SWFFill->scaleTo /// void scaleTo ( float $x [, float $y ] )\n塗りつぶしの倍率を設定する
SWFFill->skewXTo /// void skewXTo ( float $x )\n塗りつぶしの x-skew を設定する
SWFFill->skewYTo /// void skewYTo ( float $y )\n塗りつぶしの y-skew を設定する
SWFFont->__construct /// SWFFont __construct ( string $filename )\nフォント定義を読み込む
SWFFont->getAscent /// float getAscent ( void )\nフォントの ascent (ベースライン上部の高さ) あるいは取得できない場合は 0 を返す
SWFFont->getDescent /// float getDescent ( void )\nフォントの descent (ベースライン下部の深さ) あるいは取得できない場合は 0 を返す
SWFFont->getLeading /// float getLeading ( void )\nフォントの leading (行間) あるいは取得できない場合は 0 を返す
SWFFont->getShape /// string getShape ( int $code )\n指定した文字のグリフを文字列で返す
SWFFont->getUTF8Width /// float getUTF8Width ( string $string )\nこのフォントにおける指定した文字列の幅を計算する
SWFFont->getWidth /// float getWidth ( string $string )\n文字列の幅を返す
SWFFontChar->addChars /// void addChars ( string $char )\nフォントをエクスポートするために、フォントに文字を追加する
SWFFontChar->addUTF8Chars /// void addUTF8Chars ( string $char )\nフォントをエクスポートするために、フォントに文字を追加する
SWFGradient->addEntry /// void addEntry ( float $ratio , int $red , int $green , int $blue [, int $alpha= 255 ] )\n傾きリストにエントリを追加する
SWFGradient->__construct /// SWFGradient __construct ( void )\n傾きオブジェクトを作成する
SWFMorph->__construct /// SWFMorph __construct ( void )\n新規に SWFMorph オブジェクトを作成する
SWFMorph->getShape1 /// SWFShape getShape1 ( void )\n最初の図形へのハンドルを取得する
SWFMorph->getShape2 /// SWFShape getShape2 ( void )\n最後の図形へのハンドルを取得する
SWFMovie->add /// mixed add ( object $instance )\n任意の型のデータをムービーに追加する
SWFMovie->addExport /// void addExport ( SWFCharacter $char , string $name )\n説明
SWFMovie->addFont /// mixed addFont ( SWFFont $font )\n説明
SWFMovie->__construct /// SWFMovie __construct ([ int $version ] )\nSWF バージョン 4 のムービーを表すムービーオブジェクトを作成する
SWFMovie->importChar /// SWFSprite importChar ( string $libswf , string $name )\n説明
SWFMovie->importFont /// SWFFontChar importFont ( string $libswf , string $name )\n説明
SWFMovie->labelFrame /// void labelFrame ( string $label )\nフレームにラベルをつける
SWFMovie->nextFrame /// void nextFrame ( void )\n動画の次のフレームに移動する
SWFMovie->output /// int output ([ int $compression ] )\n作成したムービーを出力する
SWFMovie->remove /// void remove ( object $instance )\n表示リストからオブジェクトのインスタンスを削除する
SWFMovie->save /// int save ( string $filename [, int $compression ] )\nSWF ムービーをファイルに保存する
SWFMovie->saveToFile /// int saveToFile ( resource $x [, int $compression ] )\n説明
SWFMovie->setbackground /// void setbackground ( int $red , int $green , int $blue )\n背景色を設定する
SWFMovie->setDimension /// void setDimension ( float $width , float $height )\nムービーの幅と高さを設定する
SWFMovie->setFrames /// void setFrames ( int $number )\n動画の総フレーム数を設定する
SWFMovie->setRate /// void setRate ( float $rate )\n動画のフレームレートを設定する
SWFMovie->startSound /// SWFSoundInstance startSound ( SWFSound $sound )\n説明
SWFMovie->stopSound /// void stopSound ( SWFSound $sound )\n説明
SWFMovie->streamMP3 /// int streamMP3 ( mixed $mp3file [, float $skip= 0 ] )\nMP3 ファイルをストリーム再生する
SWFMovie->writeExports /// void writeExports ( void )\n説明
SWFPrebuiltClip->__construct /// SWFPrebuiltClip __construct ( mixed $file )\nSWFPrebuiltClip オブジェクトを返す
SWFShape->addFill /// SWFFill addFill ( int $red , int $green , int $blue [, int $alpha= 255 ] )\n塗りつぶし色を図形に追加する
SWFShape->__construct /// SWFShape __construct ( void )\n新しい図形オブジェクトを作成する
SWFShape->drawArc /// void drawArc ( float $r , float $startAngle , float $endAngle )\n現在の位置を中心とした半径 r の円弧を、12 時の方向から時計回りに 数えた角度 startAngle から endAngle まで描く
SWFShape->drawCircle /// void drawCircle ( float $r )\n現在の位置を中心とした半径 r の円を、反時計回りに描く
SWFShape->drawCubic /// int drawCubic ( float $bx , float $by , float $cx , float $cy , float $dx , float $dy )\n現在の位置および指定した三つの制御点を使用して 三次ベジエ曲線を描く
SWFShape->drawCubicTo /// int drawCubicTo ( float $bx , float $by , float $cx , float $cy , float $dx , float $dy )\n現在の位置および指定した三つの制御点を使用して 三次ベジエ曲線を描く
SWFShape->drawCurve /// int drawCurve ( float $controldx , float $controldy , float $anchordx , float $anchordy [, float $targetdx ], float $targetdy )\n曲線を描く (相対座標)
SWFShape->drawCurveTo /// int drawCurveTo ( float $controlx , float $controly , float $anchorx , float $anchory [, float $targetx ], float $targety )\n曲線を描く
SWFShape->drawGlyph /// void drawGlyph ( SWFFont $font , string $character [, int $size ] )\n指定したフォントのグリフ定義を使用して、 指定した文字列の最初の文字を図形の中に描く
SWFShape->drawLine /// void drawLine ( float $dx , float $dy )\n線を描く (相対座標)
SWFShape->drawLineTo /// void drawLineTo ( float $x , float $y )\n線を描く
SWFShape->movePen /// void movePen ( float $dx , float $dy )\n図形のペンを移動する(相対座標)
SWFShape->movePenTo /// void movePenTo ( float $x , float $y )\n図形のペンを移動する
SWFShape->setLeftFill /// void setLeftFill ( SWFGradient $fill )\n左ラスタ色を設定する
SWFShape->setLine /// void setLine ( SWFShape $shape )\n図形の線種を設定する
SWFShape->setRightFill /// void setRightFill ( SWFGradient $fill )\n右ラスタ色を設定する
SWFSound /// SWFSound __construct ( string $filename [, int $flags= 0 ] )\n指定したファイルから、新しい SWFSound オブジェクトを返す
SWFSoundInstance->loopCount /// void loopCount ( int $point )\n説明
SWFSoundInstance->loopInPoint /// void loopInPoint ( int $point )\n説明
SWFSoundInstance->loopOutPoint /// void loopOutPoint ( int $point )\n説明
SWFSoundInstance->noMultiple /// void noMultiple ( void )\n説明
SWFSprite->add /// void add ( object $object )\nオブジェクトをスプライトに追加する
SWFSprite->__construct /// SWFSprite __construct ( void )\nムービークリップ (スプライト) を作成する
SWFSprite->labelFrame /// void labelFrame ( string $label )\nフレームにラベルをつける
SWFSprite->nextFrame /// void nextFrame ( void )\n動画の次のフレームに移動する
SWFSprite->remove /// void remove ( object $object )\nオブジェクトをスプライトから削除する
SWFSprite->setFrames /// void setFrames ( int $number )\n動画の総フレーム数を設定する
SWFSprite->startSound /// SWFSoundInstance startSound ( SWFSound $sount )\n説明
SWFSprite->stopSound /// void stopSound ( SWFSound $sount )\n説明
SWFText->addString /// void addString ( string $string )\n文字列を描画する
SWFText->addUTF8String /// void addUTF8String ( string $text )\n現在のペンの位置に、現在のフォント・高さ・行間および色設定を使用して 指定したテキストで SWFText オブジェクトを作成する
SWFText->__construct /// void __construct ( void )\n新しい SWFText オブジェクトを作成する
SWFText->getAscent /// float getAscent ( void )\n現在のサイズにおけるフォントの ascent (ベースライン上部の高さ) あるいは取得できない場合は 0 を返す
SWFText->getDescent /// float getDescent ( void )\n現在のサイズにおけるフォントの descent (ベースライン下部の深さ) あるいは取得できない場合は 0 を返す
SWFText->getLeading /// float getLeading ( void )\n現在のサイズにおけるフォントの leading (行間) あるいは取得できない場合は 0 を返す
SWFText->getUTF8Width /// float getUTF8Width ( string $string )\n現在のフォントおよびサイズにおける指定した文字列の幅を計算する
SWFText->getWidth /// float getWidth ( string $string )\n文字列の幅を計算する
SWFText->moveTo /// void moveTo ( float $x , float $y )\nペンを移動する
SWFText->setColor /// void setColor ( int $red , int $green , int $blue [, int $a= 255 ] )\n現在のテキスト色を設定する
SWFText->setFont /// void setFont ( SWFFont $font )\n現在のフォントを設定する
SWFText->setHeight /// void setHeight ( float $height )\n現在のフォントの高さを設定する
SWFText->setSpacing /// void setSpacing ( float $spacing )\n現在のフォントの間隔を設定する
SWFTextField->addChars /// void addChars ( string $chars )\nテキストフィールド内で使用可能なフォントに文字を追加する
SWFTextField->addString /// void addString ( string $string )\n指定した文字列をテキストフィールドに結合する
SWFTextField->align /// void align ( int $alignement )\nテキストフィールドの配置を設定する
SWFTextField->__construct /// SWFTextField __construct ([ int $flags ] )\nテキストフィールドのオブジェクトを作成する
SWFTextField->setBounds /// void setBounds ( float $width , float $height )\nテキストフィールドの幅と高さを設定する
SWFTextField->setColor /// void setColor ( int $red , int $green , int $blue [, int $a= 255 ] )\nテキストフィールドの色を設定する
SWFTextField->setFont /// void setFont ( SWFFont $font )\nテキストフィールドのフォントを設定する
SWFTextField->setHeight /// void setHeight ( float $height )\nこのテキストフィールドのフォントの高さを設定する
SWFTextField->setIndentation /// void setIndentation ( float $width )\n最初の行の字下げを設定する
SWFTextField->setLeftMargin /// void setLeftMargin ( float $width )\nテキストフィールドの左マージンの幅を設定する
SWFTextField->setLineSpacing /// void setLineSpacing ( float $height )\nテキストフィールドの行間を設定する
SWFTextField->setMargins /// void setMargins ( float $left , float $right )\nテキストフィールドのマージン幅を設定する
SWFTextField->setName /// void setName ( string $name )\n変数名を設定する
SWFTextField->setPadding /// void setPadding ( float $padding )\nテキストフィールドのパディングを設定する
SWFTextField->setRightMargin /// void setRightMargin ( float $width )\nテキストフィールドの右マージンの幅を設定する
SWFVideoStream->__construct /// SWFVideoStream __construct ([ string $file ] )\nSWFVideoStream オブジェクトを返す
SWFVideoStream->getNumFrames /// int getNumFrames ( void )\nビデオ内のフレーム数を返す
SWFVideoStream->setDimension /// void setDimension ( int $x , int $y )\nビデオの大きさを設定する
PDF_activate_item /// bool PDF_activate_item ( resource $pdfdoc , int $id )\n構造体要素やその他の内容をアクティブにする
PDF_add_annotation /// 注記を追加する [古い関数]
PDF_add_bookmark /// ブックマークを現在のページに追加する [古い関数]
PDF_add_launchlink /// bool PDF_add_launchlink ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename )\n現在のページに起動用注記を追加する [古い関数]
PDF_add_locallink /// bool PDF_add_locallink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest )\n現在のページにリンク注記を追加する [古い関数]
PDF_add_nameddest /// bool PDF_add_nameddest ( resource $pdfdoc , string $name , string $optlist )\n移動先を作成する
PDF_add_note /// bool PDF_add_note ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )\n現在のページに注記を追加する [古い関数]
PDF_add_outline /// 現在のページにブックマークを追加する [古い関数]
PDF_add_pdflink /// bool PDF_add_pdflink ( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest )\n現在のページにリンク注記を追加する [古い関数]
PDF_add_table_cell /// int PDF_add_table_cell ( resource $pdfdoc , int $table , int $column , int $row , string $text , string $optlist )\n新しいテーブル、あるいは既存のテーブルにセルを追加する
PDF_add_textflow /// int PDF_add_textflow ( resource $pdfdoc , int $textflow , string $text , string $optlist )\nTextflow を作成するか、既存の Textflow にテキストを追加する
PDF_add_thumbnail /// bool PDF_add_thumbnail ( resource $pdfdoc , int $image )\n現在のページにサムネイルを追加する
PDF_add_weblink /// bool PDF_add_weblink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url )\n現在のページに Web リンクを追加する [古い関数]
PDF_arc /// bool PDF_arc ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )\n反時計回りに円弧を描く
PDF_arcn /// bool PDF_arcn ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )\n時計回りに円弧を描く
PDF_attach_file /// bool PDF_attach_file ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon )\n現在のページに添付ファイルを追加する [古い関数]
PDF_begin_document /// int PDF_begin_document ( resource $pdfdoc , string $filename , string $optlist )\n新しい PDF ファイルを作成する
PDF_begin_font /// bool PDF_begin_font ( resource $pdfdoc , string $filename , float $a , float $b , float $c , float $d , float $e , float $f , string $optlist )\nType 3 フォント定義を開始する
PDF_begin_glyph /// bool PDF_begin_glyph ( resource $pdfdoc , string $glyphname , float $wx , float $llx , float $lly , float $urx , float $ury )\nType 3 フォントのグリフ定義を開始する
PDF_begin_item /// int PDF_begin_item ( resource $pdfdoc , string $tag , string $optlist )\n構造体要素あるいはその他の内容をオープンする
PDF_begin_layer /// bool PDF_begin_layer ( resource $pdfdoc , int $layer )\nレイヤーを開始する
PDF_begin_page_ext /// bool PDF_begin_page_ext ( resource $pdfdoc , float $width , float $height , string $optlist )\n新規ページを開始する
PDF_begin_page /// bool PDF_begin_page ( resource $pdfdoc , float $width , float $height )\n新規ページを開始する [古い関数]
PDF_begin_pattern /// int PDF_begin_pattern ( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )\nパターン定義を開始する
PDF_begin_template_ext /// int PDF_begin_template_ext ( resource $pdfdoc , float $width , float $height , string $optlist )\nテンプレート定義を開始する
PDF_begin_template /// int PDF_begin_template ( resource $pdfdoc , float $width , float $height )\nテンプレート定義を開始する [古い関数]
PDF_circle /// bool PDF_circle ( resource $pdfdoc , float $x , float $y , float $r )\n円を描く
PDF_clip /// bool PDF_clip ( resource $p )\n現在のパスに切り取る
PDF_close_image /// bool PDF_close_image ( resource $p , int $image )\n画像を閉じる
PDF_close_pdi_page /// bool PDF_close_pdi_page ( resource $p , int $page )\nページハンドルを閉じる
PDF_close_pdi /// bool PDF_close_pdi ( resource $p , int $doc )\nPDF ドキュメント入力を閉じる [古い関数]
PDF_close /// bool PDF_close ( resource $p )\npdf ドキュメントを閉じる [古い関数]
PDF_closepath_fill_stroke /// bool PDF_closepath_fill_stroke ( resource $p )\n現在のパスを閉じ、塗りつぶし、輪郭を描く
PDF_closepath_stroke /// bool PDF_closepath_stroke ( resource $p )\nパスを閉じ、パスに沿って線を描く
PDF_closepath /// bool PDF_closepath ( resource $p )\n現在のパスを閉じる
PDF_concat /// bool PDF_concat ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )\n行列を CTM に追加する
PDF_continue_text /// bool PDF_continue_text ( resource $p , string $text )\n次の行にテキストを出力する
PDF_create_3dview /// int PDF_create_3dview ( resource $pdfdoc , string $username , string $optlist )\n3D ビューを作成する
PDF_create_action /// int PDF_create_action ( resource $pdfdoc , string $type , string $optlist )\nオブジェクトやイベントに対するアクションを作成する
PDF_create_annotation /// bool PDF_create_annotation ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $type , string $optlist )\n矩形の注記を作成する
PDF_create_bookmark /// int PDF_create_bookmark ( resource $pdfdoc , string $text , string $optlist )\nブックマークを作成する
PDF_create_field /// bool PDF_create_field ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $name , string $type , string $optlist )\nフォームフィールドを作成する
PDF_create_fieldgroup /// bool PDF_create_fieldgroup ( resource $pdfdoc , string $name , string $optlist )\nフォームフィールドグループを作成する
PDF_create_gstate /// int PDF_create_gstate ( resource $pdfdoc , string $optlist )\n画像状態オブジェクトを作成する
PDF_create_pvf /// bool PDF_create_pvf ( resource $pdfdoc , string $filename , string $data , string $optlist )\nPDFlib 仮想ファイルを作成する
PDF_create_textflow /// int PDF_create_textflow ( resource $pdfdoc , string $text , string $optlist )\ntextflow オブジェクトを作成する
PDF_curveto /// bool PDF_curveto ( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )\nベジエ曲線を描く
PDF_define_layer /// int PDF_define_layer ( resource $pdfdoc , string $name , string $optlist )\nレイヤー定義を作成する
PDF_delete_pvf /// int PDF_delete_pvf ( resource $pdfdoc , string $filename )\nPDFlib 仮想ファイルを削除する
PDF_delete_table /// bool PDF_delete_table ( resource $pdfdoc , int $table , string $optlist )\nテーブルオブジェクトを削除する
PDF_delete_textflow /// bool PDF_delete_textflow ( resource $pdfdoc , int $textflow )\ntextflow オブジェクトを削除する
PDF_delete /// bool PDF_delete ( resource $pdfdoc )\nPDFlib オブジェクトを削除する
PDF_encoding_set_char /// bool PDF_encoding_set_char ( resource $pdfdoc , string $encoding , int $slot , string $glyphname , int $uv )\nグリフ名や Unicode 値を追加する
PDF_end_document /// bool PDF_end_document ( resource $pdfdoc , string $optlist )\nPDF ファイルを閉じる
PDF_end_font /// bool PDF_end_font ( resource $pdfdoc )\nType 3 フォント定義を終了する
PDF_end_glyph /// bool PDF_end_glyph ( resource $pdfdoc )\nType 3 フォントのグリフ定義を終了する
PDF_end_item /// bool PDF_end_item ( resource $pdfdoc , int $id )\n構造体要素やその他の内容を閉じる
PDF_end_layer /// bool PDF_end_layer ( resource $pdfdoc )\nすべてのアクティブなレイヤーを無効にする
PDF_end_page_ext /// bool PDF_end_page_ext ( resource $pdfdoc , string $optlist )\nページを終了する
PDF_end_page /// bool PDF_end_page ( resource $p )\nページを終了する
PDF_end_pattern /// bool PDF_end_pattern ( resource $p )\nパターンを終了する
PDF_end_template /// bool PDF_end_template ( resource $p )\nテンプレートを終了する
PDF_endpath /// bool PDF_endpath ( resource $p )\n現在のパスを終了する
PDF_fill_imageblock /// int PDF_fill_imageblock ( resource $pdfdoc , int $page , string $blockname , int $image , string $optlist )\n画像ブロックをさまざまなデータで塗りつぶす
PDF_fill_pdfblock /// int PDF_fill_pdfblock ( resource $pdfdoc , int $page , string $blockname , int $contents , string $optlist )\nPDF ブロックをさまざまなデータで塗りつぶす
PDF_fill_stroke /// bool PDF_fill_stroke ( resource $p )\nパスを塗りつぶし、パスの輪郭を描く
PDF_fill_textblock /// int PDF_fill_textblock ( resource $pdfdoc , int $page , string $blockname , string $text , string $optlist )\nテキストブロックをさまざまなデータで塗りつぶす
PDF_fill /// bool PDF_fill ( resource $p )\n現在のパスを塗りつぶす
PDF_findfont /// int PDF_findfont ( resource $p , string $fontname , string $encoding , int $embed )\n後で使用するフォントを準備する [古い関数]
PDF_fit_image /// bool PDF_fit_image ( resource $pdfdoc , int $image , float $x , float $y , string $optlist )\n画像やテンプレートを配置する
PDF_fit_pdi_page /// bool PDF_fit_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , string $optlist )\nインポートした PDF ページを配置する
PDF_fit_table /// string PDF_fit_table ( resource $pdfdoc , int $table , float $llx , float $lly , float $urx , float $ury , string $optlist )\nテーブルをページに配置する
PDF_fit_textflow /// string PDF_fit_textflow ( resource $pdfdoc , int $textflow , float $llx , float $lly , float $urx , float $ury , string $optlist )\ntextflow を矩形領域に配置する
PDF_fit_textline /// bool PDF_fit_textline ( resource $pdfdoc , string $text , float $x , float $y , string $optlist )\n1 行分のテキストを配置する
PDF_get_apiname /// string PDF_get_apiname ( resource $pdfdoc )\n成功しなかった API 関数の名前を取得する
PDF_get_buffer /// string PDF_get_buffer ( resource $p )\nPDF 出力バッファを取得する
PDF_get_errmsg /// string PDF_get_errmsg ( resource $pdfdoc )\nエラーテキストを取得する
PDF_get_errnum /// int PDF_get_errnum ( resource $pdfdoc )\nエラー番号を取得する
PDF_get_font /// フォントを取得する [古い関数]
PDF_get_fontname /// フォント名を取得する [古い関数]
PDF_get_fontsize /// フォント処理 [古い関数]
PDF_get_image_height /// 画像の高さを取得する [古い関数]
PDF_get_image_width /// 画像の幅を取得する [古い関数]
PDF_get_majorversion /// int PDF_get_majorversion ( void )\nメジャーバージョン番号を取得する [古い関数]
PDF_get_minorversion /// int PDF_get_minorversion ( void )\nマイナーバージョン番号を取得する [古い関数]
PDF_get_parameter /// string PDF_get_parameter ( resource $p , string $key , float $modifier )\n文字列パラメータを取得する
PDF_get_pdi_parameter /// string PDF_get_pdi_parameter ( resource $p , string $key , int $doc , int $page , int $reserved )\nPDI 文字列パラメータを取得する [古い関数]
PDF_get_pdi_value /// float PDF_get_pdi_value ( resource $p , string $key , int $doc , int $page , int $reserved )\n数値型の PDI パラメータを取得する [古い関数]
PDF_get_value /// float PDF_get_value ( resource $p , string $key , float $modifier )\n数値型のパラメータを取得する
PDF_info_font /// float PDF_info-font ( resource $pdfdoc , int $font , string $keyword , string $optlist )\n読み込まれたフォントについての詳細情報を問い合わせる
PDF_info_matchbox /// float PDF_info_matchbox ( resource $pdfdoc , string $boxname , int $num , string $keyword )\nマッチボックスの情報を問い合わせる
PDF_info_table /// float PDF_info_table ( resource $pdfdoc , int $table , string $keyword )\nテーブルの情報を取得する
PDF_info_textflow /// float PDF_info_textflow ( resource $pdfdoc , int $textflow , string $keyword )\ntextflow の状態を問い合わせる
PDF_info_textline /// float PDF_info_textline ( resource $pdfdoc , string $text , string $keyword , string $optlist )\nテキストの行のフォーマットを行い、メトリクスを問い合わせる
PDF_initgraphics /// bool PDF_initgraphics ( resource $p )\n描画状態をリセットする
PDF_lineto /// bool PDF_lineto ( resource $p , float $x , float $y )\n線を描く
PDF_load_3ddata /// int PDF_load_3ddata ( resource $pdfdoc , string $filename , string $optlist )\n3D モデルを読み込む
PDF_load_font /// int PDF_load_font ( resource $pdfdoc , string $fontname , string $encoding , string $optlist )\nフォントを検索し、準備する
PDF_load_iccprofile /// int PDF_load_iccprofile ( resource $pdfdoc , string $profilename , string $optlist )\nICC プロファイルを検索し、準備する
PDF_load_image /// int PDF_load_image ( resource $pdfdoc , string $imagetype , string $filename , string $optlist )\n画像ファイルをオープンする
PDF_makespotcolor /// int PDF_makespotcolor ( resource $p , string $spotname )\nスポット色を作成する
PDF_moveto /// bool PDF_moveto ( resource $p , float $x , float $y )\n現在の位置を設定する
PDF_new /// resource PDF_new ( void )\nPDFlib オブジェクトを作成する
PDF_open_ccitt /// int PDF_open_ccitt ( resource $pdfdoc , string $filename , int $width , int $height , int $BitReverse , int $k , int $Blackls1 )\nraw CCITT イメージをオープンする [古い関数]
PDF_open_file /// bool PDF_open_file ( resource $p , string $filename )\nPDF ファイルを作成する [古い関数]
PDF_open_gif /// GIF イメージをオープンする [古い関数]
PDF_open_image_file /// int PDF_open_image_file ( resource $p , string $imagetype , string $filename , string $stringparam , int $intparam )\nファイルからイメージを読み込む [古い関数]
PDF_open_image /// int PDF_open_image ( resource $p , string $imagetype , string $source , string $data , int $length , int $width , int $height , int $components , int $bpc , string $params )\nイメージデータを使用する [古い関数]
PDF_open_jpeg /// JPEG イメージをオープンする [古い関数]
PDF_open_memory_image /// int PDF_open_memory_image ( resource $p , resource $image )\nPHP のイメージ関数で作成されたイメージをオープンする [未サポート]
PDF_open_pdi_page /// int PDF_open_pdi_page ( resource $p , int $doc , int $pagenumber , string $optlist )\nページを準備する
PDF_open_pdi /// int PDF_open_pdi ( resource $pdfdoc , string $filename , string $optlist , int $len )\nPDF ファイルをオープンする [古い関数]
PDF_open_tiff /// TIFF イメージをオープンする [古い関数]
PDF_pcos_get_number /// float PDF_pcos_get_number ( resource $p , int $doc , string $path )\nnumber あるいは boolean 型の pCOS パスの値を取得する
PDF_pcos_get_stream /// string PDF_pcos_get_stream ( resource $p , int $doc , string $optlist , string $path )\nstream、fstream あるいは string 型の pCOS パスの内容を取得する
PDF_pcos_get_string /// string PDF_pcos_get_string ( resource $p , int $doc , string $path )\nname、string あるいは boolean 型の pCOS パスの値を取得する
PDF_place_image /// bool PDF_place_image ( resource $pdfdoc , int $image , float $x , float $y , float $scale )\nイメージをページ上に置く [古い関数]
PDF_place_pdi_page /// bool PDF_place_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy )\nPDF ページを置く [古い関数]
PDF_process_pdi /// int PDF_process_pdi ( resource $pdfdoc , int $doc , int $page , string $optlist )\nインポートされた PDF ドキュメントを処理する
PDF_rect /// bool PDF_rect ( resource $p , float $x , float $y , float $width , float $height )\n矩形を描く
PDF_restore /// bool PDF_restore ( resource $p )\n描画状態を復元する
PDF_resume_page /// bool PDF_resume_page ( resource $pdfdoc , string $optlist )\nページを再開する
PDF_rotate /// bool PDF_rotate ( resource $p , float $phi )\n座標系を回転する
PDF_save /// bool PDF_save ( resource $p )\n描画状態を保存する
PDF_scale /// bool PDF_scale ( resource $p , float $sx , float $sy )\nスケールを設定する
PDF_set_border_color /// bool PDF_set_border_color ( resource $p , float $red , float $green , float $blue )\n注記の周りの境界色を設定する [古い関数]
PDF_set_border_dash /// bool PDF_set_border_dash ( resource $pdfdoc , float $black , float $white )\n注記の周りの境界の破線形式を設定する [古い関数]
PDF_set_border_style /// bool PDF_set_border_style ( resource $pdfdoc , string $style , float $width )\n注記の周りの境界の形式を設定する [古い関数]
PDF_set_char_spacing /// 文字間隔を設定する [古い関数]
PDF_set_duration /// ページ間隔を設定する [古い関数]
PDF_set_gstate /// bool PDF_set_gstate ( resource $pdfdoc , int $gstate )\n画像状態オブジェクトをアクティブにする
PDF_set_horiz_scaling /// テキストの横方向倍率を設定する [古い関数]
PDF_set_info_author /// ドキュメントの author フィールドを設定する [古い関数]
PDF_set_info_creator /// ドキュメントの creator フィールドを設定する [古い関数]
PDF_set_info_keywords /// ドキュメントの keyword フィールドを設定する [古い関数]
PDF_set_info_subject /// ドキュメントの subject フィールドを設定する [古い関数]
PDF_set_info_title /// ドキュメントの title フィールドを設定する [古い関数]
PDF_set_info /// bool PDF_set_info ( resource $p , string $key , string $value )\nドキュメント情報のフィールドを設定する
PDF_set_layer_dependency /// bool PDF_set_layer_dependency ( resource $pdfdoc , string $type , string $optlist )\nレイヤー間の関係を定義する
PDF_set_leading /// テキストの行間を設定する [古い関数]
PDF_set_parameter /// bool PDF_set_parameter ( resource $p , string $key , string $value )\n文字列パラメータを設定する
PDF_set_text_matrix /// テキストの行列を設定する [古い関数]
PDF_set_text_pos /// bool PDF_set_text_pos ( resource $p , float $x , float $y )\nテキストの位置を設定する
PDF_set_text_rendering /// テキストの描画方法を設定する [古い関数]
PDF_set_text_rise /// テキストの傾きを設定する [古い関数]
PDF_set_value /// bool PDF_set_value ( resource $p , string $key , float $value )\n数値パラメータを設定する
PDF_set_word_spacing /// 単語間の空白を設定する [古い関数]
PDF_setcolor /// bool PDF_setcolor ( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )\n塗りつぶし色および輪郭色を設定する
PDF_setdash /// bool PDF_setdash ( resource $pdfdoc , float $b , float $w )\n破線パターンを設定する
PDF_setdashpattern /// bool PDF_setdashpattern ( resource $pdfdoc , string $optlist )\n破線パターンを設定する
PDF_setflat /// bool PDF_setflat ( resource $pdfdoc , float $flatness )\n平面度を設定する
PDF_setfont /// bool PDF_setfont ( resource $pdfdoc , int $font , float $fontsize )\nフォントを設定する
PDF_setgray_fill /// bool PDF_setgray_fill ( resource $p , float $g )\n塗りつぶし色をグレーに設定する [古い関数]
PDF_setgray_stroke /// bool PDF_setgray_stroke ( resource $p , float $g )\n描画色をグレーに設定する [古い関数]
PDF_setgray /// bool PDF_setgray ( resource $p , float $g )\n色をグレーに設定する [古い関数]
PDF_setlinecap /// bool PDF_setlinecap ( resource $p , int $linecap )\nlinecap パラメータを設定する
PDF_setlinejoin /// bool PDF_setlinejoin ( resource $p , int $value )\nlinejoin パラメータを設定する
PDF_setlinewidth /// bool PDF_setlinewidth ( resource $p , float $width )\n線幅を設定する
PDF_setmatrix /// bool PDF_setmatrix ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )\n現在の変換行列を設定する
PDF_setmiterlimit /// bool PDF_setmiterlimit ( resource $pdfdoc , float $miter )\nmiter limit を設定する
PDF_setpolydash /// 複雑な破線パターンを設定する [古い関数]
PDF_setrgbcolor_fill /// bool PDF_setrgbcolor_fill ( resource $p , float $red , float $green , float $blue )\n塗りつぶし RGB 色の値を設定する
PDF_setrgbcolor_stroke /// bool PDF_setrgbcolor_stroke ( resource $p , float $red , float $green , float $blue )\n描画 RGB 色を設定する [古い関数]
PDF_setrgbcolor /// bool PDF_setrgbcolor ( resource $p , float $red , float $green , float $blue )\n描画および塗りつぶし RGB 色を設定する [古い関数]
PDF_shading_pattern /// int PDF_shading_pattern ( resource $pdfdoc , int $shading , string $optlist )\nシェーディングパターンを定義する
PDF_shading /// int PDF_shading ( resource $pdfdoc , string $shtype , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )\n混色を定義する
PDF_shfill /// bool PDF_shfill ( resource $pdfdoc , int $shading )\nシェーディングで領域を塗りつぶす
PDF_show_boxed /// int PDF_show_boxed ( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature )\nボックスにテキストを出力する [古い関数]
PDF_show_xy /// bool PDF_show_xy ( resource $p , string $text , float $x , float $y )\n指定した位置にテキストを出力する
PDF_show /// bool PDF_show ( resource $pdfdoc , string $text )\n現在の位置にテキストを出力する
PDF_skew /// bool PDF_skew ( resource $p , float $alpha , float $beta )\n座標系を歪ませる
PDF_stringwidth /// float PDF_stringwidth ( resource $p , string $text , int $font , float $fontsize )\nテキストの幅を返す
PDF_stroke /// bool PDF_stroke ( resource $p )\nパスを描く
PDF_suspend_page /// bool PDF_suspend_page ( resource $pdfdoc , string $optlist )\nページを停止する
PDF_translate /// bool PDF_translate ( resource $p , float $tx , float $ty )\n座標系の原点を設定する
PDF_utf16_to_utf8 /// string PDF_utf16_to_utf8 ( resource $pdfdoc , string $utf16string )\n文字列を UTF-16 から UTF-8 に変換する
PDF_utf32_to_utf16 /// string PDF_utf32_to_utf16 ( resource $pdfdoc , string $utf32string , string $ordering )\n文字列を UTF-32 から UTF-16 に変換する
PDF_utf8_to_utf16 /// string PDF_utf8_to_utf16 ( resource $pdfdoc , string $utf8string , string $ordering )\n文字列を UTF-8 から UTF-16 に変換する
ps_add_bookmark /// int ps_add_bookmark ( resource $psdoc , string $text [, int $parent= 0 [, int $open= 0 ]] )\n現在のページにブックマークを追加する
ps_add_launchlink /// bool ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename )\nファイルを実行するためのリンクを追加する
ps_add_locallink /// bool ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest )\n同一ドキュメント内のページへのリンクを追加する
ps_add_note /// bool ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )\n現在のページに注釈を追加する
ps_add_pdflink /// bool ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest )\n別の PDF ドキュメントのページへのリンクを追加する
ps_add_weblink /// bool ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url )\nWeb 上の場所へのリンクを追加する
ps_arc /// bool ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )\n反時計回りに円弧を描く
ps_arcn /// bool ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )\n時計回りに円弧を描く
ps_begin_page /// bool ps_begin_page ( resource $psdoc , float $width , float $height )\n新しいページを開始する
ps_begin_pattern /// int ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )\n新しいパターンを開始する
ps_begin_template /// int ps_begin_template ( resource $psdoc , float $width , float $height )\n新しいテンプレートを開始する
ps_circle /// bool ps_circle ( resource $psdoc , float $x , float $y , float $radius )\n円を描く
ps_clip /// bool ps_clip ( resource $psdoc )\n現在のパスを描画範囲として指定する
ps_close_image /// void ps_close_image ( resource $psdoc , int $imageid )\n画像を閉じ、メモリを開放する
ps_close /// bool ps_close ( resource $psdoc )\nPostScript ドキュメントを閉じる
ps_closepath_stroke /// bool ps_closepath_stroke ( resource $psdoc )\nパスを閉じ、描画する
ps_closepath /// bool ps_closepath ( resource $psdoc )\nパスを閉じる
ps_continue_text /// bool ps_continue_text ( resource $psdoc , string $text )\n次の行にテキストを続ける
ps_curveto /// bool ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )\n曲線を描く
ps_delete /// bool ps_delete ( resource $psdoc )\nPostScript ドキュメントの全リソースを削除する
ps_end_page /// bool ps_end_page ( resource $psdoc )\nページを終了する
ps_end_pattern /// bool ps_end_pattern ( resource $psdoc )\nパターンを終了する
ps_end_template /// bool ps_end_template ( resource $psdoc )\nテンプレートを終了する
ps_fill_stroke /// bool ps_fill_stroke ( resource $psdoc )\n現在のパスを塗りつぶし、線を引く
ps_fill /// bool ps_fill ( resource $psdoc )\n現在のパスを塗りつぶす
ps_findfont /// int ps_findfont ( resource $psdoc , string $fontname , string $encoding [, bool $embed= false ] )\nフォントを読み込む
ps_get_buffer /// string ps_get_buffer ( resource $psdoc )\n生成された PS データを含むバッファの内容を取得する
ps_get_parameter /// string ps_get_parameter ( resource $psdoc , string $name [, float $modifier ] )\nパラメータを取得する
ps_get_value /// float ps_get_value ( resource $psdoc , string $name [, float $modifier ] )\n値を取得する
ps_hyphenate /// array ps_hyphenate ( resource $psdoc , string $text )\n単語をハイフネーションする
ps_include_file /// bool ps_include_file ( resource $psdoc , string $file )\n外部ファイルを生の PostScript コードとして読み込む
ps_lineto /// bool ps_lineto ( resource $psdoc , float $x , float $y )\n直線を描く
ps_makespotcolor /// int ps_makespotcolor ( resource $psdoc , string $name [, int $reserved= 0 ] )\nスポット色を作成する
ps_moveto /// bool ps_moveto ( resource $psdoc , float $x , float $y )\n現在位置を設定する
ps_new /// resource ps_new ( void )\n新しい PostScript ドキュメントオブジェクトを作成する
ps_open_file /// bool ps_open_file ( resource $psdoc [, string $filename ] )\n出力用のファイルを開く
ps_open_image_file /// int ps_open_image_file ( resource $psdoc , string $type , string $filename [, string $stringparam [, int $intparam= 0 ]] )\nファイルから画像を開く
ps_open_image /// int ps_open_image ( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params )\n後で配置するために画像を読み込む
ps_open_memory_image /// int ps_open_memory_image ( resource $psdoc , int $gd )\nGD 画像を受け取り、PS ドキュメントにはめ込む画像を返す
ps_place_image /// bool ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale )\n画像をページに配置する
ps_rect /// bool ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height )\n矩形を描く
ps_restore /// bool ps_restore ( resource $psdoc )\n以前に保存されたコンテキストを復元する
ps_rotate /// bool ps_rotate ( resource $psdoc , float $rot )\n回転の程度を設定する
ps_save /// bool ps_save ( resource $psdoc )\n現在のコンテキストを保存する
ps_scale /// bool ps_scale ( resource $psdoc , float $x , float $y )\n縮尺を設定する
ps_set_border_color /// bool ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue )\n注記の枠線の色を設定する
ps_set_border_dash /// bool ps_set_border_dash ( resource $psdoc , float $black , float $white )\n注記の枠線の、破線の状態を設定する
ps_set_border_style /// bool ps_set_border_style ( resource $psdoc , string $style , float $width )\n注記の枠線の形式を設定する
ps_set_info /// bool ps_set_info ( resource $p , string $key , string $val )\nドキュメントの情報を設定する
ps_set_parameter /// bool ps_set_parameter ( resource $psdoc , string $name , string $value )\nパラメータを設定する
ps_set_text_pos /// bool ps_set_text_pos ( resource $psdoc , float $x , float $y )\nテキストの出力位置を設定する
ps_set_value /// bool ps_set_value ( resource $psdoc , string $name , float $value )\n値を設定する
ps_setcolor /// bool ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )\n色を設定する
ps_setdash /// bool ps_setdash ( resource $psdoc , float $on , float $off )\n破線の形状を設定する
ps_setflat /// bool ps_setflat ( resource $psdoc , float $value )\n平面度を設定する
ps_setfont /// bool ps_setfont ( resource $psdoc , int $fontid , float $size )\n以降の出力で用いるフォントを設定する
ps_setgray /// bool ps_setgray ( resource $psdoc , float $gray )\nグレー値を設定する
ps_setlinecap /// bool ps_setlinecap ( resource $psdoc , int $type )\n線端の形状を設定する
ps_setlinejoin /// bool ps_setlinejoin ( resource $psdoc , int $type )\n線の連結方法を設定する
ps_setlinewidth /// bool ps_setlinewidth ( resource $psdoc , float $width )\n線幅を設定する
ps_setmiterlimit /// bool ps_setmiterlimit ( resource $psdoc , float $value )\nmiter limit 値を設定する
ps_setoverprintmode /// bool ps_setoverprintmode ( resource $psdoc , int $mode )\noverprint モードを設定する
ps_setpolydash /// bool ps_setpolydash ( resource $psdoc , float $arr )\n破線の形状を設定する
ps_shading_pattern /// int ps_shading_pattern ( resource $psdoc , int $shadingid , string $optlist )\nシェーディング用のパターンを作成する
ps_shading /// int ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )\n以降の出力で用いるシェーディングを作成する
ps_shfill /// bool ps_shfill ( resource $psdoc , int $shadingid )\n範囲をシェーディングで塗りつぶす
ps_show_boxed /// int ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode [, string $feature ] )\nテキストをボックス内に出力する
ps_show_xy2 /// bool ps_show_xy2 ( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor )\nテキストを指定した位置に出力する
ps_show_xy /// bool ps_show_xy ( resource $psdoc , string $text , float $x , float $y )\n指定された位置にテキストを出力する
ps_show2 /// bool ps_show2 ( resource $psdoc , string $text , int $len )\nテキストを現在の位置に出力する
ps_show /// bool ps_show ( resource $psdoc , string $text )\nテキストを出力する
ps_string_geometry /// array ps_string_geometry ( resource $psdoc , string $text [, int $fontid= 0 [, float $size= 0.0 ]] )\n文字列のジオメトリを取得する
ps_stringwidth /// float ps_stringwidth ( resource $psdoc , string $text [, int $fontid= 0 [, float $size= 0.0 ]] )\n文字列の幅を取得する
ps_stroke /// bool ps_stroke ( resource $psdoc )\n現在のパスを描画する
ps_symbol_name /// string ps_symbol_name ( resource $psdoc , int $ord [, int $fontid= 0 ] )\nグリフ名を取得する
ps_symbol_width /// float ps_symbol_width ( resource $psdoc , int $ord [, int $fontid= 0 [, float $size= 0.0 ]] )\nグリフの幅を取得する
ps_symbol /// bool ps_symbol ( resource $psdoc , int $ord )\nグリフを出力する
ps_translate /// bool ps_translate ( resource $psdoc , float $x , float $y )\n座標変換を設定する
rpm_close /// bool rpm_close ( resource $rpmr )\nRPM ファイルを閉じる
rpm_get_tag /// mixed rpm_get_tag ( resource $rpmr , int $tagnum )\nRPM ファイルからヘッダタグを取得する
rpm_is_valid /// bool rpm_is_valid ( string $filename )\nfilename が RPM ファイルであるかどうかを確かめる
rpm_open /// resource rpm_open ( string $filename )\nRPM ファイルをオープンする
rpm_version /// string rpm_version ( void )\nrpmreader 拡張モジュールの現在のバージョンを表す文字列を返す
swf_actiongeturl /// void swf_actiongeturl ( string $url , string $target )\nShockwave Flash ムービーから URL を得る
swf_actiongotoframe /// void swf_actiongotoframe ( int $framenumber )\nフレームを実行した後、停止する
swf_actiongotolabel /// void swf_actiongotolabel ( string $label )\n指定したラベルを有するフレームを表示する
swf_actionnextframe /// void swf_actionnextframe ( void )\nフレームを一つ進める
swf_actionplay /// void swf_actionplay ( void )\n現在のフレームから flash ムービーの実行を開始する
swf_actionprevframe /// void swf_actionprevframe ( void )\nフレームを一つ戻す
swf_actionsettarget /// void swf_actionsettarget ( string $target )\nアクションのコンテキストを設定する
swf_actionstop /// void swf_actionstop ( void )\n現在のフレームで flash ムービーの実行を終了する
swf_actiontogglequality /// void swf_actiontogglequality ( void )\n低品質/高品質を切り替える
swf_actionwaitforframe /// void swf_actionwaitforframe ( int $framenumber , int $skipcount )\nフレームがロードされていない場合にアクションをスキップする
swf_addbuttonrecord /// void swf_addbuttonrecord ( int $states , int $shapeid , int $depth )\n現在のボタンの位置、外観、アクティブエリアを制御する
swf_addcolor /// void swf_addcolor ( float $r , float $g , float $b , float $a )\nグローバル加算色を、指定した rbga 値に設定する
swf_closefile /// void swf_closefile ([ int $return_file ] )\n現在の Shockwave Flash ファイルを閉じる
swf_definebitmap /// void swf_definebitmap ( int $objid , string $image_name )\nビットマップを定義する
swf_definefont /// void swf_definefont ( int $fontid , string $fontname )\nフォントを定義する
swf_defineline /// void swf_defineline ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )\n線を定義する
swf_definepoly /// void swf_definepoly ( int $objid , array $coords , int $npoints , float $width )\n多角形を定義する
swf_definerect /// void swf_definerect ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )\n長方形を定義する
swf_definetext /// void swf_definetext ( int $objid , string $str , int $docenter )\nテキスト文字列を定義する
swf_endbutton /// void swf_endbutton ( void )\n現在のボタンの定義を終了する
swf_enddoaction /// void swf_enddoaction ( void )\n現在のアクションを終了する
swf_endshape /// void swf_endshape ( void )\n現在の形状の定義を完結する
swf_endsymbol /// void swf_endsymbol ( void )\nシンボルの定義を終了する
swf_fontsize /// void swf_fontsize ( float $size )\nフォントの大きさを変更する
swf_fontslant /// void swf_fontslant ( float $slant )\nフォントの傾きを設定する
swf_fonttracking /// void swf_fonttracking ( float $tracking )\n現在のフォントのトラッキングを設定する
swf_getbitmapinfo /// array swf_getbitmapinfo ( int $bitmapid )\nビットマップに関する情報を得る
swf_getfontinfo /// array swf_getfontinfo ( void )\nフォントの情報を得る
swf_getframe /// int swf_getframe ( void )\n現在のフレームのフレーム番号を得る
swf_labelframe /// void swf_labelframe ( string $name )\n現在のフレームにラベルを付ける
swf_lookat /// void swf_lookat ( float $view_x , float $view_y , float $view_z , float $reference_x , float $reference_y , float $reference_z , float $twist )\n視点変換を定義する
swf_modifyobject /// void swf_modifyobject ( int $depth , int $how )\nオブジェクトを修正する
swf_mulcolor /// void swf_mulcolor ( float $r , float $g , float $b , float $a )\nグローバル乗算色を指定した rbga 値に設定する
swf_nextid /// int swf_nextid ( void )\n次の未使用のオブジェクト ID を返す
swf_oncondition /// void swf_oncondition ( int $transition )\nアクションリストのトリガとして使用されるトランジションを定義する
swf_openfile /// void swf_openfile ( string $filename , float $width , float $height , float $framerate , float $r , float $g , float $b )\n新規に Shockwave Flash ファイルをオープンする
swf_ortho2 /// void swf_ortho2 ( float $xmin , float $xmax , float $ymin , float $ymax )\nユーザ座標の二次元直交マッピングを現在のビューポイントに定義する
swf_ortho /// void swf_ortho ( float $xmin , float $xmax , float $ymin , float $ymax , float $zmin , float $zmax )\n現在のビューポートにおけるユーザー座標の直交マッピングを定義する
swf_perspective /// void swf_perspective ( float $fovy , float $aspect , float $near , float $far )\n遠近法による投影変換を定義する
swf_placeobject /// void swf_placeobject ( int $objid , int $depth )\nオブジェクトを画面に配置する
swf_polarview /// void swf_polarview ( float $dist , float $azimuth , float $incidence , float $twist )\n極座標で視点を定義する
swf_popmatrix /// void swf_popmatrix ( void )\n以前の変換行列を回復する
swf_posround /// void swf_posround ( int $round )\nオブジェクトを配置または移動する際の変換時の丸め処理を有効または無効にする
swf_pushmatrix /// void swf_pushmatrix ( void )\n現在の変換行列をスタックに入れる
swf_removeobject /// void swf_removeobject ( int $depth )\nオブジェクトを削除する
swf_rotate /// void swf_rotate ( float $angle , string $axis )\n現在の座標を回転する
swf_scale /// void swf_scale ( float $x , float $y , float $z )\n現在の変換をスケリーングする
swf_setfont /// void swf_setfont ( int $fontid )\n現在のフォントを変更する
swf_setframe /// void swf_setframe ( int $framenumber )\n指定したフレームに切替える
swf_shapearc /// void swf_shapearc ( float $x , float $y , float $r , float $ang1 , float $ang2 )\n円弧を描画する
swf_shapecurveto3 /// void swf_shapecurveto3 ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )\n三次ベジエ曲線を描画する
swf_shapecurveto /// void swf_shapecurveto ( float $x1 , float $y1 , float $x2 , float $y2 )\n二点間に二次ベジエ曲線を描画する
swf_shapefillbitmapclip /// void swf_shapefillbitmapclip ( int $bitmapid )\n現在の塗りつぶしモードをクリップ付きビットマップに設定する
swf_shapefillbitmaptile /// void swf_shapefillbitmaptile ( int $bitmapid )\n現在の塗りつぶしモードをタイル状のビットマップに設定する
swf_shapefilloff /// void swf_shapefilloff ( void )\n塗りつぶしをオフにする
swf_shapefillsolid /// void swf_shapefillsolid ( float $r , float $g , float $b , float $a )\n現在の塗りつぶし色を指定した色に設定する
swf_shapelinesolid /// void swf_shapelinesolid ( float $r , float $g , float $b , float $a , float $width )\n現在の行のスタイルを設定する
swf_shapelineto /// void swf_shapelineto ( float $x , float $y )\n線を描画する
swf_shapemoveto /// void swf_shapemoveto ( float $x , float $y )\n現在の位置を移動する
swf_showframe /// void swf_showframe ( void )\n現在のフレームを表示する
swf_startbutton /// void swf_startbutton ( int $objid , int $type )\nボタンの定義を開始する
swf_startdoaction /// void swf_startdoaction ( void )\n現在のフレームのアクションリストの記述を開始する
swf_startshape /// void swf_startshape ( int $objid )\n複雑な形状を開始する
swf_startsymbol /// void swf_startsymbol ( int $objid )\nシンボルを定義する
swf_textwidth /// float swf_textwidth ( string $str )\n文字列の幅を得る
swf_translate /// void swf_translate ( float $x , float $y , float $z )\n現在の座標軸を変換する
swf_viewport /// void swf_viewport ( float $xmin , float $xmax , float $ymin , float $ymax )\n描画を行う範囲を選択する
escapeshellarg /// string escapeshellarg ( string $arg )\nシェル引数として使用される文字列をエスケープする
escapeshellcmd /// string escapeshellcmd ( string $command )\nシェルのメタ文字をエスケープする
exec /// string exec ( string $command [, array &$output [, int &$return_var ]] )\n外部プログラムを実行する
passthru /// void passthru ( string $command [, int &$return_var ] )\n外部プログラムを実行し、未整形の出力を表示する
proc_close /// int proc_close ( resource $process )\nproc_open で開かれたプロセスを閉じ、 そのプロセスの終了コードを返す
proc_get_status /// array proc_get_status ( resource $process )\nproc_open で開かれたプロセスに関する情報を取得する
proc_nice /// bool proc_nice ( int $increment )\n現在のプロセスの優先度を変更する
proc_open /// resource proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )\nコマンドを実行し、入出力用にファイルポインタを開く
proc_terminate /// bool proc_terminate ( resource $process [, int $signal= 15 ] )\nproc_open でオープンされたプロセスを強制終了する
shell_exec /// string shell_exec ( string $cmd )\nシェルによりコマンドを実行し、文字列として出力全体を返す
system /// string system ( string $command [, int &$return_var ] )\n外部プログラムを実行し、出力を表示する
expect_expectl /// int expect_expectl ( resource $expect , array $cases [, array &$match ] )\nプロセスの出力がパターンに一致する・指定した時間が経過する・ あるいは EOF に達するのいずれかにあてはまるまで待ち続ける
expect_popen /// resource expect_popen ( string $command )\nBourne シェル経由でコマンドを実行し、プロセスへの PTY ストリームをオープンする
pcntl_alarm /// int pcntl_alarm ( int $seconds )\nシグナルを送信するアラームを設定する
pcntl_exec /// void pcntl_exec ( string $path [, array $args [, array $envs ]] )\n現在のプロセス空間で指定したプログラムを実行する
pcntl_fork /// int pcntl_fork ( void )\n現在実行中のプロセスをフォークする
pcntl_getpriority /// int pcntl_getpriority ([ int $pid= getmypid() [, int $process_identifier= PRIO_PROCESS ]] )\nプロセスの優先度を取得する
pcntl_setpriority /// bool pcntl_setpriority ( int $priority [, int $pid= getmypid() [, int $process_identifier= PRIO_PROCESS ]] )\nプロセスの優先度を変更する
pcntl_signal_dispatch /// bool pcntl_signal_dispatch ( void )\nペンディングシグナル用のハンドラをコールする
pcntl_signal /// bool pcntl_signal ( int $signo , callback $handler [, bool $restart_syscalls= true ] )\nシグナルハンドラを設定する
pcntl_sigprocmask /// bool pcntl_sigprocmask ( int $how , array $set [, array &$oldset ] )\nブロックされたシグナルを設定あるいは取得する
pcntl_sigtimedwait /// int pcntl_sigtimedwait ( array $set [, array &$siginfo [, int $seconds= 0 [, int $nanoseconds= 0 ]]] )\nタイムアウトつきでシグナルを待つ
pcntl_sigwaitinfo /// int pcntl_sigwaitinfo ( array $set [, array &$siginfo ] )\nシグナルを待つ
pcntl_wait /// int pcntl_wait ( int &$status [, int $options= 0 ] )\n待つかフォークした子プロセスのステータスを返す
pcntl_waitpid /// int pcntl_waitpid ( int $pid , int &$status [, int $options= 0 ] )\n待つかフォークした子プロセスのステータスを返す
pcntl_wexitstatus /// int pcntl_wexitstatus ( int $status )\n終了した子プロセスのリターンコードを返す
pcntl_wifexited /// bool pcntl_wifexited ( int $status )\nステータスコードが正常終了を表しているかどうかを調べる
pcntl_wifsignaled /// bool pcntl_wifsignaled ( int $status )\nステータスコードがシグナルによる終了を表しているかどうかを調べる
pcntl_wifstopped /// bool pcntl_wifstopped ( int $status )\n子プロセスが現在停止しているかどうかを調べる
pcntl_wstopsig /// int pcntl_wstopsig ( int $status )\n子プロセスを停止させたシグナルを返す
pcntl_wtermsig /// int pcntl_wtermsig ( int $status )\n子プロセスの終了を生じたシグナルを返す
posix_access /// bool posix_access ( string $file [, int $mode= POSIX_F_OK ] )\nファイルのアクセス権限を判断する
posix_ctermid /// string posix_ctermid ( void )\n制御する端末のパス名を得る
posix_get_last_error /// int posix_get_last_error ( void )\n直近で失敗した posix 関数が設定したエラー番号を取得する
posix_getcwd /// string posix_getcwd ( void )\n現在のディレクトリのパス名
posix_getegid /// int posix_getegid ( void )\n現在のプロセスの有効なグループ ID を返す
posix_geteuid /// int posix_geteuid ( void )\n現在のプロセスの有効なユーザ ID を返す
posix_getgid /// int posix_getgid ( void )\n現在のプロセスの実際のグループ ID を返す
posix_getgrgid /// array posix_getgrgid ( int $gid )\n指定したグループ ID を有するグループに関する情報を返す
posix_getgrnam /// array posix_getgrnam ( string $name )\n指定した名前のグループに関する情報を返す
posix_getgroups /// array posix_getgroups ( void )\n現在のプロセスのグループセットを返す
posix_getlogin /// string posix_getlogin ( void )\nログイン名を返す
posix_getpgid /// int posix_getpgid ( int $pid )\nジョブ制御のプロセスグループ ID を得る
posix_getpgrp /// int posix_getpgrp ( void )\n現在のプロセスのグループ ID を返す
posix_getpid /// int posix_getpid ( void )\n現在のプロセス ID を返す
posix_getppid /// int posix_getppid ( void )\n親プロセスの ID を返す
posix_getpwnam /// array posix_getpwnam ( string $username )\n指定した名前のユーザに関する情報を返す
posix_getpwuid /// array posix_getpwuid ( int $uid )\n指定 ID のユーザに関する情報を返す
posix_getrlimit /// array posix_getrlimit ( void )\nシステムリソース制限に関する情報を返す
posix_getsid /// int posix_getsid ( int $pid )\nプロセスの現在の sid を得る
posix_getuid /// int posix_getuid ( void )\n現在のプロセスの実際のユーザ ID を返す
posix_initgroups /// bool posix_initgroups ( string $name , int $base_group_id )\nグループアクセスリストを求める
posix_isatty /// bool posix_isatty ( int $fd )\nファイル記述子が対話型端末であるかどうかを定義する
posix_kill /// bool posix_kill ( int $pid , int $sig )\nプロセスにシグナルを送信する
posix_mkfifo /// bool posix_mkfifo ( string $pathname , int $mode )\nfifo スペシャルファイル(名前付きパイプ)を作成する
posix_mknod /// bool posix_mknod ( string $pathname , int $mode [, int $major= 0 [, int $minor= 0 ]] )\nスペシャルファイルあるいは通常のファイルを作成する (POSIX.1)
posix_setegid /// bool posix_setegid ( int $gid )\n現在のプロセスの実効 GID を設定する
posix_seteuid /// bool posix_seteuid ( int $uid )\n現在のプロセスの実効 UID を設定する
posix_setgid /// bool posix_setgid ( int $gid )\n現在のプロセスの GID を設定する
posix_setpgid /// bool posix_setpgid ( int $pid , int $pgid )\nジョブ制御のプロセスグループ ID を設定する
posix_setsid /// int posix_setsid ( void )\n現在のプロセスをセッションリーダーにする
posix_setuid /// bool posix_setuid ( int $uid )\n現在のプロセスの UID を設定する
posix_strerror /// string posix_strerror ( int $errno )\n指定したエラー番号に対応するシステムのエラーメッセージを取得する
posix_times /// array posix_times ( void )\nプロセス時間を得る
posix_ttyname /// string posix_ttyname ( int $fd )\n端末のデバイス名を調べる
posix_uname /// array posix_uname ( void )\nシステム名を得る
ftok /// int ftok ( string $pathname , string $proj )\nパス名とプロジェクト ID を、System V IPC キーに変換する
msg_get_queue /// resource msg_get_queue ( int $key [, int $perms ] )\nメッセージキューを作成またはそれにアタッチする
msg_queue_exists /// bool msg_queue_exists ( int $key )\nメッセージキューが存在するかどうかを調べる
msg_receive /// bool msg_receive ( resource $queue , int $desiredmsgtype , int &$msgtype , int $maxsize , mixed &$message [, bool $unserialize [, int $flags [, int &$errorcode ]]] )\nメッセージキューからメッセージを受信する
msg_remove_queue /// bool msg_remove_queue ( resource $queue )\nメッセージキューを破棄する
msg_send /// bool msg_send ( resource $queue , int $msgtype , mixed $message [, bool $serialize [, bool $blocking [, int &$errorcode ]]] )\nメッセージキューにメッセージを送信する
msg_set_queue /// bool msg_set_queue ( resource $queue , array $data )\nメッセージキューデータ構造体の情報を設定する
msg_stat_queue /// array msg_stat_queue ( resource $queue )\nメッセージキューデータ構造体の情報を返す
sem_acquire /// bool sem_acquire ( resource $sem_identifier )\nセマフォを得る
sem_get /// resource sem_get ( int $key [, int $max_acquire [, int $perm [, int $auto_release ]]] )\nセマフォ ID を得る
sem_release /// bool sem_release ( resource $sem_identifier )\nセマフォを解放する
sem_remove /// bool sem_remove ( resource $sem_identifier )\nセマフォを削除する
shm_attach /// resource shm_attach ( int $key [, int $memsize [, int $perm ]] )\n共有メモリセグメントを作成またはオープンする
shm_detach /// bool shm_detach ( resource $shm_identifier )\n共有メモリセグメントへの接続を閉じる
shm_get_var /// mixed shm_get_var ( resource $shm_identifier , int $variable_key )\n共有メモリから変数を返す
shm_put_var /// bool shm_put_var ( resource $shm_identifier , int $variable_key , mixed $variable )\n共有メモリの変数を挿入または更新する
shm_remove_var /// bool shm_remove_var ( resource $shm_identifier , int $variable_key )\n共有メモリから変数を削除する
shm_remove /// bool shm_remove ( resource $shm_identifier )\nUnix システムから共有メモリを削除する
shmop_close /// void shmop_close ( int $shmid )\n共有メモリブロックを閉じる
shmop_delete /// bool shmop_delete ( int $shmid )\n共有メモリブロックを削除する
shmop_open /// int shmop_open ( int $key , string $flags , int $mode , int $size )\n共有メモリブロックを作成またはオープンする
shmop_read /// string shmop_read ( int $shmid , int $start , int $count )\n共有メモリブロックからデータを読み込む
shmop_size /// int shmop_size ( int $shmid )\n共有メモリブロックの大きさを得る
shmop_write /// int shmop_write ( int $shmid , string $data , int $offset )\n共有メモリブロックにデータを書き込む
geoip_continent_code_by_name /// string geoip_continent_code_by_name ( string $hostname )\n二文字の大陸コードを取得する
geoip_country_code_by_name /// string geoip_country_code_by_name ( string $hostname )\n二文字の国コードを取得する
geoip_country_code3_by_name /// string geoip_country_code3_by_name ( string $hostname )\n三文字の国コードを取得する
geoip_country_name_by_name /// string geoip_country_name_by_name ( string $hostname )\n完全な国名を取得する
geoip_database_info /// string geoip_database_info ([ int $database= GEOIP_COUNTRY_EDITION ] )\nGeoIP データベースの情報を取得する
geoip_db_avail /// bool geoip_db_avail ( int $database )\nGeoIP データベースが使用可能かどうかを調べる
geoip_db_filename /// string geoip_db_filename ( int $database )\n対応する GeoIP データベースのファイル名を返す
geoip_db_get_all_info /// array geoip_db_get_all_info ( void )\nすべての GeoIP データベース形式についての詳細情報を返す
geoip_id_by_name /// int geoip_id_by_name ( string $hostname )\nインターネット接続のスピードを取得する
geoip_isp_by_name /// string geoip_isp_by_name ( string $hostname )\nインターネットサービスプロバイダ (ISP) 名を取得する
geoip_org_by_name /// string geoip_org_by_name ( string $hostname )\n組織名を取得する
geoip_record_by_name /// array geoip_record_by_name ( string $hostname )\nGeoIP データベースで見つかった詳細な都市情報を返す
geoip_region_by_name /// array geoip_region_by_name ( string $hostname )\n国コードおよび地域を取得する
geoip_region_name_by_code /// string geoip_region_name_by_code ( string $country_code , string $region_code )\n国コードと地域コードから地域名を返す
geoip_time_zone_by_country_and_region /// string geoip_time_zone_by_country_and_region ( string $country_code [, string $region_code ] )\n国コードと地域コードからタイムゾーンを返す
json_decode /// mixed json_decode ( string $json [, bool $assoc= false [, int $depth= 512 ]] )\nJSON 文字列をデコードする
json_encode /// string json_encode ( mixed $value [, int $options= 0 ] )\n値を JSON 形式にして返す
json_last_error /// int json_last_error ( void )\n直近に発生したエラーを返す
connection_aborted /// int connection_aborted ( void )\nクライアントとの接続が切断されているかどうかを調べる
connection_status /// int connection_status ( void )\n接続ステータスのビットフィールドを返す
connection_timeout /// int connection_timeout ( void )\nスクリプトがタイムアウトしたかどうかを調べる
constant /// mixed constant ( string $name )\n定数の値を返す
define /// bool define ( string $name , mixed $value [, bool $case_insensitive= false ] )\n名前を指定して定数を定義する
defined /// bool defined ( string $name )\n指定した名前の定数が存在するかどうかを調べる
die /// exit と同等
eval /// mixed eval ( string $code_str )\n文字列を PHP コードとして評価する
exit /// void exit ([ string $status ] )\nメッセージを出力し、現在のスクリプトを終了する
get_browser /// mixed get_browser ([ string $user_agent [, bool $return_array= false ]] )\nユーザのブラウザの機能を取得する
__halt_compiler /// void __halt_compiler ( void )\nコンパイラの実行を中止する
highlight_file /// mixed highlight_file ( string $filename [, bool $return= false ] )\nファイルの構文ハイライト表示
highlight_string /// mixed highlight_string ( string $str [, bool $return= false ] )\n文字列の構文ハイライト表示
ignore_user_abort /// int ignore_user_abort ([ string $setting ] )\nクライアントの接続が切断された際にスクリプトの実行を終了するかどうかを設定する
pack /// string pack ( string $format [, mixed $args [, mixed $... ]] )\nデータをバイナリ文字列にパックする
php_check_syntax /// bool php_check_syntax ( string $filename [, string &$error_message ] )\n指定したファイルの文法チェック（と実行）を行う
php_strip_whitespace /// string php_strip_whitespace ( string $filename )\nコメントと空白文字を取り除いたソースを返す
show_source /// highlight_file のエイリアス
sleep /// int sleep ( int $seconds )\n実行を遅延させる
sys_getloadavg /// array sys_getloadavg ( void )\nシステムの平均負荷を取得する
time_nanosleep /// mixed time_nanosleep ( int $seconds , int $nanoseconds )\n秒およびナノ秒単位で実行を遅延する
time_sleep_until /// bool time_sleep_until ( float $timestamp )\n指定した時刻まで実行を遅延する
uniqid /// string uniqid ([ string $prefix= "" [, bool $more_entropy= false ]] )\n一意な ID を生成する
unpack /// array unpack ( string $format , string $data )\nバイナリ文字列からデータを切り出す
usleep /// void usleep ( int $micro_seconds )\nマイクロ秒単位で実行を遅延する
parsekit_compile_file /// array parsekit_compile_file ( string $filename [, array &$errors [, int $options= PARSEKIT_QUIET ]] )\nPHP コードの文字列をコンパイルし、結果を op コードの配列で返す
parsekit_compile_string /// array parsekit_compile_string ( string $phpcode [, array &$errors [, int $options= PARSEKIT_QUIET ]] )\nPHP コードの文字列をコンパイルし、結果を op コードの配列で返す
parsekit_func_arginfo /// array parsekit_func_arginfo ( mixed $function )\n関数の引数に関する情報を返す
class_implements /// array class_implements ( mixed $class [, bool $autoload= true ] )\n与えられたクラスが実装しているインターフェースを返す
class_parents /// array class_parents ( mixed $class [, bool $autoload= true ] )\n与えられたクラスの親クラスを返す
iterator_apply /// int iterator_apply ( Traversable $iterator , callback $function [, array $args ] )\nユーザ関数をイテレータのすべての要素に適用する
iterator_count /// int iterator_count ( Traversable $iterator )\nイテレータにある要素をカウントする
iterator_to_array /// array iterator_to_array ( Traversable $iterator [, bool $use_keys= true ] )\nイテレータを配列にコピーする
spl_autoload_call /// void spl_autoload_call ( string $class_name )\n要求されたクラスを読み込むために、すべての登録済みの __autoload() 関数を試す
spl_autoload_extensions /// string spl_autoload_extensions ([ string $file_extensions ] )\nspl_autoload 用のデフォルトの拡張子を登録し、それを返す
spl_autoload_functions /// array spl_autoload_functions ( void )\nすべての登録済み __autoload() 関数を返す
spl_autoload_register /// bool spl_autoload_register ([ callback $autoload_function ] )\n指定した関数を __autoload() の実装として登録する
spl_autoload_unregister /// bool spl_autoload_unregister ( mixed $autoload_function )\n指定した関数の、__autoload() の実装としての登録を解除する
spl_autoload /// void spl_autoload ( string $class_name [, string $file_extensions= spl_autoload_extensions() ] )\n__autoload() のデフォルト実装
spl_classes /// array spl_classes ( void )\n利用可能な SPL クラスを返す
spl_object_hash /// string spl_object_hash ( object $obj )\n指定したオブジェクトのハッシュ ID を返す
stream_bucket_append /// void stream_bucket_append ( resource $brigade , resource $bucket )\nbucket を brigade に追加する
stream_bucket_make_writeable /// object stream_bucket_make_writeable ( resource $brigade )\n操作する brigade から bucket オブジェクトを返す
stream_bucket_new /// object stream_bucket_new ( resource $stream , string $buffer )\n現在のストリームで使用する新しい bucket を作成する
stream_bucket_prepend /// void stream_bucket_prepend ( resource $brigade , resource $bucket )\nbucket を brigade に追加する
stream_context_create /// resource stream_context_create ([ array $options [, array $params ]] )\nストリームコンテキストを作成する
stream_context_get_default /// resource stream_context_get_default ([ array $options ] )\nデフォルトのストリームコンテキストを取得する
stream_context_get_options /// array stream_context_get_options ( resource $stream_or_context )\nストリーム / ラッパ / コンテキストに設定されているオプションを取得する
stream_context_set_default /// resource stream_context_set_default ( array $options )\nデフォルトのストリームコンテキストを設定する
stream_context_set_option /// bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value )\nストリーム / ラッパ / コンテキストのオプションを設定する
stream_context_set_params /// bool stream_context_set_params ( resource $stream_or_context , array $params )\nストリーム / ラッパ / コンテキストのパラメータを設定する
stream_copy_to_stream /// int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength= -1 [, int $offset= 0 ]] )\nデータをあるストリームから別のストリームにコピーする
stream_encoding /// bool stream_encoding ( resource $stream [, string $encoding ] )\nストリームのエンコード用の文字セットを設定する
stream_filter_append /// resource stream_filter_append ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )\nストリームにフィルタを付加する
stream_filter_prepend /// resource stream_filter_prepend ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )\nフィルタをストリームに付加する
stream_filter_register /// bool stream_filter_register ( string $filtername , string $classname )\nphp_user_filter に由来するクラスとして実装されたストリームフィルタを登録する
stream_filter_remove /// bool stream_filter_remove ( resource $stream_filter )\nストリームからフィルタを取り除く
stream_get_contents /// string stream_get_contents ( resource $handle [, int $maxlength= -1 [, int $offset= 0 ]] )\n残りのストリームを文字列に読み込む
stream_get_filters /// array stream_get_filters ( void )\n登録されているフィルタのリストを取得する
stream_get_line /// string stream_get_line ( resource $handle , int $length [, string $ending ] )\n指定されたデリミタの位置までのデータを一行分としてストリームから読み込む
stream_get_meta_data /// array stream_get_meta_data ( resource $stream )\nヘッダーあるいはメタデータをストリームまたはファイルポインタから取得する
stream_get_transports /// array stream_get_transports ( void )\n登録されたソケットのトランスポートの一覧を取得する
stream_get_wrappers /// array stream_get_wrappers ( void )\n登録されているストリームのラッパのリストを取得する
stream_notification_callback /// void stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max )\nnotification コンテキストパラメータ用のコールバック関数
stream_register_wrapper /// stream_wrapper_register のエイリアス
stream_resolve_include_path /// string stream_resolve_include_path ( string $filename [, resource $context ] )\nfopen に相対パスを指定してコールされたときに、 どのファイルをオープンするかを決める
stream_select /// int stream_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec= 0 ] )\nselect() システムコールと同等の操作を、 ストリームの配列に対して tv_sec と tv_usec で指定されたタイムアウト時間をもって行う
stream_set_blocking /// bool stream_set_blocking ( resource $stream , int $mode )\nストリームのブロックモードを有効にする / 解除する
stream_set_timeout /// bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds= 0 ] )\nストリームにタイムアウトを設定する
stream_set_write_buffer /// int stream_set_write_buffer ( resource $stream , int $buffer )\n指定されたストリームのファイルバッファリングを有効にする
stream_socket_accept /// resource stream_socket_accept ( resource $server_socket [, float $timeout= ini_get("default_socket_timeout") [, string &$peername ]] )\nstream_socket_server で作られたソケットの接続を受け入れる
stream_socket_client /// resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout= ini_get("default_socket_timeout") [, int $flags= STREAM_CLIENT_CONNECT [, resource $context ]]]]] )\nインターネットドメインまたは Unix ドメインのソケット接続を開く
stream_socket_enable_crypto /// mixed stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] )\n接続済みのソケットについて暗号化の on/off を切り替える
stream_socket_get_name /// string stream_socket_get_name ( resource $handle , bool $want_peer )\nローカルまたはリモートのソケットの名前を取得する
stream_socket_pair /// array stream_socket_pair ( int $domain , int $type , int $protocol )\n接続された、区別できないソケットストリームの組を作成する
stream_socket_recvfrom /// string stream_socket_recvfrom ( resource $socket , int $length [, int $flags= 0 [, string &$address ]] )\n接続されているかどうかにかかわらず、ソケットからのデータを受信する
stream_socket_sendto /// int stream_socket_sendto ( resource $socket , string $data [, int $flags= 0 [, string $address ]] )\n接続されているかどうかにかかわらず、ソケットにデータを送信する
stream_socket_server /// resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags= STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )\nインターネットドメインまたは Unix ドメインのサーバソケットを作成する
stream_socket_shutdown /// bool stream_socket_shutdown ( resource $stream , int $how )\n全二重接続を終了する
stream_supports_lock /// bool stream_supports_lock ( resource $stream )\nストリームがロックをサポートしているかどうかを調べる
stream_wrapper_register /// bool stream_wrapper_register ( string $protocol , string $classname )\nPHP のクラスとして実装された URL ラッパを登録する
stream_wrapper_restore /// bool stream_wrapper_restore ( string $protocol )\n事前に登録を解除された組み込みラッパを復元する
stream_wrapper_unregister /// bool stream_wrapper_unregister ( string $protocol )\nURL ラッパの登録を解除する
ob_tidyhandler /// string ob_tidyhandler ( string $input [, int $mode ] )\nバッファを修正するための ob_start コールバック関数
tidy_access_count /// int tidy_access_count ( tidy $object )\n指定したドキュメントについて発生したTidyアクセシビリティ警告の数を返す
tidy_clean_repair /// bool tidy_clean_repair ( tidy $object )\nパースされたマークアップに設定に基く誤りの修正を行う
tidy_config_count /// int tidy_config_count ( tidy $object )\n指定したドキュメントについて発生した Tidy 設定エラーの数を返す
tidy::__construct /// tidy tidy::__construct ([ string $filename [, mixed $config [, string $encoding [, bool $use_include_path ]]]] )\n新規 Tidy オブジェクトを生成する
tidy_diagnose /// bool tidy_diagnose ( tidy $object )\nパース、修正されたマークアップの診断を行う
tidy_error_count /// int tidy_error_count ( tidy $object )\n指定したドキュメントについて発生した Tidy エラーの数を返す
tidy_get_body /// tidyNode tidy_get_body ( tidy $object )\nTidy パースツリーの タグから始まる tidyNode オブジェクトを返す
tidy_get_config /// array tidy_get_config ( tidy $object )\n現在の Tidy の設定を取得する
tidy_get_error_buffer /// string tidy_get_error_buffer ( tidy $object )\n指定したドキュメントのパースで発生した警告とエラーを返す
tidy_get_head /// tidyNode tidy_get_head ( tidy $object )\nTidy パースツリーの タグから始まる tidyNode オブジェクトを返す
tidy_get_html_ver /// int tidy_get_html_ver ( tidy $object )\n指定したドキュメントで検出された HTML バージョンを取得する
tidy_get_html /// tidyNode tidy_get_html ( tidy $object )\nTidy パースツリーの タグから始まる tidyNode オブジェクトを返す
tidy_get_opt_doc /// string tidy_get_opt_doc ( tidy $object , string $optname )\n与えられたオプション名に対するドキュメントを返す
tidy_get_output /// string tidy_get_output ( tidy $object )\nパースされた Tidy マークアップを表す文字列を返す
tidy_get_release /// string tidy_get_release ( void )\nTidy ライブラリのリリース日 (バージョン) を取得する
tidy_get_root /// tidyNode tidy_get_root ( tidy $object )\nTidy パースツリーのルートを表す tidyNode を返す
tidy_get_status /// int tidy_get_status ( tidy $object )\n指定したドキュメントのステータスを取得する
tidy_getopt /// mixed tidy_getopt ( tidy $object , string $option )\nTidy ドキュメントについて指定した設定オプションの値を返す
tidy_is_xhtml /// bool tidy_is_xhtml ( tidy $object )\nドキュメントが XHTML ドキュメントかどうかを示す
tidy_is_xml /// bool tidy_is_xml ( tidy $object )\nドキュメントが一般的な XML ドキュメント (非 HTML/XHTML) かどうかを示す
tidy_load_config /// void tidy_load_config ( string $filename , string $encoding )\n指定したエンコーディングで ASCII コードの Tidy 設定ファイルをロードする
tidy_node->get_attr /// tidy_attr tidy_node->get_attr ( int $attrib_id )\n指定された属性 ID を持つ属性を返す
tidy_node->get_nodes /// array tidy_node->get_nodes ( int $node_id )\n指定された ID を持つノード以下のノードの配列を返す
tidy_node->next /// tidy_node tidy_node->next ( void )\nこのノードの次の兄弟を返す
tidy_node->prev /// tidy_node tidy_node->prev ( void )\nこのノードの前の兄弟を返す
tidy_parse_file /// tidy tidy_parse_file ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path= false ]]] )\nファイルまたは URI にあるマークアップをパースする
tidy_parse_string /// tidy tidy_parse_string ( string $input [, mixed $config [, string $encoding ]] )\n文字列にストアされたドキュメントをパースする
tidy_repair_file /// string tidy_repair_file ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path= false ]]] )\nファイルを修正し、それを文字列として返す
tidy_repair_string /// string tidy_repair_string ( string $data [, mixed $config [, string $encoding ]] )\n別途提供される設定ファイルを使用して文字列を修正する
tidy_reset_config /// bool tidy_reset_config ( void )\nTidy の設定をデフォルト値に戻す
tidy_save_config /// bool tidy_save_config ( string $filename )\n現在の設定を名前が付けられたファイルに保存する
tidy_set_encoding /// bool tidy_set_encoding ( string $encoding )\nマークアップをパースする際の入力／出力エンコーディングを設定する
tidy_setopt /// bool tidy_setopt ( string $option , mixed $value )\n指定した Tidy ドキュメントについての設定を更新する
tidy_warning_count /// int tidy_warning_count ( tidy $object )\n指定したドキュメントについて発生した Tidy 警告の数を返す
tidyNode->hasChildren /// bool tidyNode->hasChildren ( void )\nこのノードが子を持つ場合 true を返す
tidyNode->hasSiblings /// bool tidyNode->hasSiblings ( void )\nこのノードが兄弟ノードを持つ場合 true を返す
tidyNode->isAsp /// bool tidyNode->isAsp ( void )\nこのノードが ASP コードの場合 true を返す
tidyNode->isComment /// bool tidyNode->isComment ( void )\nこのノードがコメントである場合 true を返す
tidyNode->isHtml /// bool tidyNode->isHtml ( void )\nこのノードが HTML ドキュメントの場合 true を返す
tidyNode->isJste /// bool tidyNode->isJste ( void )\nこのノードが JSTE であるの場合 true を返す
tidyNode->isPhp /// bool tidyNode->isPhp ( void )\nこのノードが PHP コードの場合 true を返す
tidyNode->isText /// bool tidyNode->isText ( void )\nこのノードがテキスト (マークアップでない) の場合 true を返す
tidyNode::getParent /// tidyNode tidyNode::getParent ( void )\nカレントノードの親ノードを返す
token_get_all /// array token_get_all ( string $source )\n指定したソースを PHP トークンに分割する
token_name /// string token_name ( int $token )\n指定した PHP トークンのシンボル名を取得する
base64_decode /// string base64_decode ( string $data [, bool $strict= false ] )\nMIME base64 方式によりエンコードされたデータをデコードする
base64_encode /// string base64_encode ( string $data )\nMIME base64 方式でデータをエンコードする
get_headers /// array get_headers ( string $url [, int $format= 0 ] )\nHTTP リクエストに対するレスポンス内で サーバによって送出された全てのヘッダを取得する
get_meta_tags /// array get_meta_tags ( string $filename [, bool $use_include_path= false ] )\nファイル上のすべてのメタタグ情報を配列に展開する
http_build_query /// string http_build_query ( array $formdata [, string $numeric_prefix [, string $arg_separator ]] )\nURL エンコードされたクエリ文字列を生成する
parse_url /// mixed parse_url ( string $url [, int $component= -1 ] )\nURL を解釈し、その構成要素を返す
rawurldecode /// string rawurldecode ( string $str )\nURL エンコードされた文字列をデコードする
rawurlencode /// string rawurlencode ( string $str )\nRFC 1738 に基づき URL エンコードを行う
urldecode /// string urldecode ( string $str )\nURL エンコードされた文字列をデコードする
urlencode /// string urlencode ( string $str )\n文字列を URL エンコードする
curl_close /// void curl_close ( resource $ch )\ncURL セッションを閉じる
curl_copy_handle /// resource curl_copy_handle ( resource $ch )\ncURL ハンドルを、その設定も含めてコピーする
curl_errno /// int curl_errno ( resource $ch )\n直近のエラー番号を返す
curl_error /// string curl_error ( resource $ch )\n現在のセッションに関する直近のエラー文字列を返す
curl_exec /// mixed curl_exec ( resource $ch )\ncURL セッションを実行する
curl_getinfo /// mixed curl_getinfo ( resource $ch [, int $opt= 0 ] )\n指定した伝送に関する情報を得る
curl_init /// resource curl_init ([ string $url= NULL ] )\ncURL セッションを初期化する
curl_multi_add_handle /// int curl_multi_add_handle ( resource $mh , resource $ch )\ncURL マルチハンドルに、通常の cURL ハンドルを追加する
curl_multi_close /// void curl_multi_close ( resource $mh )\ncURL ハンドルのセットを閉じる
curl_multi_exec /// int curl_multi_exec ( resource $mh , int &$still_running )\n現在の cURL ハンドルから、サブ接続を実行する
curl_multi_getcontent /// string curl_multi_getcontent ( resource $ch )\nCURLOPT_RETURNTRANSFER が設定されている場合に、cURL ハンドルの内容を返す
curl_multi_info_read /// array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue= NULL ] )\n現在の転送についての情報を表示する
curl_multi_init /// resource curl_multi_init ( void )\n新規 cURL マルチハンドルを返す
curl_multi_remove_handle /// int curl_multi_remove_handle ( resource $mh , resource $ch )\ncURL ハンドルのセットからマルチハンドルを削除する
curl_multi_select /// int curl_multi_select ( resource $mh [, float $timeout= 1.0 ] )\ncURL 拡張モジュールに関連付けられているすべてのソケットを取得し、「選択可能な」状態にする
curl_setopt_array /// bool curl_setopt_array ( resource $ch , array $options )\nCURL 転送用の複数のオプションを設定する
curl_setopt /// bool curl_setopt ( resource $ch , int $option , mixed $value )\ncURL 転送用オプションを設定する
curl_version /// array curl_version ([ int $age= CURLVERSION_NOW ] )\ncURL のバージョンを返す
fam_cancel_monitor /// bool fam_cancel_monitor ( resource $fam , resource $fam_monitor )\n監視を終了する
fam_close /// void fam_close ( resource $fam )\nFAM 接続を閉じる
fam_monitor_collection /// resource fam_monitor_collection ( resource $fam , string $dirname , int $depth , string $mask )\n指定したディレクトリにあるファイルの変更を監視する
fam_monitor_directory /// resource fam_monitor_directory ( resource $fam , string $dirname )\nディレクトリの変更を監視する
fam_monitor_file /// resource fam_monitor_file ( resource $fam , string $filename )\n通常のファイルの変更を監視する
fam_next_event /// array fam_next_event ( resource $fam )\n次の待機中の FAM イベントを返す
fam_open /// resource fam_open ([ string $appname ] )\nFAM デーモンへの接続をオープンする
fam_pending /// int fam_pending ( resource $fam )\n待機中の FAM イベントの有無を調べる
fam_resume_monitor /// bool fam_resume_monitor ( resource $fam , resource $fam_monitor )\n中断された監視処理を再開する
fam_suspend_monitor /// bool fam_suspend_monitor ( resource $fam , resource $fam_monitor )\n監視を一時的に中断する
ftp_alloc /// bool ftp_alloc ( resource $ftp_stream , int $filesize [, string &$result ] )\nアップロードされるファイルのためのスペースを確保する
ftp_cdup /// bool ftp_cdup ( resource $ftp_stream )\n親ディレクトリに移動する
ftp_chdir /// bool ftp_chdir ( resource $ftp_stream , string $directory )\nFTP サーバ上でディレクトリを移動する
ftp_chmod /// int ftp_chmod ( resource $ftp_stream , int $mode , string $filename )\nFTP 経由でファイルのパーミッションを設定する
ftp_close /// bool ftp_close ( resource $ftp_stream )\nFTP 接続を閉じる
ftp_connect /// resource ftp_connect ( string $host [, int $port= 21 [, int $timeout= 90 ]] )\nFTP 接続をオープンする
ftp_delete /// bool ftp_delete ( resource $ftp_stream , string $path )\nFTP サーバ上のファイルを削除する
ftp_exec /// bool ftp_exec ( resource $ftp_stream , string $command )\nFTP サーバ上でのコマンドの実行をリクエストする
ftp_fget /// bool ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos= 0 ] )\nFTP サーバからファイルをダウンロードし、オープン中のファイルに保存する
ftp_fput /// bool ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos= 0 ] )\nオープン中のファイルを FTP サーバにアップロードする
ftp_get_option /// mixed ftp_get_option ( resource $ftp_stream , int $option )\nカレント FTP ストリームでの種々の実行時動作を取得する
ftp_get /// bool ftp_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos= 0 ] )\nFTP サーバからファイルをダウンロードする
ftp_login /// bool ftp_login ( resource $ftp_stream , string $username , string $password )\nFTP 接続にログインする
ftp_mdtm /// int ftp_mdtm ( resource $ftp_stream , string $remote_file )\n指定したファイルが最後に更新された時刻を返す
ftp_mkdir /// string ftp_mkdir ( resource $ftp_stream , string $directory )\nディレクトリを作成する
ftp_nb_continue /// int ftp_nb_continue ( resource $ftp_stream )\nファイルの取得/送信を継続する（非ブロッキング）
ftp_nb_fget /// int ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos= 0 ] )\nFTP サーバからファイルをダウンロードし、オープン中のファイルに保存する（非ブロッキング）
ftp_nb_fput /// int ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos= 0 ] )\nオープン中のファイルを FTP サーバに保存する（非ブロッキング）
ftp_nb_get /// int ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos= 0 ] )\nFTP サーバからファイルを取得し、ローカルファイルに書き込む（非ブロッキング）
ftp_nb_put /// int ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos= 0 ] )\nFTP サーバにファイルを保存する（非ブロッキング）
ftp_nlist /// array ftp_nlist ( resource $ftp_stream , string $directory )\n指定したディレクトリのファイルの一覧を返す
ftp_pasv /// bool ftp_pasv ( resource $ftp_stream , bool $pasv )\nパッシブモードをオンまたはオフにする
ftp_put /// bool ftp_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos= 0 ] )\nFTP サーバにファイルをアップロードする
ftp_pwd /// string ftp_pwd ( resource $ftp_stream )\nカレントのディレクトリ名を返す
ftp_quit /// ftp_close のエイリアス
ftp_raw /// array ftp_raw ( resource $ftp_stream , string $command )\nFTP サーバに任意のコマンドを送信する
ftp_rawlist /// array ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive= false ] )\n指定したディレクトリの詳細なファイル一覧を返す
ftp_rename /// bool ftp_rename ( resource $ftp_stream , string $oldname , string $newname )\nFTP サーバ上のファイルまたはディレクトリの名前を変更する
ftp_rmdir /// bool ftp_rmdir ( resource $ftp_stream , string $directory )\nディレクトリを削除する
ftp_set_option /// bool ftp_set_option ( resource $ftp_stream , int $option , mixed $value )\nさまざまな FTP 実行時オプションを設定する
ftp_site /// bool ftp_site ( resource $ftp_stream , string $command )\nSITEコマンドをサーバに送信する
ftp_size /// int ftp_size ( resource $ftp_stream , string $remote_file )\n指定したファイルのサイズを返す
ftp_ssl_connect /// resource ftp_ssl_connect ( string $host [, int $port= 21 [, int $timeout= 90 ]] )\nセキュアな SSL-FTP 接続をオープンする
ftp_systype /// string ftp_systype ( resource $ftp_stream )\nリモート FTP サーバのシステム型 ID を返す
hw_Array2Objrec /// string hw_array2objrec ( array $object_array )\nオブジェクト配列からオブジェクトレコードに属性を変換する
hw_changeobject /// bool hw_changeobject ( int $link , int $objid , array $attributes )\nオブジェクトの属性を変更する(古い関数)
hw_Children /// array hw_children ( int $connection , int $objectID )\n子のオブジェクト ID
hw_ChildrenObj /// array hw_childrenobj ( int $connection , int $objectID )\n子のオブジェクトレコード
hw_Close /// bool hw_close ( int $connection )\nHyperwave 接続を閉じる
hw_Connect /// int hw_connect ( string $host , int $port [, string $username ], string $password )\n接続をオープンする
hw_connection_info /// void hw_connection_info ( int $link )\nHyperwave サーバへの接続に関する情報を出力する
hw_cp /// int hw_cp ( int $connection , array $object_id_array , int $destination_id )\nオブジェクトをコピーする
hw_Deleteobject /// bool hw_deleteobject ( int $connection , int $object_to_delete )\nオブジェクトを削除する
hw_DocByAnchor /// int hw_docbyanchor ( int $connection , int $anchorID )\nアンカーに属するオブジェクトのオブジェクト ID
hw_DocByAnchorObj /// string hw_docbyanchorobj ( int $connection , int $anchorID )\nアンカーが指すオブジェクトレコード
hw_Document_Attributes /// string hw_document_attributes ( int $hw_document )\nhw_document のオブジェクトレコード
hw_Document_BodyTag /// string hw_document_bodytag ( int $hw_document [, string $prefix ] )\nhw_document の BODY タグ
hw_Document_Content /// string hw_document_content ( int $hw_document )\nhw_document の内容を返す
hw_Document_SetContent /// bool hw_document_setcontent ( int $hw_document , string $content )\nhw_document の内容を設定/置換する
hw_Document_Size /// int hw_document_size ( int $hw_document )\nhw_document のサイズ
hw_dummy /// string hw_dummy ( int $link , int $id , int $msgid )\nHyperwave ダミー関数
hw_EditText /// bool hw_edittext ( int $connection , int $hw_document )\nテキストドキュメントを取得する
hw_Error /// int hw_error ( int $connection )\nエラー番号
hw_ErrorMsg /// string hw_errormsg ( int $connection )\nエラーメッセージを返す
hw_Free_Document /// bool hw_free_document ( int $hw_document )\nhw_document を解放する
hw_GetAnchors /// array hw_getanchors ( int $connection , int $objectID )\nドキュメントのアンカーのオブジェクト ID
hw_GetAnchorsObj /// array hw_getanchorsobj ( int $connection , int $objectID )\nドキュメントのアンカーのオブジェクトレコード
hw_GetAndLock /// string hw_getandlock ( int $connection , int $objectID )\nオブジェクトレコードを返しおよびオブジェクトをロックする
hw_GetChildColl /// array hw_getchildcoll ( int $connection , int $objectID )\n子のコレクションのオブジェクト ID
hw_GetChildCollObj /// array hw_getchildcollobj ( int $connection , int $objectID )\n子のコレクションのオブジェクトレコード
hw_GetChildDocColl /// array hw_getchilddoccoll ( int $connection , int $objectID )\nコレクションの子ドキュメントのオブジェクト ID
hw_GetChildDocCollObj /// array hw_getchilddoccollobj ( int $connection , int $objectID )\nコレクションの子ドキュメントのオブジェクトレコード
hw_GetObject /// mixed hw_getobject ( int $connection , mixed $objectID [, string $query ] )\nオブジェクトレコード
hw_GetObjectByQuery /// array hw_getobjectbyquery ( int $connection , string $query , int $max_hits )\nオブジェクトを検索する
hw_GetObjectByQueryColl /// array hw_getobjectbyquerycoll ( int $connection , int $objectID , string $query , int $max_hits )\nコレクションのオブジェクトを検索する
hw_GetObjectByQueryCollObj /// array hw_getobjectbyquerycollobj ( int $connection , int $objectID , string $query , int $max_hits )\nコレクションのオブジェクトを検索する
hw_GetObjectByQueryObj /// array hw_getobjectbyqueryobj ( int $connection , string $query , int $max_hits )\nオブジェクトを検索する
hw_GetParents /// array hw_getparents ( int $connection , int $objectID )\n親のオブジェクト ID
hw_GetParentsObj /// array hw_getparentsobj ( int $connection , int $objectID )\n親のオブジェクトレコード
hw_getrellink /// string hw_getrellink ( int $link , int $rootid , int $sourceid , int $destid )\nrootid に相対的な source から dest へのリンクを得る
hw_GetRemote /// int hw_getremote ( int $connection , int $objectID )\nリモートドキュメントを得る
hw_getremotechildren /// mixed hw_getremotechildren ( int $connection , string $object_record )\nリモートドキュメントの子を得る
hw_GetSrcByDestObj /// array hw_getsrcbydestobj ( int $connection , int $objectID )\nオブジェクトを指すアンカーを返す
hw_GetText /// int hw_gettext ( int $connection , int $objectID [, mixed $rootID/prefix ] )\nテキストドキュメントを取得する
hw_getusername /// string hw_getusername ( int $connection )\n現在ログインしているユーザーの名前
hw_Identify /// string hw_identify ( int $link , string $username , string $password )\nユーザとして認証する
hw_InCollections /// array hw_incollections ( int $connection , array $object_id_array , array $collection_id_array , int $return_collections )\nコレクションにオブジェクト ID があるかどうかを確認する
hw_Info /// string hw_info ( int $connection )\n接続に関する情報
hw_InsColl /// int hw_inscoll ( int $connection , int $objectID , array $object_array )\nコレクションを挿入する
hw_InsDoc /// int hw_insdoc ( resource $connection , int $parentID , string $object_record [, string $text ] )\nドキュメントを挿入する
hw_insertanchors /// bool hw_insertanchors ( int $hwdoc , array $anchorecs , array $dest [, array $urlprefixes ] )\nテキストにアンカーのみを挿入する
hw_InsertDocument /// int hw_insertdocument ( int $connection , int $parent_id , int $hw_document )\nドキュメントをアップロードする
hw_InsertObject /// int hw_insertobject ( int $connection , string $object_rec , string $parameter )\nオブジェクトレコードを挿入する
hw_mapid /// int hw_mapid ( int $connection , int $server_id , int $object_id )\nグローバル ID を仮想的なローカル ID に割りつける
hw_Modifyobject /// bool hw_modifyobject ( int $connection , int $object_to_change , array $remove , array $add [, int $mode ] )\nオブジェクトレコードを修正する
hw_mv /// int hw_mv ( int $connection , array $object_id_array , int $source_id , int $destination_id )\nオブジェクトを移動する
hw_New_Document /// int hw_new_document ( string $object_record , string $document_data , int $document_size )\n新しいドキュメントを作成する
hw_objrec2array /// array hw_objrec2array ( string $object_record [, array $format ] )\n属性をオブジェクトレコードからオブジェクト配列に変換する
hw_Output_Document /// bool hw_output_document ( int $hw_document )\nhw_document を出力する
hw_pConnect /// int hw_pconnect ( string $host , int $port [, string $username ], string $password )\n持続的データベース接続を作成する
hw_PipeDocument /// int hw_pipedocument ( int $connection , int $objectID [, array $url_prefixes ] )\nドキュメントを取得する
hw_Root /// int hw_root ( void )\nルートオブジェクト ID
hw_setlinkroot /// int hw_setlinkroot ( int $link , int $rootid )\n計算されたリンクの ID を設定する
hw_stat /// string hw_stat ( int $link )\nステータス文字列を返す
hw_Unlock /// bool hw_unlock ( int $connection , int $objectID )\nオブジェクトをアンロックする
hw_Who /// array hw_who ( int $connection )\n現在ログイン中のユーザのリスト
hw_api_attribute->key /// string key ( void )\n属性のキーを返す
hw_api_attribute->langdepvalue /// string langdepvalue ( string $language )\n指定した言語の値を返す
hw_api_attribute->value /// string value ( void )\n属性の値を返す
hw_api_attribute->values /// array values ( void )\n属性のすべての値を返す
hw_api_attribute /// HW_API_Attribute hw_api_attribute ([ string $name [, string $value ]] )\nhw_api_attribute クラスのインスタンスを作成する
hw_api->checkin /// bool checkin ( array $parameter )\nオブジェクトをチェックインする
hw_api->checkout /// bool checkout ( array $parameter )\nオブジェクトをチェックアウトする
hw_api->children /// array children ( array $parameter )\nオブジェクトの子を返す
hw_api_content->mimetype /// string mimetype ( void )\nmimetype を返す
hw_api_content->read /// string read ( string $buffer , int $len )\nコンテンツを読み込む
hw_api->content /// HW_API_Content content ( array $parameter )\nオブジェクトのコンテンツを返す
hw_api->copy /// hw_api_content copy ( array $parameter )\n物理的にコピーする
hw_api->dbstat /// hw_api_object dbstat ( array $parameter )\nデータベースサーバの統計情報を返す
hw_api->dcstat /// hw_api_object dcstat ( array $parameter )\n文書キャッシュサーバの統計情報を返す
hw_api->dstanchors /// array dstanchors ( array $parameter )\nすべての対象アンカーの一覧を返す
hw_api->dstofsrcanchor /// hw_api_object dstofsrcanchor ( array $parameter )\nソースアンカーの対象を返す
hw_api_error->count /// int count ( void )\n原因の数を返す
hw_api_error->reason /// HW_API_Reason reason ( void )\nエラーの原因を返す
hw_api->find /// array find ( array $parameter )\nオブジェクトを検索する
hw_api->ftstat /// hw_api_object ftstat ( array $parameter )\nフルテキストサーバの統計情報を返す
hwapi_hgcsp /// HW_API hwapi_hgcsp ( string $hostname [, int $port ] )\nhw_api クラスのオブジェクトを返す
hw_api->hwstat /// hw_api_object hwstat ( array $parameter )\nHyperwave サーバについての統計情報を返す
hw_api->identify /// bool identify ( array $parameter )\nHyperwave サーバにログインする
hw_api->info /// array info ( array $parameter )\nサーバ設定についての情報を返す
hw_api->insert /// hw_api_object insert ( array $parameter )\n新しいオブジェクトを挿入する
hw_api->insertanchor /// hw_api_object insertanchor ( array $parameter )\nアンカー型の新しいオブジェクトを挿入する
hw_api->insertcollection /// hw_api_object insertcollection ( array $parameter )\nコレクション型の新しいオブジェクトを挿入する
hw_api->insertdocument /// hw_api_object insertdocument ( array $parameter )\n文書型の新しいオブジェクトを挿入する
hw_api->link /// bool link ( array $parameter )\nオブジェクトへのリンクを作成する
hw_api->lock /// bool lock ( array $parameter )\nオブジェクトをロックする
hw_api->move /// bool move ( array $parameter )\nコレクション間でオブジェクトを移動する
hw_api_content /// HW_API_Content hw_api_content ( string $content , string $mimetype )\nhw_api_content クラスの新しいインスタンスを作成する
hw_api_object->assign /// bool assign ( array $parameter )\nオブジェクトを複製する
hw_api_object->attreditable /// bool attreditable ( array $parameter )\n属性が編集可能かどうかを調べる
hw_api_object->count /// int count ( array $parameter )\n属性の数を返す
hw_api_object->insert /// bool insert ( HW_API_Attribute $attribute )\n新しい属性を挿入する
hw_api_object /// hw_api_object hw_api_object ( array $parameter )\nhw_api_object クラスの新しいインスタンスを作成する
hw_api_object->remove /// bool remove ( string $name )\n属性を削除する
hw_api_object->title /// string title ( array $parameter )\ntitle 属性を返す
hw_api_object->value /// string value ( string $name )\n属性の値を返す
hw_api->object /// hw_api_object object ( array $parameter )\n属性の情報を取得する
hw_api->objectbyanchor /// hw_api_object objectbyanchor ( array $parameter )\nアンカーが所属しているオブジェクトを返す
hw_api->parents /// array parents ( array $parameter )\nオブジェクトの親を返す
hw_api_reason->description /// string description ( void )\n原因の説明を返す
hw_api_reason->type /// HW_API_Reason type ( void )\n原因の型を返す
hw_api->remove /// bool remove ( array $parameter )\nオブジェクトを削除する
hw_api->replace /// hw_api_object replace ( array $parameter )\nオブジェクトを置き換える
hw_api->setcommittedversion /// hw_api_object setcommittedversion ( array $parameter )\n最後のバージョン以外のバージョンをコミットする
hw_api->srcanchors /// array srcanchors ( array $parameter )\nソースアンカーの一覧を返す
hw_api->srcsofdst /// array srcsofdst ( array $parameter )\n対象オブジェクトのソースを返す
hw_api->unlock /// bool unlock ( array $parameter )\nオブジェクトのロックを解除する
hw_api->user /// hw_api_object user ( array $parameter )\n自分自身のユーザオブジェクトを返す
hw_api->userlist /// array userlist ( array $parameter )\nログイン中の全ユーザの一覧を返す
HttpDeflateStream::__construct /// public void HttpDeflateStream::__construct ([ int $flags= 0 ] )\nHttpDeflateStream クラスのコンストラクタ
HttpDeflateStream::factory /// public HttpDeflateStream HttpDeflateStream::factory ([ int $flags= 0 [, string $class_name= "HttpDeflateStream" ]] )\nHttpDeflateStream クラスのファクトリ
HttpDeflateStream::finish /// public string HttpDeflateStream::finish ([ string $data ] )\n圧縮ストリームを終了する
HttpDeflateStream::flush /// public string HttpDeflateStream::flush ([ string $data ] )\n圧縮ストリームをフラッシュする
HttpDeflateStream::update /// public string HttpDeflateStream::update ( string $data )\n圧縮ストリームを更新する
HttpInflateStream::__construct /// public void HttpInflateStream::__construct ([ int $flags= 0 ] )\nHttpInflateStream クラスのコンストラクタ
HttpInflateStream::factory /// public HttpInflateStream HttpInflateStream::factory ([ int $flags= 0 [, string $class_name= "HttpInflateStream" ]] )\nHttpInflateStream クラスのファクトリ
HttpInflateStream::finish /// public string HttpInflateStream::finish ([ string $data ] )\n展開ストリームを終了する
HttpInflateStream::flush /// public string HttpInflateStream::flush ([ string $data ] )\n展開ストリームをフラッシュする
HttpInflateStream::update /// public string HttpInflateStream::update ( string $data )\n展開ストリームを更新する
HttpMessage::addHeaders /// public void HttpMessage::addHeaders ( array $headers [, bool $append= false ] )\nヘッダを追加する
HttpMessage::__construct /// public void HttpMessage::__construct ([ string $message ] )\nHttpMessage のコンストラクタ
HttpMessage::detach /// public HttpMessage HttpMessage::detach ( void )\nHttpMessage をデタッチする
HttpMessage::factory /// static public HttpMessage HttpMessage::factory ([ string $raw_message [, string $class_name= "HttpMessage" ]] )\n文字列から HttpMessage を作成する
HttpMessage::fromEnv /// static public HttpMessage HttpMessage::fromEnv ( int $message_type [, string $class_name= "HttpMessage" ] )\n環境から HttpMessage を作成する
HttpMessage::fromString /// static public HttpMessage HttpMessage::fromString ([ string $raw_message [, string $class_name= "HttpMessage" ]] )\n文字列から HttpMessage を作成する
HttpMessage::getBody /// public string HttpMessage::getBody ( void )\nメッセージの本文を取得する
HttpMessage::getHeader /// public string HttpMessage::getHeader ( string $header )\nヘッダを取得する
HttpMessage::getHeaders /// public array HttpMessage::getHeaders ( void )\nメッセージのヘッダを取得する
HttpMessage::getHttpVersion /// public string HttpMessage::getHttpVersion ( void )\nHTTP バージョンを取得する
HttpMessage::getParentMessage /// public HttpMessage HttpMessage::getParentMessage ( void )\n親メッセージを取得する
HttpMessage::getRequestMethod /// public string HttpMessage::getRequestMethod ( void )\nリクエストメソッドを取得する
HttpMessage::getRequestUrl /// public string HttpMessage::getRequestUrl ( void )\nリクエスト URL を取得する
HttpMessage::getResponseCode /// public int HttpMessage::getResponseCode ( void )\nレスポンスコードを取得する
HttpMessage::getResponseStatus /// public string HttpMessage::getResponseStatus ( void )\nレスポンスのステータスを取得する
HttpMessage::getType /// public int HttpMessage::getType ( void )\nメッセージの型を取得する
HttpMessage::guessContentType /// public string HttpMessage::guessContentType ( string $magic_file [, int $magic_mode= MAGIC_MIME ] )\ncontent type を推測する
HttpMessage::prepend /// public void HttpMessage::prepend ( HttpMessage $message [, bool $top= true ] )\nメッセージを先頭に追加する
HttpMessage::reverse /// public HttpMessage HttpMessage::reverse ( void )\nメッセージチェインを逆順にする
HttpMessage::send /// public bool HttpMessage::send ( void )\nメッセージを送信する
HttpMessage::setBody /// public void HttpMessage::setBody ( string $body )\nメッセージの本文を設定する
HttpMessage::setHeaders /// public void HttpMessage::setHeaders ( array $headers )\nヘッダを設定する
HttpMessage::setHttpVersion /// public bool HttpMessage::setHttpVersion ( string $version )\nHTTP バージョンを設定する
HttpMessage::setRequestMethod /// public bool HttpMessage::setRequestMethod ( string $method )\nリクエストメソッドを設定する
HttpMessage::setRequestUrl /// public bool HttpMessage::setRequestUrl ( string $url )\nリクエスト URL を設定する
HttpMessage::setResponseCode /// public bool HttpMessage::setResponseCode ( int $code )\nレスポンスコードを設定する
HttpMessage::setResponseStatus /// public bool HttpMessage::setResponseStatus ( string $status )\nレスポンスのステータスを設定する
HttpMessage::setType /// public void HttpMessage::setType ( int $type )\nメッセージの型を設定する
HttpMessage::toMessageTypeObject /// public HttpRequest|HttpResponse HttpMessage::toMessageTypeObject ( void )\nメッセージの型に応じた HTTP オブジェクトを作成する
HttpMessage::toString /// public string HttpMessage::toString ([ bool $include_parent= false ] )\n文字列表現を取得する
HttpQueryString::__construct /// final public void HttpQueryString::__construct ([ bool $global= true [, mixed $add ]] )\nHttpQueryString のコンストラクタ
HttpQueryString::get /// public mixed HttpQueryString::get ([ string $key [, mixed $type= 0 [, mixed $defval= NULL [, bool $delete= false ]]]] )\nクエリ文字列 (の一部) を取得する
HttpQueryString::mod /// public HttpQueryString HttpQueryString::mod ( mixed $params )\nクエリ文字列の複製を変更する
HttpQueryString::set /// public string HttpQueryString::set ( mixed $params )\nクエリ文字列パラメータを設定する
HttpQueryString::singleton /// static public HttpQueryString HttpQueryString::singleton ([ bool $global= true ] )\nHttpQueryString のシングルトン
HttpQueryString::toArray /// public array HttpQueryString::toArray ( void )\nクエリ文字列を配列で取得する
HttpQueryString::toString /// public string HttpQueryString::toString ( void )\nクエリ文字列を取得する
HttpQueryString::xlate /// public bool HttpQueryString::xlate ( string $ie , string $oe )\nクエリ文字列の文字セットを変更する
HttpRequest::addCookies /// public bool HttpRequest::addCookies ( array $cookies )\nクッキーを追加する
HttpRequest::addHeaders /// public bool HttpRequest::addHeaders ( array $headers )\nヘッダを追加する
HttpRequest::addPostFields /// public bool HttpRequest::addPostFields ( array $post_data )\nPOST フィールドを追加する
HttpRequest::addPostFile /// public bool HttpRequest::addPostFile ( string $name , string $file [, string $content_type= "application/x-octetstream" ] )\nPOST ファイルを追加する
HttpRequest::addPutData /// public bool HttpRequest::addPutData ( string $put_data )\nPUT データを追加する
HttpRequest::addQueryData /// public bool HttpRequest::addQueryData ( array $query_params )\nクエリデータを追加する
HttpRequest::addRawPostData /// public bool HttpRequest::addRawPostData ( string $raw_post_data )\n生の POST データを追加する
HttpRequest::addSslOptions /// public bool HttpRequest::addSslOptions ( array $options )\nSSL オプションを追加する
HttpRequest::clearHistory /// public void HttpRequest::clearHistory ( void )\n履歴を消去する
HttpRequest::__construct /// public void HttpRequest::__construct ([ string $url [, int $request_method= HTTP_METH_GET [, array $options ]]] )\nHttpRequest のコンストラクタ
HttpRequest::enableCookies /// public bool HttpRequest::enableCookies ( void )\nクッキーを有効にする
HttpRequest::getContentType /// public string HttpRequest::getContentType ( void )\ncontent type を取得する
HttpRequest::getCookies /// public array HttpRequest::getCookies ( void )\nクッキーを取得する
HttpRequest::getHeaders /// public array HttpRequest::getHeaders ( void )\nヘッダを取得する
HttpRequest::getHistory /// public HttpMessage HttpRequest::getHistory ( void )\n履歴を取得する
HttpRequest::getMethod /// public int HttpRequest::getMethod ( void )\nメソッドを取得する
HttpRequest::getOptions /// public array HttpRequest::getOptions ( void )\nオプションを取得する
HttpRequest::getPostFields /// public array HttpRequest::getPostFields ( void )\nPOST フィールドを取得する
HttpRequest::getPostFiles /// public array HttpRequest::getPostFiles ( void )\nPOST ファイルを取得する
HttpRequest::getPutData /// public string HttpRequest::getPutData ( void )\nPUT データを取得する
HttpRequest::getPutFile /// public string HttpRequest::getPutFile ( void )\nPUT ファイルを取得する
HttpRequest::getQueryData /// public string HttpRequest::getQueryData ( void )\nクエリデータを取得する
HttpRequest::getRawPostData /// public string HttpRequest::getRawPostData ( void )\n生の POST データを取得する
HttpRequest::getRawRequestMessage /// public string HttpRequest::getRawRequestMessage ( void )\n名前のリクエストメッセージを取得する
HttpRequest::getRawResponseMessage /// public string HttpRequest::getRawResponseMessage ( void )\n生のレスポンスメッセージを取得する
HttpRequest::getRequestMessage /// public HttpMessage HttpRequest::getRequestMessage ( void )\nリクエストメッセージを取得する
HttpRequest::getResponseBody /// public string HttpRequest::getResponseBody ( void )\nレスポンスの本文を取得する
HttpRequest::getResponseCode /// public int HttpRequest::getResponseCode ( void )\nレスポンスコードを取得する
HttpRequest::getResponseCookies /// public array HttpRequest::getResponseCookies ([ int $flags [, array $allowed_extras ]] )\nレスポンスのクッキーを取得する
HttpRequest::getResponseData /// public array HttpRequest::getResponseData ( void )\nレスポンスデータを取得する
HttpRequest::getResponseHeader /// public mixed HttpRequest::getResponseHeader ([ string $name ] )\nレスポンスヘッダを取得する
HttpRequest::getResponseInfo /// public mixed HttpRequest::getResponseInfo ([ string $name ] )\nレスポンスの情報を取得する
HttpRequest::getResponseMessage /// public HttpMessage HttpRequest::getResponseMessage ( void )\nレスポンスメッセージを取得する
HttpRequest::getResponseStatus /// public string HttpRequest::getResponseStatus ( void )\nレスポンスのステータスを取得する
HttpRequest::getSslOptions /// public array HttpRequest::getSslOptions ( void )\nssl オプションを取得する
HttpRequest::getUrl /// public string HttpRequest::getUrl ( void )\nurl を取得する
HttpRequest::resetCookies /// public bool HttpRequest::resetCookies ([ bool $session_only= false ] )\nクッキーをリセットする
HttpRequest::send /// public HttpMessage HttpRequest::send ( void )\nリクエストを送信する
HttpRequest::setContentType /// public bool HttpRequest::setContentType ( string $content_type )\ncontent type を設定する
HttpRequest::setCookies /// public bool HttpRequest::setCookies ([ array $cookies ] )\nクッキーを設定する
HttpRequest::setHeaders /// public bool HttpRequest::setHeaders ([ array $headers ] )\nヘッダを設定する
HttpRequest::setMethod /// public bool HttpRequest::setMethod ( int $request_method )\nメソッドを設定する
HttpRequest::setOptions /// public bool HttpRequest::setOptions ([ array $options ] )\nオプションを設定する
HttpRequest::setPostFields /// public bool HttpRequest::setPostFields ( array $post_data )\nPOST フィールドを設定する
HttpRequest::setPostFiles /// public bool HttpRequest::setPostFiles ( array $post_files )\nPOST ファイルを設定する
HttpRequest::setPutData /// public bool HttpRequest::setPutData ([ string $put_data ] )\nPUT データを設定する
HttpRequest::setPutFile /// public bool HttpRequest::setPutFile ([ string $file ] )\nPUT ファイルを設定する
HttpRequest::setQueryData /// public bool HttpRequest::setQueryData ( mixed $query_data )\nクエリデータを設定する
HttpRequest::setRawPostData /// public bool HttpRequest::setRawPostData ([ string $raw_post_data ] )\n生の POST データを設定する
HttpRequest::setSslOptions /// public bool HttpRequest::setSslOptions ([ array $options ] )\nSSL オプションを設定する
HttpRequest::setUrl /// public bool HttpRequest::setUrl ( string $url )\nURL を設定する
HttpRequestPool::attach /// public bool HttpRequestPool::attach ( HttpRequest $request )\nHttpRequest をアタッチする
HttpRequestPool::__construct /// void HttpRequestPool::__construct ([ HttpRequest $request ] )\nHttpRequestPool のコンストラクタ
HttpRequestPool::__destruct /// void HttpRequestPool::__destruct ( void )\nHttpRequestPool のデストラクタ
HttpRequestPool::detach /// bool HttpRequestPool::detach ( HttpRequest $request )\nHttpRequest をデタッチする
HttpRequestPool::getAttachedRequests /// array HttpRequestPool::getAttachedRequests ( void )\nアタッチされているリクエストを取得する
HttpRequestPool::getFinishedRequests /// array HttpRequestPool::getFinishedRequests ( void )\n終了したリクエストを取得する
HttpRequestPool::reset /// void HttpRequestPool::reset ( void )\nリクエストプールをリセットする
HttpRequestPool::send /// bool HttpRequestPool::send ( void )\nすべてのリクエストを送信する
HttpRequestPool::socketPerform /// protected bool HttpRequestPool::socketPerform ( void )\nソケットアクションを実行する
HttpRequestPool::socketSelect /// protected bool HttpRequestPool::socketSelect ( void )\nソケットの選択を実行する
HttpResponse::capture /// static void HttpResponse::capture ( void )\nスクリプトの出力を取り込む
HttpResponse::getBufferSize /// static int HttpResponse::getBufferSize ( void )\nバッファサイズを取得する
HttpResponse::getCache /// static bool HttpResponse::getCache ( void )\nキャッシュを取得する
HttpResponse::getCacheControl /// static string HttpResponse::getCacheControl ( void )\ncache control を取得する
HttpResponse::getContentDisposition /// static string HttpResponse::getContentDisposition ( void )\ncontent disposition を取得する
HttpResponse::getContentType /// static string HttpResponse::getContentType ( void )\ncontent type を取得する
HttpResponse::getData /// static string HttpResponse::getData ( void )\nデータを取得する
HttpResponse::getETag /// static string HttpResponse::getETag ( void )\nETag を取得する
HttpResponse::getFile /// static string HttpResponse::getFile ( void )\nファイルを取得する
HttpResponse::getGzip /// static bool HttpResponse::getGzip ( void )\ngzip を取得する
HttpResponse::getHeader /// static mixed HttpResponse::getHeader ([ string $name ] )\nヘッダを取得する
HttpResponse::getLastModified /// static int HttpResponse::getLastModified ( void )\n最終更新日時を取得する
HttpResponse::getRequestBody /// static string HttpResponse::getRequestBody ( void )\nリクエストの本文を取得する
HttpResponse::getRequestBodyStream /// static resource HttpResponse::getRequestBodyStream ( void )\nリクエストの本文をストリームとして取得する
HttpResponse::getRequestHeaders /// static array HttpResponse::getRequestHeaders ( void )\nリクエストのヘッダを取得する
HttpResponse::getStream /// static resource HttpResponse::getStream ( void )\nストリームを取得する
HttpResponse::getThrottleDelay /// static double HttpResponse::getThrottleDelay ( void )\nthrottle delay を取得する
HttpResponse::guessContentType /// static string HttpResponse::guessContentType ( string $magic_file [, int $magic_mode= MAGIC_MIME ] )\ncontent type を推測する
HttpResponse::redirect /// static void HttpResponse::redirect ([ string $url [, array $params [, bool $session= false [, int $status ]]]] )\nリダイレクトする
HttpResponse::send /// static bool HttpResponse::send ([ bool $clean_ob= true ] )\nレスポンスを送信する
HttpResponse::setBufferSize /// static bool HttpResponse::setBufferSize ( int $bytes )\nバッファサイズを設定する
HttpResponse::setCache /// static bool HttpResponse::setCache ( bool $cache )\nキャッシュを設定する
HttpResponse::setCacheControl /// static bool HttpResponse::setCacheControl ( string $control [, int $max_age= 0 [, bool $must_revalidate= true ]] )\ncache control を設定する
HttpResponse::setContentDisposition /// static bool HttpResponse::setContentDisposition ( string $filename [, bool $inline= false ] )\ncontent disposition を設定する
HttpResponse::setContentType /// static bool HttpResponse::setContentType ( string $content_type )\ncontent type を設定する
HttpResponse::setData /// static bool HttpResponse::setData ( mixed $data )\nデータを設定する
HttpResponse::setETag /// static bool HttpResponse::setETag ( string $etag )\nETag を設定する
HttpResponse::setFile /// static bool HttpResponse::setFile ( string $file )\nファイルを設定する
HttpResponse::setGzip /// static bool HttpResponse::setGzip ( bool $gzip )\ngzip を設定する
HttpResponse::setHeader /// static bool HttpResponse::setHeader ( string $name [, mixed $value [, bool $replace= true ]] )\nヘッダを設定する
HttpResponse::setLastModified /// static bool HttpResponse::setLastModified ( int $timestamp )\n最終更新日時を設定する
HttpResponse::setStream /// static bool HttpResponse::setStream ( resource $stream )\nストリームを設定する
HttpResponse::setThrottleDelay /// static bool HttpResponse::setThrottleDelay ( float $seconds )\nthrottle delay を設定する
HttpResponse::status /// static bool HttpResponse::status ( int $status )\nHTTP レスポンスステータスを送信する
http_cache_etag /// bool http_cache_etag ([ string $etag ] )\nETag でキャッシュする
http_cache_last_modified /// bool http_cache_last_modified ([ int $timestamp_or_expires ] )\n最終更新日時でキャッシュする
http_chunked_decode /// string http_chunked_decode ( string $encoded )\nchunked-encoded データをデコードする
http_deflate /// string http_deflate ( string $data [, int $flags= 0 ] )\nデータを圧縮する
http_inflate /// string http_inflate ( string $data )\nデータを展開する
http_build_cookie /// string http_build_cookie ( array $cookie )\nクッキー文字列を作成する
http_date /// string http_date ([ int $timestamp ] )\nHTTP の RFC に準拠した日付を作成する
http_get_request_body_stream /// resource http_get_request_body_stream ( void )\nリクエストの本文をストリームとして取得する
http_get_request_body /// string http_get_request_body ( void )\nリクエストの本文を文字列として取得する
http_get_request_headers /// array http_get_request_headers ( void )\nリクエストヘッダを配列として取得する
http_match_etag /// bool http_match_etag ( string $etag [, bool $for_range= false ] )\nETag を比較する
http_match_modified /// bool http_match_modified ([ int $timestamp [, bool $for_range= false ]] )\n最終更新日時を比較する
http_match_request_header /// bool http_match_request_header ( string $header , string $value [, bool $match_case= false ] )\n任意のヘッダを比較する
http_support /// int http_support ([ int $feature= 0 ] )\n組み込みの HTTP サポートを調べる
http_negotiate_charset /// string http_negotiate_charset ( array $supported [, array &$result ] )\nクライアントが希望している文字セットを選択する
http_negotiate_content_type /// string http_negotiate_content_type ( array $supported [, array &$result ] )\nクライアントが希望している content type を選択する
http_negotiate_language /// string http_negotiate_language ( array $supported [, array &$result ] )\nクライアントが希望している言語を選択する
ob_deflatehandler /// string ob_deflatehandler ( string $data , int $mode )\n圧縮出力ハンドラ
ob_etaghandler /// string ob_etaghandler ( string $data , int $mode )\nETag 出力ハンドラ
ob_inflatehandler /// string ob_inflatehandler ( string $data , int $mode )\n展開出力ハンドラ
http_parse_cookie /// object http_parse_cookie ( string $cookie [, int $flags [, array $allowed_extras ]] )\nHTTP クッキーをパースする
http_parse_headers /// array http_parse_headers ( string $header )\nHTTP ヘッダをパースする
http_parse_message /// object http_parse_message ( string $message )\nHTTP メッセージをパースする
http_parse_params /// object http_parse_params ( string $param [, int $flags= HTTP_PARAMS_DEFAULT ] )\nパラメータリストをパースする
http_persistent_handles_clean /// string http_persistent_handles_clean ([ string $ident ] )\n持続ハンドルを消去する
http_persistent_handles_count /// object http_persistent_handles_count ( void )\n持続ハンドルの状況
http_persistent_handles_ident /// string http_persistent_handles_ident ( string $ident )\n持続ハンドルの ident を取得/設定する
http_get /// string http_get ( string $url [, array $options [, array &$info ]] )\nGET リクエストを実行する
http_head /// string http_head ([ string $url [, array $options [, array &$info ]]] )\nHEAD リクエストを実行する
http_post_data /// string http_post_data ( string $url [, string $data [, array $options [, array &$info ]]] )\nエンコードされたデータを使用して POST リクエストを実行する
http_post_fields /// string http_post_fields ( string $url [, array $data [, array $files [, array $options [, array &$info ]]]] )\nエンコードされる前のデータを使用して POST リクエストを実行する
http_put_data /// string http_put_data ( string $url [, string $data [, array $options [, array &$info ]]] )\nデータを使用して PUT リクエストを実行する
http_put_file /// string http_put_file ( string $url [, string $file [, array $options [, array &$info ]]] )\nファイルを使用して PUT リクエストを実行する
http_put_stream /// string http_put_stream ( string $url [, resource $stream [, array $options [, array &$info ]]] )\nストリームを使用して PUT リクエストを実行する
http_request_body_encode /// string http_request_body_encode ( array $fields , array $files )\nリクエスト本文をエンコードする
http_request_method_exists /// int http_request_method_exists ( mixed $method )\nリクエストメソッドが存在するかどうかを調べる
http_request_method_name /// string http_request_method_name ( int $method )\nリクエストメソッド名を取得する
http_request_method_register /// int http_request_method_register ( string $method )\nリクエストメソッドを登録する
http_request_method_unregister /// bool http_request_method_unregister ( mixed $method )\nリクエストメソッドの登録を解除する
http_request /// string http_request ( int $method [, string $url [, string $body [, array $options [, array &$info ]]]] )\n独自のリクエストを実行する
http_redirect /// void http_redirect ([ string $url [, array $params [, bool $session= false [, int $status ]]]] )\nHTTP リダイレクトを発行する
http_send_content_disposition /// bool http_send_content_disposition ( string $filename [, bool $inline= false ] )\nContent-Disposition を送信する
http_send_content_type /// bool http_send_content_type ([ string $content_type= "application/x-octetstream" ] )\nContent-Type を送信する
http_send_data /// bool http_send_data ( string $data )\n任意のデータを送信する
http_send_file /// bool http_send_file ( string $file )\nファイルを送信する
http_send_last_modified /// bool http_send_last_modified ([ int $timestamp ] )\nLast-Modified を送信する
http_send_status /// bool http_send_status ( int $status )\nHTTP レスポンスステータスを送信する
http_send_stream /// bool http_send_stream ( resource $stream )\nストリームを送信する
http_throttle /// void http_throttle ([ float $sec [, int $bytes= 40960 ]] )\nHTTP 抑止処理
http_build_str /// string http_build_str ( array $query [, string $prefix [, string $arg_separator ]] )\nクエリ文字列を組み立てる
http_build_url /// string http_build_url ([ mixed $url [, mixed $parts [, int $flags= HTTP_URL_REPLACE [, array &$new_url ]]]] )\nURL を組み立てる
java_last_exception_clear /// void java_last_exception_clear ( void )\n直近の例外をクリアする
java_last_exception_get /// object java_last_exception_get ( void )\n直近の Java 例外を取得する
ldap_8859_to_t61 /// string ldap_8859_to_t61 ( string $value )\n8859 文字を t61 文字に変換する
ldap_add /// bool ldap_add ( resource $link_identifier , string $dn , array $entry )\nLDAP ディレクトリにエントリを付加する
ldap_bind /// bool ldap_bind ( resource $link_identifier [, string $bind_rdn= NULL [, string $bind_password= NULL ]] )\nLDAP ディレクトリにバインドする
ldap_close /// のエイリアス ldap_unbind
ldap_compare /// mixed ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value )\n指定した DN のエントリで見付かった属性の値を比較する
ldap_connect /// resource ldap_connect ([ string $hostname= NULL [, int $port= 389 ]] )\nLDAP サーバへ接続する
ldap_count_entries /// int ldap_count_entries ( resource $link_identifier , resource $result_identifier )\n検索結果のエントリ数を数える
ldap_delete /// bool ldap_delete ( resource $link_identifier , string $dn )\nディレクトリからエントリを削除する
ldap_dn2ufn /// string ldap_dn2ufn ( string $dn )\nDN をユーザに分かりやすい名前のフォーマットに変換する
ldap_err2str /// string ldap_err2str ( int $errno )\nLDAP のエラー番号をエラーメッセージ文字列に変換する
ldap_errno /// int ldap_errno ( resource $link_identifier )\n直近の LDAP コマンドの LDAP エラー番号を返す
ldap_error /// string ldap_error ( resource $link_identifier )\n直近の LDAP コマンドの LDAP エラーメッセージを返す
ldap_explode_dn /// array ldap_explode_dn ( string $dn , int $with_attrib )\nDN を構成要素ごとに分割する
ldap_first_attribute /// string ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier )\n最初の属性を返す
ldap_first_entry /// resource ldap_first_entry ( resource $link_identifier , resource $result_identifier )\n最初の結果 ID を返す
ldap_first_reference /// resource ldap_first_reference ( resource $link , resource $result )\n最初のリファレンスを返す
ldap_free_result /// bool ldap_free_result ( resource $result_identifier )\n結果メモリを開放する
ldap_get_attributes /// array ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier )\n検索結果エントリから属性を得る
ldap_get_dn /// string ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier )\n結果エントリから DN を得る
ldap_get_entries /// array ldap_get_entries ( resource $link_identifier , resource $result_identifier )\n全ての結果エントリを得る
ldap_get_option /// bool ldap_get_option ( resource $link_identifier , int $option , mixed &$retval )\n指定したオプションの現在の値を得る
ldap_get_values_len /// array ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute )\n結果エントリから全てのバイナリ値を得る
ldap_get_values /// array ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute )\n結果エントリから全ての値を得る
ldap_list /// resource ldap_list ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )\n単一階層の検索を行う
ldap_mod_add /// bool ldap_mod_add ( resource $link_identifier , string $dn , array $entry )\n現在の属性に属性を追加する
ldap_mod_del /// bool ldap_mod_del ( resource $link_identifier , string $dn , array $entry )\n現在の属性から属性を削除する
ldap_mod_replace /// bool ldap_mod_replace ( resource $link_identifier , string $dn , array $entry )\n属性を新規の値に置換する
ldap_modify /// bool ldap_modify ( resource $link_identifier , string $dn , array $entry )\nLDAP エントリを修正する
ldap_next_attribute /// string ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier )\n結果における次の属性を得る
ldap_next_entry /// resource ldap_next_entry ( resource $link_identifier , resource $result_entry_identifier )\n次の結果エントリを得る
ldap_next_reference /// resource ldap_next_reference ( resource $link , resource $entry )\n次のリファレンスを得る
ldap_parse_reference /// bool ldap_parse_reference ( resource $link , resource $entry , array &$referrals )\n参照エントリから情報を展開する
ldap_parse_result /// bool ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]] )\n結果から情報を展開する
ldap_read /// resource ldap_read ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )\nエントリを読み込む
ldap_rename /// bool ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn )\nエントリ名を修正する
ldap_sasl_bind /// bool ldap_sasl_bind ( resource $link [, string $binddn= NULL [, string $password= NULL [, string $sasl_mech= NULL [, string $sasl_realm= NULL [, string $sasl_authc_id= NULL [, string $sasl_authz_id= NULL [, string $props= NULL ]]]]]]] )\nSASL を使用して LDAP ディレクトリにバインドする
ldap_search /// resource ldap_search ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )\nLDAP ツリーを探索する
ldap_set_option /// bool ldap_set_option ( resource $link_identifier , int $option , mixed $newval )\n指定したオプションの値を設定する
ldap_set_rebind_proc /// bool ldap_set_rebind_proc ( resource $link , callback $callback )\n参照先を再バインドするためのコールバック関数を設定する
ldap_sort /// bool ldap_sort ( resource $link , resource $result , string $sortfilter )\nLDAP 結果エントリをソートする
ldap_start_tls /// bool ldap_start_tls ( resource $link )\nTLS を開始する
ldap_t61_to_8859 /// string ldap_t61_to_8859 ( string $value )\nt61 文字を 8859 文字に変換する
ldap_unbind /// bool ldap_unbind ( resource $link_identifier )\nLDAP ディレクトリへのバインドを解除する
notes_body /// array notes_body ( string $server , string $mailbox , int $msg_number )\n指定したサーバにある指定したメールボックスのメッセージ msg_number をオープンする
notes_copy_db /// bool notes_copy_db ( string $from_database_name , string $to_database_name )\nLotus Notes データベースをコピーする
notes_create_db /// bool notes_create_db ( string $database_name )\nLotus Notes データベースを作成する
notes_create_note /// bool notes_create_note ( string $database_name , string $form_name )\nフォーム form_name を用いてノートを作成する
notes_drop_db /// bool notes_drop_db ( string $database_name )\nLotus Notes データベースを破棄する
notes_find_note /// int notes_find_note ( string $database_name , string $name [, string $type ] )\ndatabase_name で見つかったノートの ID を返す
notes_header_info /// object notes_header_info ( string $server , string $mailbox , int $msg_number )\n指定したサーバ上の指定したメールボックスにあるメッセージ msg_number をオープンする
notes_list_msgs /// bool notes_list_msgs ( string $db )\n選択した database_name からノートを返す
notes_mark_read /// bool notes_mark_read ( string $database_name , string $user_name , string $note_id )\nユーザ user_name 用に note_id に既読マークを付ける
notes_mark_unread /// bool notes_mark_unread ( string $database_name , string $user_name , string $note_id )\nユーザ user_name 用に note_id に未読マークを付ける
notes_nav_create /// bool notes_nav_create ( string $database_name , string $name )\ndatabase_name にナビゲータ名を作成する
notes_search /// array notes_search ( string $database_name , string $keywords )\ndatabase_name のキーワードにマッチするノートを見つける
notes_unread /// array notes_unread ( string $database_name , string $user_name )\n現在のユーザ user_name に関して未読のノート ID を返す
notes_version /// float notes_version ( string $database_name )\nLotus Notes のバージョンを取得する
Memcache::add /// bool Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] )\nサーバに項目を追加する
Memcache::addServer /// bool Memcache::addServer ( string $host [, int $port [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callback $failure_callback [, int $timeoutms ]]]]]]]] )\nコネクションプールに memcached サーバを追加する
Memcache::close /// bool Memcache::close ( void )\nmemcached サーバとの接続を閉じる
Memcache::connect /// bool Memcache::connect ( string $host [, int $port [, int $timeout ]] )\nmemcached サーバへの接続をオープンする
memcache_debug /// bool memcache_debug ( bool $on_off )\nデバッグ出力のオン/オフを切り替える
Memcache::decrement /// int Memcache::decrement ( string $key [, int $value ] )\n項目の値を減らす
Memcache::delete /// bool Memcache::delete ( string $key [, int $timeout ] )\nサーバから項目を削除する
Memcache::flush /// bool Memcache::flush ( void )\nサーバ上のすべての既存項目を消去する
Memcache::get /// string Memcache::get ( string $key [, int &$flags ] )\nサーバから項目を取得する
Memcache::getExtendedStats /// array Memcache::getExtendedStats ([ string $type [, int $slabid [, int $limit ]]] )\nプール内のすべてのサーバの統計情報を取得する
Memcache::getServerStatus /// int Memcache::getServerStatus ( string $host [, int $port ] )\nサーバの状態を返す
Memcache::getStats /// array Memcache::getStats ([ string $type [, int $slabid [, int $limit ]]] )\nサーバの統計情報を取得する
Memcache::getVersion /// string Memcache::getVersion ( void )\nサーバのバージョンを返す
Memcache::increment /// int Memcache::increment ( string $key [, int $value ] )\n項目の値を増やす
Memcache::pconnect /// bool Memcache::pconnect ( string $host [, int $port [, int $timeout ]] )\nmemcached サーバへの持続的な接続をオープンする
Memcache::replace /// bool Memcache::replace ( string $key , mixed $var [, int $flag [, int $expire ]] )\n既存項目の値を置換する
Memcache::set /// bool Memcache::set ( string $key , mixed $var [, int $flag [, int $expire ]] )\nデータをサーバに格納する
Memcache::setCompressThreshold /// bool Memcache::setCompressThreshold ( int $threshold [, float $min_savings ] )\n大きな値に対する自動圧縮処理を有効にする
Memcache::setServerParams /// bool Memcache::setServerParams ( string $host [, int $port [, int $timeout [, int $retry_interval [, bool $status [, callback $failure_callback ]]]]] )\nサーバのパラメータおよび状態を、実行時に変更する
mqseries_back /// void mqseries_back ( resource $hconn , resource &$compCode , resource &$reason )\nMQSeries MQBACK
mqseries_begin /// void mqseries_begin ( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason )\nMQseries MQBEGIN
mqseries_close /// void mqseries_close ( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason )\nMQSeries MQCLOSE
mqseries_cmit /// void mqseries_cmit ( resource $hconn , resource &$compCode , resource &$reason )\nMQSeries MQCMIT
mqseries_conn /// void mqseries_conn ( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason )\nMQSeries MQCONN
mqseries_connx /// void mqseries_connx ( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason )\nMQSeries MQCONNX
mqseries_disc /// void mqseries_disc ( resource $hconn , resource &$compCode , resource &$reason )\nMQSeries MQDISC
mqseries_get /// void mqseries_get ( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason )\nMQSeries MQGET
mqseries_inq /// void mqseries_inq ( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason )\nMQSeries MQINQ
mqseries_open /// void mqseries_open ( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason )\nMQSeries MQOPEN
mqseries_put1 /// void mqseries_put1 ( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason )\nMQSeries MQPUT1
mqseries_put /// void mqseries_put ( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason )\nMQSeries MQPUT
mqseries_set /// void mqseries_set ( resource $hconn , resource $hobj , int $selectorcount , array $selectors , int $intattrcount , array $intattrs , int $charattrlength , array $charattrs , resource &$compCode , resource &$reason )\nMQSeries MQSET
mqseries_strerror /// string mqseries_strerror ( int $reason )\n結果コード (MQRC) に対応するエラーメッセージを返す
gopher_parsedir /// array gopher_parsedir ( string $dirent )\ngopher フォーマットのディレクトリエントリを連想配列に変換する
checkdnsrr /// bool checkdnsrr ( string $host [, string $type ] )\n指定したインターネットホスト名もしくは IP アドレスに対応する DNS レコードを検索する
closelog /// bool closelog ( void )\nシステムログへの接続を閉じる
define_syslog_variables /// void define_syslog_variables ( void )\nsyslog に関係する全ての定数を初期化する
dns_check_record /// checkdnsrr のエイリアス
dns_get_mx /// getmxrr のエイリアス
dns_get_record /// array dns_get_record ( string $hostname [, int $type= DNS_ANY [, array &$authns [, array &$addtl ]]] )\nホスト名に関連する DNS リソースレコードを取得する
fsockopen /// resource fsockopen ( string $hostname [, int $port= -1 [, int &$errno [, string &$errstr [, float $timeout= ini_get("default_socket_timeout") ]]]] )\nインターネット接続もしくはUnix ドメインソケット接続をオープンする
gethostbyaddr /// string gethostbyaddr ( string $ip_address )\n指定した IP アドレスに対応するインターネットホスト名を取得する
gethostbyname /// string gethostbyname ( string $hostname )\nインターネットホスト名に対応するIPアドレスを取得する
gethostbynamel /// array gethostbynamel ( string $hostname )\n指定したインターネットホスト名に対応するIPアドレスのリストを取得する
getmxrr /// bool getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] )\n指定したインターネットホスト名に対応する MX レコードを取得する
getprotobyname /// int getprotobyname ( string $name )\nプロトコル名のプロトコル番号を得る
getprotobynumber /// string getprotobynumber ( int $number )\nプロトコル番号が指すプロトコル名を取得する
getservbyname /// int getservbyname ( string $service , string $protocol )\nインターネットサービスおよびプロトコルが関連するポート番号を取得する
getservbyport /// string getservbyport ( int $port , string $protocol )\nポートおよびプロトコルに対応するインターネットサービスを得る
header /// void header ( string $string [, bool $replace= true [, int $http_response_code ]] )\n生の HTTP ヘッダを送信する
headers_list /// array headers_list ( void )\n送信した (もしくは送信される予定の) レスポンスヘッダの一覧を返す
headers_sent /// bool headers_sent ([ string &$file [, int &$line ]] )\nヘッダが既に送信されているかどうかを調べる
inet_ntop /// string inet_ntop ( string $in_addr )\nパックされたインターネットアドレスを、人間が読める形式に変換する
inet_pton /// string inet_pton ( string $address )\n人間が読める形式の IP アドレスを、パックされた in_addr 形式に変換する
ip2long /// int ip2long ( string $ip_address )\n(IPv4) インターネットプロトコルドット表記のアドレスを、適当なアドレスを有する文字列に変換する
long2ip /// string long2ip ( string $proper_address )\n(IPv4) インターネットアドレスをインターネット標準ドット表記に変換する
openlog /// bool openlog ( string $ident , int $option , int $facility )\nシステムのロガーへの接続をオープンする
pfsockopen /// resource pfsockopen ( string $hostname [, int $port= -1 [, int &$errno [, string &$errstr [, float $timeout= ini_get("default_socket_timeout") ]]]] )\n持続的な Internet または Unix ドメインソケット接続をオープンする
setcookie /// bool setcookie ( string $name [, string $value [, int $expire= 0 [, string $path [, string $domain [, bool $secure= false [, bool $httponly= false ]]]]]] )\nクッキーを送信する
setrawcookie /// bool setrawcookie ( string $name [, string $value [, int $expire= 0 [, string $path [, string $domain [, bool $secure= false [, bool $httponly= false ]]]]]] )\n値を URL エンコードせずにクッキーを送信する
socket_get_status /// stream_get_meta_data のエイリアス
socket_set_blocking /// stream_set_blocking のエイリアス
socket_set_timeout /// stream_set_timeout のエイリアス
syslog /// bool syslog ( int $priority , string $message )\nシステムログのメッセージを生成する
SAMConnection->commit /// bool commit ( void )\n現在作業中の内容をコミット (正常に完了) する
SAMConnection->connect /// bool connect ( string $protocol [, array $properties ] )\nメッセージングサーバとの接続を確立する
SAMConnection->__construct /// メッセージングサーバへの新しい接続を作成する
SAMConnection::disconnect /// bool disconnect ( void )\nメッセージングサーバからの接続を解除する
SAMConnection->errno /// 最後に実行した SAM 操作のエラーコードを表す数値を含む
SAMConnection->error /// 最後に実行した SAM 操作のエラーの説明を含む
SAMConnection->isConnected /// bool isConnected ( void )\nメッセージングサーバとの接続が確立されているかどうかを調べる
SAMConnection->peek /// SAMMessage peek ( string $target [, array $properties ] )\nメッセージをキューから読み込み、それをキューに残したままにする
SAMConnection->peekAll /// array peekAll ( string $target [, array $properties ] )\nひとつあるいは複数のメッセージをキューから読み込み、それをキューに残したままにする
SAMConnection->receive /// SAMMessage receive ( string $target [, array $properties ] )\nメッセージをキューあるいは購読から取得する
SAMConnection->remove /// SAMMessage remove ( string $target [, array $properties ] )\nメッセージをキューから削除する
SAMConnection->rollback /// bool rollback ( void )\n現在作業中の内容をキャンセル (ロールバック) する
SAMConnection->send /// string send ( string $target , SAMMessage $msg [, array $properties ] )\nメッセージをキューに送信、あるいは項目をトピックに投稿する
SAMConnection::setDebug /// void send ( bool $switch )\n追加のデバッグ出力を有効あるいは無効にする
SAMConnection->subscribe /// string subscribe ( string $targetTopic )\n指定したトピックの購読を作成する
SAMConnection->unsubscribe /// bool unsubscribe ( string $subscriptionId [, string $targetTopic ] )\n指定したトピックの購読を解除する
SAMMessage->body /// メッセージの本文
SAMMessage->__construct /// 新しいメッセージオブジェクトを作成する
SAMMessage->header /// メッセージのヘッダプロパティ
snmp_get_quick_print /// bool snmp_get_quick_print ( void )\nUCD ライブラリの quick_print の現在の設定値を取得する
snmp_get_valueretrieval /// int snmp_get_valueretrieval ( void )\nSNMP の値が返される方法を返す
snmp_read_mib /// bool snmp_read_mib ( string $filename )\nアクティブな MIB ツリーの中に MIB ファイルを読み込んでパースする
snmp_set_enum_print /// void snmp_set_enum_print ( int $enum_print )\nすべての enum を、実際の整数値ではなく enum 値とともに返す
snmp_set_oid_numeric_print /// void snmp_set_oid_numeric_print ( int $oid_numeric_print )\n指定したオブジェクト内の全てのオブジェクトを、対応するオブジェクト ID を含めて返す
snmp_set_oid_output_format /// void snmp_set_oid_output_format ( int $oid_format )\nOID の出力形式を設定する
snmp_set_quick_print /// void snmp_set_quick_print ( bool $quick_print )\nUCB SNMP ライブラリで quick_print の値を設定する
snmp_set_valueretrieval /// void snmp_set_valueretrieval ( int $method )\nSNMP の値が返される方法を設定する
snmpget /// string snmpget ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )\nSNMP オブジェクトを取得する
snmpgetnext /// string snmpgetnext ( string $host , string $community , string $object_id [, int $timeout [, int $retries ]] )\nSNMP オブジェクトを取得する
snmprealwalk /// array snmprealwalk ( string $host , string $community , string $object_id [, int $timeout [, int $retries ]] )\n指定したオブジェクトに関するオブジェクト ID を含むすべてのオブジェクトを返す
snmpset /// bool snmpset ( string $hostname , string $community , string $object_id , string $type , mixed $value [, int $timeout [, int $retries ]] )\nSNMP オブジェクトを設定する
snmpwalk /// array snmpwalk ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )\nエージェントから全ての SNMP オブジェクトを取得する
snmpwalkoid /// array snmpwalkoid ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )\nネットワークエンティティに関する情報ツリーを検索する
socket_accept /// resource socket_accept ( resource $socket )\nソケットへの接続を許可する
socket_bind /// bool socket_bind ( resource $socket , string $address [, int $port= 0 ] )\nソケットに名前をバインドする
socket_clear_error /// void socket_clear_error ([ resource $socket ] )\nソケットのエラーまたは直近のエラーコードをクリアする
socket_close /// void socket_close ( resource $socket )\nソケットリソースを閉じる
socket_connect /// bool socket_connect ( resource $socket , string $address [, int $port= 0 ] )\nソケット上の接続を初期化する
socket_create_listen /// resource socket_create_listen ( int $port [, int $backlog= 128 ] )\n接続を受けつけるためにポートにソケットをオープンする
socket_create_pair /// bool socket_create_pair ( int $domain , int $type , int $protocol , array &$fd )\n区別できないソケットの組を作成し、配列に保存する
socket_create /// resource socket_create ( int $domain , int $type , int $protocol )\nソケット（通信時の終端）を作成する
socket_get_option /// mixed socket_get_option ( resource $socket , int $level , int $optname )\nソケットのオプションを取得する
socket_getpeername /// bool socket_getpeername ( resource $socket , string &$address [, int &$port ] )\n指定したソケットのリモート側に問い合わせ、その型に応じてホスト/ポート、あるいは Unix ファイルシステムのパスを返す
socket_getsockname /// bool socket_getsockname ( resource $socket , string &$addr [, int &$port ] )\n指定したソケットのローカル側に問い合わせ、その型に応じてホスト/ポート、あるいは Unix ファイルシステムのパスを返す
socket_last_error /// int socket_last_error ([ resource $socket ] )\nソケットの直近のエラーを返す
socket_listen /// bool socket_listen ( resource $socket [, int $backlog= 0 ] )\nソケット上で接続待ち(listen)する
socket_read /// string socket_read ( resource $socket , int $length [, int $type= PHP_BINARY_READ ] )\nソケットから最大バイト長まで読みこむ
socket_recv /// int socket_recv ( resource $socket , string &$buf , int $len , int $flags )\n接続したソケットからデータを受信する
socket_recvfrom /// int socket_recvfrom ( resource $socket , string &$buf , int $len , int $flags , string &$name [, int &$port ] )\n接続しているかどうかによらず、ソケットからデータを受信する
socket_select /// int socket_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec= 0 ] )\n与えられたソケットの配列に対し、指定した有効時間で select() システムコールを実行する
socket_send /// int socket_send ( resource $socket , string $buf , int $len , int $flags )\n接続したソケットにデータを送信する
socket_sendto /// int socket_sendto ( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port= 0 ] )\n接続しているかどうかによらずソケットにメッセージを送信する
socket_set_block /// bool socket_set_block ( resource $socket )\nソケットリソースをブロックモードに設定する
socket_set_nonblock /// bool socket_set_nonblock ( resource $socket )\nソケットリソースを非ブロックモードに設定する
socket_set_option /// bool socket_set_option ( resource $socket , int $level , int $optname , mixed $optval )\nソケットのオプションを設定する
socket_shutdown /// bool socket_shutdown ( resource $socket [, int $how= 2 ] )\n受信、送信、または送受信用のソケットをシャットダウンする
socket_strerror /// string socket_strerror ( int $errno )\nソケットエラーの内容を文字列として返す
socket_write /// int socket_write ( resource $socket , string $buffer [, int $length= 0 ] )\nソケットに書き込む
ssh2_auth_hostbased_file /// bool ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] )\nホスト公開鍵を使用して認証を行う
ssh2_auth_none /// mixed ssh2_auth_none ( resource $session , string $username )\n"none" として認証する
ssh2_auth_password /// bool ssh2_auth_password ( resource $session , string $username , string $password )\nSSH 上でプレーンなパスワードを使用した認証を行う
ssh2_auth_pubkey_file /// bool ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] )\n公開鍵を使用した認証を行う
ssh2_connect /// resource ssh2_connect ( string $host [, int $port= 22 [, array $methods [, array $callbacks ]]] )\nSSH サーバに接続する
ssh2_exec /// resource ssh2_exec ( resource $session , string $command [, string $pty [, array $env [, int $width= 80 [, int $height= 25 [, int $width_height_type= SSH2_TERM_UNIT_CHARS ]]]]] )\nリモートサーバ上でコマンドを実行する
ssh2_fetch_stream /// resource ssh2_fetch_stream ( resource $channel , int $streamid )\n拡張データストリームを取得する
ssh2_fingerprint /// string ssh2_fingerprint ( resource $session [, int $flags= SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] )\nリモートサーバのフィンガープリントを処理する
ssh2_methods_negotiated /// array ssh2_methods_negotiated ( resource $session )\nネゴシエートされたメソッドのリストを返す
ssh2_publickey_add /// bool ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, bool $overwrite= false [, array $attributes ]] )\n認証済み公開鍵を追加する
ssh2_publickey_init /// resource ssh2_publickey_init ( resource $session )\n公開鍵サブシステムを初期化する
ssh2_publickey_list /// array ssh2_publickey_list ( resource $pkey )\n現在認証済みの公開鍵の一覧を表示する
ssh2_publickey_remove /// bool ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob )\n認証済み公開鍵を取り除く
ssh2_scp_recv /// bool ssh2_scp_recv ( resource $session , string $remote_file , string $local_file )\nSCP 経由でファイルを要求する
ssh2_scp_send /// bool ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode= 0644 ] )\nSCP 経由でファイルを送信する
ssh2_sftp_lstat /// array ssh2_sftp_lstat ( resource $sftp , string $path )\nシンボリックリンクの情報を取得する
ssh2_sftp_mkdir /// bool ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode= 0777 [, bool $recursive= false ]] )\nディレクトリを作成する
ssh2_sftp_readlink /// string ssh2_sftp_readlink ( resource $sftp , string $link )\nシンボリックリンクのターゲットを返す
ssh2_sftp_realpath /// string ssh2_sftp_realpath ( resource $sftp , string $filename )\n指定されたパス文字列の実パスを解決する
ssh2_sftp_rename /// bool ssh2_sftp_rename ( resource $sftp , string $from , string $to )\nリモートファイルを改名する
ssh2_sftp_rmdir /// bool ssh2_sftp_rmdir ( resource $sftp , string $dirname )\nディレクトリを削除する
ssh2_sftp_stat /// array ssh2_sftp_stat ( resource $sftp , string $path )\nリモートファイルシステム上のファイルの情報を取得する
ssh2_sftp_symlink /// bool ssh2_sftp_symlink ( resource $sftp , string $target , string $link )\nシンボリックリンクを作成する
ssh2_sftp_unlink /// bool ssh2_sftp_unlink ( resource $sftp , string $filename )\nファイルを削除する
ssh2_sftp /// resource ssh2_sftp ( resource $session )\nSFTP サブシステムを初期化する
ssh2_shell /// resource ssh2_shell ( resource $session [, string $term_type= "vanilla" [, array $env [, int $width= 80 [, int $height= 25 [, int $width_height_type= SSH2_TERM_UNIT_CHARS ]]]]] )\n対話式のシェルを要求する
ssh2_tunnel /// resource ssh2_tunnel ( resource $session , string $host , int $port )\nリモートサーバを経由するトンネルをオープンする
svn_add /// bool svn_add ( string $path [, bool $recursive= true [, bool $force= false ]] )\n作業ディレクトリ内のアイテムの追加を予約する
svn_auth_get_parameter /// string svn_auth_get_parameter ( string $key )\n認証パラメータを取得する
svn_auth_set_parameter /// void svn_auth_set_parameter ( string $key , string $value )\n認証パラメータを設定する
svn_blame /// array svn_blame ( string $repository_url [, int $revision_no= SVN_REVISION_HEAD ] )\nファイルの SVN blame を取得する
svn_cat /// string svn_cat ( string $repos_url [, int $revision_no ] )\nリポジトリ内のファイルの内容を返す
svn_checkout /// bool svn_checkout ( string $repos , string $targetpath [, int $revision [, int $flags= 0 ]] )\nリポジトリから作業コピーをチェックアウトする
svn_cleanup /// bool svn_cleanup ( string $workingdir )\n作業コピーディレクトリを再帰的にクリーンアップし、中途半端な操作を解消してロックを削除する
svn_client_version /// string svn_client_version ( void )\nSVN クライアントライブラリのバージョンを返す
svn_commit /// array svn_commit ( string $log , array $targets [, bool $dontrecurse ] )\n変更内容を、ローカルの作業コピーからリポジトリに送信する
svn_diff /// array svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 )\nふたつのパスの差分を再帰的に取得する
svn_export /// bool svn_export ( string $frompath , string $topath [, bool $working_copy= true ] )\nSVN ディレクトリの内容をエクスポートする
svn_fs_abort_txn /// bool svn_fs_abort_txn ( resource $txn )\nトランザクションを中断し、成功したら true、失敗したら false を返す
svn_fs_apply_text /// resource svn_fs_apply_text ( resource $root , string $path )\n置換に使用するストリームを作成して返す
svn_fs_begin_txn2 /// resource svn_fs_begin_txn2 ( resource $repos , int $rev )\n新しいトランザクションを作成する
svn_fs_change_node_prop /// bool svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value )\n成功したら true、失敗したら false を返す
svn_fs_check_path /// int svn_fs_check_path ( resource $fsroot , string $path )\n指定したリポジトリの fsroot パスにどんなアイテムが存在するかを調べる
svn_fs_contents_changed /// bool svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )\nコンテンツが変更されている場合に true、されていない場合に false を返す
svn_fs_copy /// bool svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path )\nファイルやディレクトリをコピーし、成功したら true、失敗したら false を返す
svn_fs_delete /// bool svn_fs_delete ( resource $root , string $path )\nファイルやディレクトリを削除し、成功したら true、失敗したら false を返す
svn_fs_dir_entries /// array svn_fs_dir_entries ( resource $fsroot , string $path )\n指定したパスのディレクトリを列挙し、ディレクトリ名とファイルタイプのハッシュを返す
svn_fs_file_contents /// resource svn_fs_file_contents ( resource $fsroot , string $path )\n指定したバージョンの fs から、ファイルの中身を読み込むためのストリームを返す
svn_fs_file_length /// int svn_fs_file_length ( resource $fsroot , string $path )\n指定したバージョンの fs から、ファイルの長さを返す
svn_fs_is_dir /// bool svn_fs_is_dir ( resource $root , string $path )\nディレクトリを指すパスである場合に true、それ以外の場合に false を返す
svn_fs_is_file /// bool svn_fs_is_file ( resource $root , string $path )\nファイルを指すパスである場合に true、それ以外の場合に false を返す
svn_fs_make_dir /// bool svn_fs_make_dir ( resource $root , string $path )\n空のディレクトリを作成し、成功したら true、失敗したら false を返す
svn_fs_make_file /// bool svn_fs_make_file ( resource $root , string $path )\n空のファイルを作成し、成功したら true、失敗したら false を返す
svn_fs_node_created_rev /// int svn_fs_node_created_rev ( resource $fsroot , string $path )\nfsroot 配下のパスが作成されたリビジョンを返す
svn_fs_node_prop /// string svn_fs_node_prop ( resource $fsroot , string $path , string $propname )\nノードのプロパティの値を返す
svn_fs_props_changed /// bool svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )\nプロパティが変更されている場合に true、それ以外の場合に false を返す
svn_fs_revision_prop /// string svn_fs_revision_prop ( resource $fs , int $revnum , string $propname )\n指定したプロパティの値を取得する
svn_fs_revision_root /// resource svn_fs_revision_root ( resource $fs , int $revnum )\nリポジトリのルートの指定したバージョンのハンドルを取得する
svn_fs_txn_root /// resource svn_fs_txn_root ( resource $txn )\nトランザクションのルートを作成して返す
svn_fs_youngest_rev /// int svn_fs_youngest_rev ( resource $fs )\nファイルシステム内で一番若いリビジョン番号を返す
svn_import /// bool svn_import ( string $path , string $url , bool $nonrecursive )\nバージョン管理されていないパスをリポジトリにインポートする
svn_log /// array svn_log ( string $repos_url [, int $start_revision [, int $end_revision [, int $limit= 0 [, int $flags= SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ]]]] )\n指定したリポジトリ URL のコミットログメッセージを返す
svn_ls /// array svn_ls ( string $repos_url [, int $revision_no= SVN_REVISION_HEAD [, bool $recurse= false ]] )\n指定したリポジトリ URL のディレクトリ内の一覧を返す (オプションでリビジョン番号も指定可能)
svn_mkdir /// bool svn_mkdir ( string $path )\n作業コピーあるいはリポジトリ内にディレクトリを作成する
svn_repos_create /// resource svn_repos_create ( string $path [, array $config [, array $fsconfig ]] )\n新しい subversion リポジトリを指定したパスに作成する
svn_repos_fs_begin_txn_for_commit /// resource svn_repos_fs_begin_txn_for_commit ( resource $repos , int $rev , string $author , string $log_msg )\n新しいトランザクションを作成する
svn_repos_fs_commit_txn /// int svn_repos_fs_commit_txn ( resource $txn )\nトランザクションをコミットし、新しいリビジョンを返す
svn_repos_fs /// resource svn_repos_fs ( resource $repos )\nリポジトリ用に、ファイルシステム上のハンドルを取得する
svn_repos_hotcopy /// bool svn_repos_hotcopy ( string $repospath , string $destpath , bool $cleanlogs )\nrepospath にあるリポジトリのホットコピーを作成し、destpath にコピーする
svn_repos_open /// resource svn_repos_open ( string $path )\nリポジトリの共有ロックをオープンする
svn_repos_recover /// bool svn_repos_recover ( string $path )\n指定したパスのリポジトリのリカバリ処理を実行する
svn_revert /// bool svn_revert ( string $path [, bool $recursive= false ] )\n作業コピーへの変更を取り消す
svn_status /// array svn_status ( string $path [, int $flags= 0 ] )\n作業コピー内のファイルやディレクトリの状態を返す
svn_update /// int svn_update ( string $path [, int $revno= SVN_REVISION_HEAD [, bool $recurse= true ]] )\n作業コピーをアップデートする
tcpwrap_check /// bool tcpwrap_check ( string $daemon , string $address [, string $user [, bool $nodns= false ]] )\ntcpwrap のチェックを実行する
yaz_addinfo /// string yaz_addinfo ( resource $id )\n詳細なエラー情報を返す
yaz_ccl_conf /// void yaz_ccl_conf ( resource $id , array $config )\nCCL パーサを設定する
yaz_ccl_parse /// bool yaz_ccl_parse ( resource $id , string $query , array &$result )\nCCL パーサを起動する
yaz_close /// bool yaz_close ( resource $id )\nYAZ 接続をクローズする
yaz_connect /// mixed yaz_connect ( string $zurl [, mixed $options ] )\nZ39.50 サーバへの接続を準備する
yaz_database /// bool yaz_database ( resource $id , string $databases )\nセッション内のデータベースを指定する
yaz_element /// bool yaz_element ( resource $id , string $elementset )\n取得時の要素集合の名前を指定する
yaz_errno /// int yaz_errno ( resource $id )\nエラー番号を返す
yaz_error /// string yaz_error ( resource $id )\nエラーの内容を返す
yaz_es_result /// array yaz_es_result ( resource $id )\n拡張サービスの結果を調査する
yaz_es /// void yaz_es ( resource $id , string $type , array $args )\n拡張サービスのリクエストを準備する
yaz_get_option /// string yaz_get_option ( resource $id , string $name )\n接続に関するオプションの値を返す
yaz_hits /// int yaz_hits ( resource $id [, array &$searchresult ] )\n直近の検索に関するヒット数を返す
yaz_itemorder /// void yaz_itemorder ( resource $id , array $args )\nILL リクエストパッケージを関して Z39.50 Item Order を準備する
yaz_present /// bool yaz_present ( resource $id )\n(Z39.50による)取得の準備を行う
yaz_range /// void yaz_range ( resource $id , int $start , int $number )\n取得するレコードの範囲を指定する
yaz_record /// string yaz_record ( resource $id , int $pos , string $type )\nレコードを返す
yaz_scan_result /// array yaz_scan_result ( resource $id [, array &$result ] )\nスキャンリクエストの結果を返す
yaz_scan /// void yaz_scan ( resource $id , string $type , string $startterm [, array $flags ] )\nスキャンの準備をする
yaz_schema /// void yaz_schema ( resource $id , string $schema )\n取得するスキーマを指定する
yaz_search /// bool yaz_search ( resource $id , string $type , string $query )\n検索を準備する
yaz_set_option /// void yaz_set_option ( resource $id , string $name , string $value )\n接続に関するひとつあるいは複数のオプションを設定する
yaz_sort /// void yaz_sort ( resource $id , string $criteria )\nソート条件を設定する
yaz_syntax /// void yaz_syntax ( resource $id , string $syntax )\n取得用に適当なレコード構文を指定する
yaz_wait /// mixed yaz_wait ([ array &$options ] )\nZ39.50 リクエストが完了するまで待つ
yp_all /// void yp_all ( string $domain , string $map , string $callback )\nマップを走査し、各エントリ上で関数をコールする
yp_cat /// array yp_cat ( string $domain , string $map )\nマップ全体を含む配列を返す
yp_err_string /// string yp_err_string ( int $errorcode )\n指定したエラーコードに対応するエラー文字列を返す
yp_errno /// int yp_errno ( void )\n前の操作のエラーコードを返す
yp_first /// array yp_first ( string $domain , string $map )\n指定したマップから最初のキー/値の組を返す
yp_get_default_domain /// string yp_get_default_domain ( void )\nマシンのデフォルト NIS ドメインを取得する
yp_master /// string yp_master ( string $domain , string $map )\n指定したマップのマスタ NIS サーバのマシン名を返す
yp_match /// string yp_match ( string $domain , string $map , string $key )\n検索した行を返す
yp_next /// array yp_next ( string $domain , string $map , string $key )\nマップから、次のキー/値の組を返す
yp_order /// int yp_order ( string $domain , string $map )\nマップの呼出番号を返す
udm_add_search_limit /// bool udm_add_search_limit ( resource $agent , int $var , string $val )\n種々の検索の制約を設定する
udm_alloc_agent_array /// resource udm_alloc_agent_array ( array $databases )\nmnoGoSearch セッションを割り当てる
udm_alloc_agent /// resource udm_alloc_agent ( string $dbaddr [, string $dbmode ] )\nmnoGoSearch セッションを確保する
udm_api_version /// int udm_api_version ( void )\nmnoGoSearch API バージョンを取得する
udm_cat_list /// array udm_cat_list ( resource $agent , string $category )\n現在のカテゴリと同じレベルのカテゴリを全て取得する
udm_cat_path /// array udm_cat_path ( resource $agent , string $category )\n現在のカテゴリへのパスを取得する
udm_check_charset /// bool udm_check_charset ( resource $agent , string $charset )\n指定した charset が mnogosearch で認識されるかどうか調べる
udm_check_stored /// int udm_check_stored ( resource $agent , int $link , string $doc_id )\n保存された接続を調べる
udm_clear_search_limits /// bool udm_clear_search_limits ( resource $agent )\nmnoGoSearch 検索に関する全ての制約をクリアする
udm_close_stored /// int udm_close_stored ( resource $agent , int $link )\n保存した接続を閉じる
udm_crc32 /// int udm_crc32 ( resource $agent , string $str )\n指定した文字列の CRC32 チェックサムを計算する
udm_errno /// int udm_errno ( resource $agent )\nmnoGoSearch エラー番号を取得する
udm_error /// string udm_error ( resource $agent )\nmnoGoSearch エラーメッセージを得る
udm_find /// resource udm_find ( resource $agent , string $query )\n検索を実行する
udm_free_agent /// int udm_free_agent ( resource $agent )\nmnoGoSearch セッションを開放する
udm_free_ispell_data /// bool udm_free_ispell_data ( int $agent )\nispell データ用に確保されたメモリを解放する
udm_free_res /// bool udm_free_res ( resource $res )\nmnoGoSearch 結果を開放する
udm_get_doc_count /// int udm_get_doc_count ( resource $agent )\nデータベース内のドキュメントの総数を得る
udm_get_res_field /// string udm_get_res_field ( resource $res , int $row , int $field )\nmnoGoSearch 結果フィールドを取得する
udm_get_res_param /// string udm_get_res_param ( resource $res , int $param )\nmnoGoSearch 結果パラメータを取得する
udm_hash32 /// int udm_hash32 ( resource $agent , string $str )\n指定した文字列の Hash32 チェックサムを返す
udm_load_ispell_data /// bool udm_load_ispell_data ( resource $agent , int $var , string $val1 , string $val2 , int $flag )\nispell データを読み込む
udm_open_stored /// int udm_open_stored ( resource $agent , string $storedaddr )\n保存した接続をオープンする
udm_set_agent_param /// bool udm_set_agent_param ( resource $agent , int $var , string $val )\nmnoGoSearch エージェントのセッションパラメータを設定する
Swish::__construct /// void Swish::__construct ( string $index_names )\nSwish オブジェクトを作成する
Swish->getMetaList /// array Swish->getMetaList ( string $index_name )\nこのインデックスのメタエントリ一覧を取得する
Swish->getPropertyList /// array Swish->getPropertyList ( string $index_name )\nこのインデックスのプロパティ一覧を取得する
Swish->prepare /// object Swish->prepare ([ string $query ] )\n検索クエリを準備する
Swish->query /// object Swish->query ( string $query )\nクエリを実行し、結果オブジェクトを返す
SwishResult->getMetaList /// array SwishResult->getMetaList ( void )\nメタエントリの一覧を取得する
SwishResult->stem /// array SwishResult->stem ( string $word )\n指定した単語の語幹を取得する
SwishResults->getParsedWords /// array SwishResults->getParsedWords ( string $index_name )\nパースされた単語の配列を取得する
SwishResults->getRemovedStopwords /// array SwishResults->getRemovedStopwords ( string $index_name )\nクエリから削除したストップワードの配列を取得する
SwishResults->nextResult /// object SwishResults->nextResult ( void )\n次の検索結果を取得する
SwishResults->seekResult /// int SwishResults->seekResult ( int $position )\n現在のシークポインタを指定した位置に設定する
SwishSearch->execute /// object SwishSearch->execute ([ string $query ] )\n検索を実行し、結果を取得する
SwishSearch->resetLimit /// void SwishSearch->resetLimit ( void )\n検索の制限をリセットする
SwishSearch->setLimit /// void SwishSearch->setLimit ( string $property , string $low , string $high )\n検索の限界を設定する
SwishSearch->setPhraseDelimiter /// void SwishSearch->setPhraseDelimiter ( string $delimiter )\nフレーズの区切り文字を設定する
SwishSearch->setSort /// void SwishSearch->setSort ( string $sort )\n並び順を設定する
SwishSearch->setStructure /// void SwishSearch->setStructure ( int $structure )\n検索オブジェクトの構造フラグを設定する
apache_child_terminate /// bool apache_child_terminate ( void )\nこのリクエストの後にApacheプロセスを終了する
apache_get_modules /// array apache_get_modules ( void )\nロードされた Apache モジュールのリストを取得する
apache_get_version /// string apache_get_version ( void )\nApache のバージョンを取得する
apache_getenv /// string apache_getenv ( string $variable [, bool $walk_to_top ] )\nApache の subprocess_env 変数を取得する
apache_lookup_uri /// object apache_lookup_uri ( string $filename )\nリクエストの一部を指定したURIに対して行い、全ての情報を返す
apache_note /// string apache_note ( string $note_name [, string $note_value ] )\nApacheリクエスト記号(note)を取得/設定する
apache_request_headers /// array apache_request_headers ( void )\nすべての HTTP リクエストヘッダを取得する
apache_reset_timeout /// bool apache_reset_timeout ( void )\nApache の書き込みタイマーをリセットする
apache_response_headers /// array apache_response_headers ( void )\nHTTPレスポンスヘッダを全て取得する
apache_setenv /// bool apache_setenv ( string $variable , string $value [, bool $walk_to_top= false ] )\nApacheサブプロセスの環境変数を設定する
ascii2ebcdic /// int ascii2ebcdic ( string $ascii_str )\nASCIIからEBCDICに文字列を変換する
ebcdic2ascii /// int ebcdic2ascii ( string $ebcdic_str )\nEBCDICからASCIIに文字列を変換する
getallheaders /// array getallheaders ( void )\n全てのHTTPリクエストヘッダを取得する
virtual /// bool virtual ( string $filename )\nApache サブリクエストを実行する
iis_add_server /// int iis_add_server ( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server )\n新規に仮想 Web サーバを作成する
iis_get_dir_security /// int iis_get_dir_security ( int $server_instance , string $virtual_path )\nディレクトリのセキュリティを取得する
iis_get_script_map /// string iis_get_script_map ( int $server_instance , string $virtual_path , string $script_extension )\n指定した拡張子に関して仮想ディレクトリにおけるスクリプトマッピングを取得する
iis_get_server_by_comment /// int iis_get_server_by_comment ( string $comment )\n指定したコメントのインスタンス番号を返す
iis_get_server_by_path /// int iis_get_server_by_path ( string $path )\n指定したパスのインスタンス番号を返す
iis_get_server_rights /// int iis_get_server_rights ( int $server_instance , string $virtual_path )\nサーバの権限を取得する
iis_get_service_state /// int iis_get_service_state ( string $service_id )\nサービス ID で指定したサービスの状態を取得する
iis_remove_server /// int iis_remove_server ( int $server_instance )\nサーバインスタンスで指定した仮想 Web サーバを削除する
iis_set_app_settings /// int iis_set_app_settings ( int $server_instance , string $virtual_path , string $application_scope )\n仮想ディレクトリでのアプリケーションスコープを作成する
iis_set_dir_security /// int iis_set_dir_security ( int $server_instance , string $virtual_path , int $directory_flags )\nディレクトリのセキュリティを設定する
iis_set_script_map /// int iis_set_script_map ( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting )\n仮想ディレクトリにスクリプトマッピングを設定する
iis_set_server_rights /// int iis_set_server_rights ( int $server_instance , string $virtual_path , int $directory_flags )\nサーバの権限を設定する
iis_start_server /// int iis_start_server ( int $server_instance )\n仮想 Web サーバを起動する
iis_start_service /// int iis_start_service ( string $service_id )\nサービス ID で指定したサービスを起動する
iis_stop_server /// int iis_stop_server ( int $server_instance )\n仮想 Web サーバを停止する
iis_stop_service /// int iis_stop_service ( string $service_id )\nサービス ID で指定したサービスを停止する
nsapi_request_headers /// array nsapi_request_headers ( void )\nHTTP リクエストヘッダを全て取得する
nsapi_response_headers /// array nsapi_response_headers ( void )\nすべての HTTP レスポンスヘッダを取得する
nsapi_virtual /// bool nsapi_virtual ( string $uri )\nNSAPI サブリクエストを発行する
msession_connect /// bool msession_connect ( string $host , string $port )\nmsession サーバに接続する
msession_count /// int msession_count ( void )\nセッション数を得る
msession_create /// bool msession_create ( string $session [, string $classname [, string $data ]] )\nセッションを作成する
msession_destroy /// bool msession_destroy ( string $name )\nセッションを破棄する
msession_disconnect /// void msession_disconnect ( void )\nmsession サーバへの接続を閉じる
msession_find /// array msession_find ( string $name , string $value )\n名前と値で、すべてのセッションを検索する
msession_get_array /// array msession_get_array ( string $session )\nmsession 変数の配列を得る
msession_get_data /// string msession_get_data ( string $session )\nデータセッションの、構造化されていないデータを取得する
msession_get /// string msession_get ( string $session , string $name , string $value )\nセッションから値を取得する
msession_inc /// string msession_inc ( string $session , string $name )\nセッションの値を増加させる
msession_list /// array msession_list ( void )\nすべてのセッションの一覧を取得する
msession_listvar /// array msession_listvar ( string $name )\nセッションの一覧を変数を使用して取得する
msession_lock /// int msession_lock ( string $name )\nセッションをロックする
msession_plugin /// string msession_plugin ( string $session , string $val [, string $param ] )\nmsession personality プラグイン内のエスケープ関数をコールする
msession_randstr /// string msession_randstr ( int $param )\nランダムな文字列を取得する
msession_set_array /// void msession_set_array ( string $session , array $tuples )\nセッションに配列の値を設定する
msession_set_data /// bool msession_set_data ( string $session , string $value )\nデータセッションの、構造化されていないデータを設定する
msession_set /// bool msession_set ( string $session , string $name , string $value )\nセッションに値を設定する
msession_timeout /// int msession_timeout ( string $session [, int $param ] )\nセッションの有効期間を設定/取得する
msession_uniq /// string msession_uniq ( int $param [, string $classname [, string $data ]] )\nユニークな ID を取得する
msession_unlock /// int msession_unlock ( string $session , int $key )\nセッションのロックを解除する
session_cache_expire /// int session_cache_expire ([ string $new_cache_expire ] )\n現在のキャッシュの有効期限を返す
session_cache_limiter /// string session_cache_limiter ([ string $cache_limiter ] )\n現在のキャッシュリミッタを取得または設定する
session_commit /// session_write_close のエイリアス
session_decode /// bool session_decode ( string $data )\n文字列からセッションデータをデコードする
session_destroy /// bool session_destroy ( void )\nセッションに登録されたデータを全て破棄する
session_encode /// string session_encode ( void )\n現在のセッションデータを文字列としてエンコードする
session_get_cookie_params /// array session_get_cookie_params ( void )\nセッションクッキーのパラメータを得る
session_id /// string session_id ([ string $id ] )\nカレントのセッション ID を取得または設定する
session_is_registered /// bool session_is_registered ( string $name )\n変数がセッションに登録されているかどうかを調べる
session_module_name /// string session_module_name ([ string $module ] )\n現在のセッションモジュールを取得または設定する
session_name /// string session_name ([ string $name ] )\n現在のセッション名を取得または設定する
session_regenerate_id /// bool session_regenerate_id ([ bool $delete_old_session= false ] )\n現在のセッションIDを新しく生成したものと置き換える
session_register /// bool session_register ( mixed $name [, mixed $... ] )\n現在のセッションに1つ以上の変数を登録する
session_save_path /// string session_save_path ([ string $path ] )\n現在のセッションデータ保存パスを取得または設定する
session_set_cookie_params /// void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure= false [, bool $httponly= false ]]]] )\nセッションクッキーパラメータを設定する
session_set_save_handler /// bool session_set_save_handler ( callback $open , callback $close , callback $read , callback $write , callback $destroy , callback $gc )\nユーザ定義のセッション保存関数を設定する
session_start /// bool session_start ( void )\nセッションデータを初期化する
session_unregister /// bool session_unregister ( string $name )\n現在のセッションから変数の登録を削除する
session_unset /// void session_unset ( void )\n全てのセッション変数を開放する
session_write_close /// void session_write_close ( void )\nセッションデータを書き込んでセッションを終了する
session_pgsql_add_error /// bool session_pgsql_add_error ( int $error_level [, string $error_message ] )\nエラーカウントを加算し、直近のエラーメッセージを設定する
session_pgsql_get_error /// array session_pgsql_get_error ([ bool $with_error_message= false ] )\nエラーの数および直近のエラーメッセージを返す
session_pgsql_get_field /// string session_pgsql_get_field ( void )\nカスタムフィールドの値を取得する
session_pgsql_reset /// bool session_pgsql_reset ( void )\nセッションデータベースサーバとの接続をリセットする
session_pgsql_set_field /// bool session_pgsql_set_field ( string $value )\nカスタムフィールドの値を設定する
session_pgsql_status /// array session_pgsql_status ( void )\n現在の保存ハンドラの状態を得る
bbcode_add_element /// bool bbcode_add_element ( resource $bbcode_container , string $tag_name , array $tag_rules )\nbbcode 要素を追加する
bbcode_add_smiley /// bool bbcode_add_smiley ( resource $bbcode_container , string $smiley , string $replace_by )\n顔文字をパーサに追加する
bbcode_create /// resource bbcode_create ([ array $bbcode_initial_tags ] )\nBBCode リソースを作成する
bbcode_destroy /// bool bbcode_destroy ( resource $bbcode_container )\nBBCode_container リソースを閉じる
bbcode_parse /// string bbcode_parse ( resource $bbcode_container , string $to_parse )\n文字列を、指定した規則のもとでパースする
bbcode_set_arg_parser /// bool bbcode_set_arg_parser ( resource $bbcode_container , resource $bbcode_arg_parser )\n別のパーサをアタッチして、引数のパース用に別のルールセットを設定する
bbcode_set_flags /// bool bbcode_set_flags ( resource $bbcode_container , int $flags [, int $mode= BBCODE_SET_FLAGS_SET ] )\nパーサのオプションを設定あるいは変更する
preg_grep /// array preg_grep ( string $pattern , array $input [, int $flags= 0 ] )\nパターンにマッチする配列の要素を返す
preg_last_error /// int preg_last_error ( void )\n直近の PCRE 正規表現処理のエラーコードを返す
preg_match_all /// int preg_match_all ( string $pattern , string $subject , array &$matches [, int $flags [, int $offset ]] )\n繰り返し正規表現検索を行う
preg_match /// int preg_match ( string $pattern , string $subject [, array &$matches [, int $flags [, int $offset ]]] )\n正規表現によるマッチングを行う
preg_quote /// string preg_quote ( string $str [, string $delimiter= NULL ] )\n正規表現文字をクオートする
preg_replace_callback /// mixed preg_replace_callback ( mixed $pattern , callback $callback , mixed $subject [, int $limit= -1 [, int &$count ]] )\n正規表現検索を行い、コールバック関数を使用して置換を行う
preg_replace /// mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit= -1 [, int &$count ]] )\n正規表現検索および置換を行う
preg_split /// array preg_split ( string $pattern , string $subject [, int $limit= -1 [, int $flags= 0 ]] )\n正規表現で文字列を分割する
ereg_replace /// string ereg_replace ( string $pattern , string $replacement , string $string )\n正規表現による置換を行う
ereg /// int ereg ( string $pattern , string $string [, array &$regs ] )\n正規表現によるマッチングを行う
eregi_replace /// string eregi_replace ( string $pattern , string $replacement , string $string )\n大文字小文字を区別せずに正規表現による置換を行う
eregi /// int eregi ( string $pattern , string $string [, array &$regs ] )\n大文字小文字を区別せずに正規表現によるマッチングを行う
split /// array split ( string $pattern , string $string [, int $limit ] )\n正規表現により文字列を分割し、配列に格納する
spliti /// array spliti ( string $pattern , string $string [, int $limit ] )\n大文字小文字を区別しない正規表現により文字列を分割し、配列に格納する
sql_regcase /// string sql_regcase ( string $string )\n大文字小文字を区別しないマッチングのための正規表現を作成する
addcslashes /// string addcslashes ( string $str , string $charlist )\nC 言語と同様にスラッシュで文字列をクォートする
addslashes /// string addslashes ( string $str )\n文字列をスラッシュでクォートする
bin2hex /// string bin2hex ( string $str )\nバイナリデータを16進表現に変換する
chop /// rtrim のエイリアス
chr /// string chr ( int $ascii )\n特定の文字を返す
chunk_split /// string chunk_split ( string $body [, int $chunklen [, string $end ]] )\n文字列をより小さな部分に分割する
convert_cyr_string /// string convert_cyr_string ( string $str , string $from , string $to )\nキリル文字セットを他のものに変換する
convert_uudecode /// string convert_uudecode ( string $data )\nuuencode された文字列をデコードする
convert_uuencode /// string convert_uuencode ( string $data )\n文字列を uuencode する
count_chars /// mixed count_chars ( string $string [, int $mode= 0 ] )\n文字列で使用されている文字に関する情報を返す
crc32 /// int crc32 ( string $str )\n文字列の crc32 多項式計算を行う
crypt /// string crypt ( string $str [, string $salt ] )\n文字列の一方向の暗号化 (ハッシュ化) を行う
echo /// void echo ( string $arg1 [, string $... ] )\n1 つ以上の文字列を出力する
explode /// array explode ( string $delimiter , string $string [, int $limit= -1 ] )\n文字列を文字列により分割する
fprintf /// int fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] )\nフォーマットされた文字列をストリームに書き込む
get_html_translation_table /// array get_html_translation_table ([ int $table= HTML_SPECIALCHARS [, int $quote_style= ENT_COMPAT ]] )\nhtmlspecialchars および htmlentities で使用される変換テーブルを返す
hebrev /// string hebrev ( string $hebrew_text [, int $max_chars_per_line= 0 ] )\n論理表記のヘブライ語を物理表記に変換する
hebrevc /// string hebrevc ( string $hebrew_text [, int $max_chars_per_line= 0 ] )\n論理表記のヘブライ語を、改行の変換も含めて物理表記に変換する
html_entity_decode /// string html_entity_decode ( string $string [, int $quote_style= ENT_COMPAT [, string $charset ]] )\nHTML エンティティを適切な文字に変換する
htmlentities /// string htmlentities ( string $string [, int $quote_style= ENT_COMPAT [, string $charset [, bool $double_encode= true ]]] )\n適用可能な文字を全て HTML エンティティに変換する
htmlspecialchars_decode /// string htmlspecialchars_decode ( string $string [, int $quote_style= ENT_COMPAT ] )\n特殊な HTML エンティティを文字に戻す
htmlspecialchars /// string htmlspecialchars ( string $string [, int $quote_style= ENT_COMPAT [, string $charset [, bool $double_encode= true ]]] )\n特殊文字を HTML エンティティに変換する
implode /// string implode ( string $glue , array $pieces )\n配列要素を文字列により連結する
join /// implode のエイリアス
lcfirst /// string lcfirst ( string $str )\n文字列の最初の文字を小文字にする
levenshtein /// int levenshtein ( string $str1 , string $str2 )\n二つの文字列のレーベンシュタイン距離を計算する
localeconv /// array localeconv ( void )\n数値に関するフォーマット情報を得る
ltrim /// string ltrim ( string $str [, string $charlist ] )\n文字列の最初から空白 (もしくはその他の文字) を取り除く
md5_file /// string md5_file ( string $filename [, bool $raw_output= false ] )\n指定したファイルのMD5ハッシュ値を計算する
md5 /// string md5 ( string $str [, bool $raw_output= false ] )\n文字列のmd5ハッシュ値を計算する
metaphone /// string metaphone ( string $str [, int $phones= 0 ] )\n文字列の metaphone キーを計算する
money_format /// string money_format ( string $format , float $number )\n数値を金額文字列にフォーマットする
nl_langinfo /// string nl_langinfo ( int $item )\n言語およびロケール情報を検索する
nl2br /// string nl2br ( string $string [, bool $is_xhtml= true ] )\n改行文字の前に HTML の改行タグを挿入する
number_format /// string number_format ( float $number [, int $decimals ] )\n数字を千位毎にグループ化してフォーマットする
ord /// int ord ( string $string )\n文字の ASCII 値を返す
parse_str /// void parse_str ( string $str [, array &$arr ] )\n文字列を処理し、変数に代入する
print /// int print ( string $arg )\n文字列を出力する
printf /// int printf ( string $format [, mixed $args [, mixed $... ]] )\nフォーマット済みの文字列を出力する
quoted_printable_decode /// string quoted_printable_decode ( string $str )\nquoted-printable 文字列を 8 ビット文字列に変換する
quoted_printable_encode /// string quoted_printable_encode ( string $str )\n8 ビット文字列を quoted-printable 文字列に変換する
quotemeta /// string quotemeta ( string $str )\nメタ文字をクォートする
rtrim /// string rtrim ( string $str [, string $charlist ] )\n文字列の最後から空白 (もしくは他の文字) を削除する
setlocale /// string setlocale ( int $category , string $locale [, string $... ] )\nロケール情報を設定する
sha1_file /// string sha1_file ( string $filename [, bool $raw_output= false ] )\nファイルの sha1 ハッシュを計算する
sha1 /// string sha1 ( string $str [, bool $raw_output= false ] )\n文字列の sha1 ハッシュを計算する
similar_text /// int similar_text ( string $first , string $second [, float &$percent ] )\n二つの文字列の間の類似性を計算する
soundex /// string soundex ( string $str )\n文字列の soundex キーを計算する
sprintf /// string sprintf ( string $format [, mixed $args [, mixed $... ]] )\nフォーマットされた文字列を返す
sscanf /// mixed sscanf ( string $str , string $format [, mixed &$... ] )\nフォーマット文字列に基づき入力を処理する
str_getcsv /// array str_getcsv ( string $input [, string $delimiter [, string $enclosure [, string $escape ]]] )\nCSV 文字列をパースして配列に格納する
str_ireplace /// mixed str_ireplace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )\n大文字小文字を区別しない str_replace
str_pad /// string str_pad ( string $input , int $pad_length [, string $pad_string= " " [, int $pad_type= STR_PAD_RIGHT ]] )\n文字列を固定長の他の文字列で埋める
str_repeat /// string str_repeat ( string $input , int $multiplier )\n文字列を反復する
str_replace /// mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )\n検索文字列に一致したすべての文字列を置換する
str_rot13 /// string str_rot13 ( string $str )\n文字列に rot13 変換を行う
str_shuffle /// string str_shuffle ( string $str )\n文字列をランダムにシャッフルする
str_split /// array str_split ( string $string [, int $split_length= 1 ] )\n文字列を配列に変換する
str_word_count /// mixed str_word_count ( string $string [, int $format= 0 [, string $charlist ]] )\n文字列に使用されている単語についての情報を返す
strcasecmp /// int strcasecmp ( string $str1 , string $str2 )\n大文字小文字を区別しないバイナリセーフな文字列比較を行う
strchr /// strstr のエイリアス
strcmp /// int strcmp ( string $str1 , string $str2 )\nバイナリセーフな文字列比較
strcoll /// int strcoll ( string $str1 , string $str2 )\nロケールに基づく文字列比較
strcspn /// int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )\nマスクにマッチしない最初のセグメントの長さを返す
strip_tags /// string strip_tags ( string $str [, string $allowable_tags ] )\n文字列から HTML および PHP タグを取り除く
stripcslashes /// string stripcslashes ( string $str )\naddcslashes でクォートされた文字列をアンクォートする
stripos /// int stripos ( string $haystack , string $needle [, int $offset= 0 ] )\n大文字小文字を区別せずに文字列が最初に現れる位置を探す
stripslashes /// string stripslashes ( string $str )\nクォートされた文字列のクォート部分を取り除く
stristr /// string stristr ( string $haystack , mixed $needle [, bool $before_needle= false ] )\n大文字小文字を区別しない strstr
strlen /// int strlen ( string $string )\n文字列の長さを得る
strnatcasecmp /// int strnatcasecmp ( string $str1 , string $str2 )\n"自然順"アルゴリズムにより大文字小文字を区別しない文字列比較を行う
strnatcmp /// int strnatcmp ( string $str1 , string $str2 )\n"自然順"アルゴリズムにより文字列比較を行う
strncasecmp /// int strncasecmp ( string $str1 , string $str2 , int $len )\nバイナリセーフで大文字小文字を区別しない文字列比較を、最初の n 文字について行う
strncmp /// int strncmp ( string $str1 , string $str2 , int $len )\n最初の n 文字についてバイナリセーフな文字列比較を行う
strpbrk /// string strpbrk ( string $haystack , string $char_list )\n文字列の中から任意の文字を探す
strpos /// int strpos ( string $haystack , mixed $needle [, int $offset= 0 ] )\n文字列が最初に現れる場所を見つける
strrchr /// string strrchr ( string $haystack , mixed $needle )\n文字列中に文字が最後に現れる場所を取得する
strrev /// string strrev ( string $string )\n文字列を逆順にする
strripos /// int strripos ( string $haystack , string $needle [, int $offset= 0 ] )\n文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れた位置を探す
strrpos /// int strrpos ( string $haystack , string $needle [, int $offset= 0 ] )\n文字列中に、ある文字が最後に現れる場所を探す
strspn /// int strspn ( string $str1 , string $str2 [, int $start [, int $length ]] )\nマスクに一致する最初のセグメントの長さを返す
strstr /// string strstr ( string $haystack , mixed $needle [, bool $before_needle= false ] )\n文字列が最初に現れる位置を見つける
strtok /// string strtok ( string $str , string $token )\n文字列をトークンに分割する
strtolower /// string strtolower ( string $str )\n文字列を小文字にする
strtoupper /// string strtoupper ( string $string )\n文字列を大文字にする
strtr /// string strtr ( string $str , string $from , string $to )\n特定の文字を変換する
substr_compare /// int substr_compare ( string $main_str , string $str , int $offset [, int $length= 0 [, bool $case_insensitivity= false ]] )\n指定した位置から指定した長さの 2 つの文字列について、バイナリ対応で比較する
substr_count /// int substr_count ( string $haystack , string $needle [, int $offset= 0 [, int $length ]] )\n副文字列の出現回数を数える
substr_replace /// mixed substr_replace ( mixed $string , string $replacement , int $start [, int $length ] )\n文字列の一部を置換する
substr /// string substr ( string $string , int $start [, int $length ] )\n文字列の一部分を返す
trim /// string trim ( string $str [, string $charlist ] )\n文字列の先頭および末尾にあるホワイトスペースを取り除く
ucfirst /// string ucfirst ( string $str )\n文字列の最初の文字を大文字にする
ucwords /// string ucwords ( string $str )\n文字列の各単語の最初の文字を大文字にする
vfprintf /// int vfprintf ( resource $handle , string $format , array $args )\nフォーマットされた文字列をストリームに書き込む
vprintf /// int vprintf ( string $format , array $args )\nフォーマットされた文字列を出力する
vsprintf /// string vsprintf ( string $format , array $args )\nフォーマットされた文字列を返す
wordwrap /// string wordwrap ( string $str [, int $width= 75 [, string $break= "\n" [, bool $cut= false ]]] )\n文字列分割文字を使用して指定した文字数数に文字列を分割する
array_change_key_case /// array array_change_key_case ( array $input [, int $case= CASE_LOWER ] )\n配列のすべてのキーを変更する
array_chunk /// array array_chunk ( array $input , int $size [, bool $preserve_keys= false ] )\n配列を分割する
array_combine /// array array_combine ( array $keys , array $values )\n一方の配列をキーとして、もう一方の配列を値として、ひとつの配列を生成する
array_count_values /// array array_count_values ( array $input )\n配列の値の数を数える
array_diff_assoc /// array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )\n追加された添字の確認を含めて配列の差を計算する
array_diff_key /// array array_diff_key ( array $array1 , array $array2 [, array $... ] )\nキーを基準にして配列の差を計算する
array_diff_uassoc /// array array_diff_uassoc ( array $array1 , array $array2 [, array $... ], callback $key_compare_func )\nユーザが指定したコールバック関数を利用し、 追加された添字の確認を含めて配列の差を計算する
array_diff_ukey /// array array_diff_ukey ( array $array1 , array $array2 [, array $ ... ], callback $key_compare_func )\nキーを基準にし、コールバック関数を用いて配列の差を計算する
array_diff /// array array_diff ( array $array1 , array $array2 [, array $ ... ] )\n配列の差を計算する
array_fill_keys /// array array_fill_keys ( array $keys , mixed $value )\nキーを指定して、配列を値で埋める
array_fill /// array array_fill ( int $start_index , int $num , mixed $value )\n配列を指定した値で埋める
array_filter /// array array_filter ( array $input [, callback $callback ] )\nコールバック関数を使用して、配列の要素をフィルタリングする
array_flip /// array array_flip ( array $trans )\n配列のキーと値を反転する
array_intersect_assoc /// array array_intersect_assoc ( array $array1 , array $array2 [, array $ ... ] )\n追加された添字の確認も含めて配列の共通項を確認する
array_intersect_key /// array array_intersect_key ( array $array1 , array $array2 [, array $ ... ] )\nキーを基準にして配列の共通項を計算する
array_intersect_uassoc /// array array_intersect_uassoc ( array $array1 , array $array2 [, array $ ... ], callback $key_compare_func )\n追加された添字の確認も含め、コールバック関数を用いて 配列の共通項を確認する
array_intersect_ukey /// array array_intersect_ukey ( array $array1 , array $array2 [, array $... ], callback $key_compare_func )\nキーを基準にし、コールバック関数を用いて 配列の共通項を計算する
array_intersect /// array array_intersect ( array $array1 , array $array2 [, array $ ... ] )\n配列の共通項を計算する
array_key_exists /// bool array_key_exists ( mixed $key , array $search )\n指定したキーまたは添字が配列にあるかどうかを調べる
array_keys /// array array_keys ( array $input [, mixed $search_value [, bool $strict= false ]] )\n配列のキーをすべて返す
array_map /// array array_map ( callback $callback , array $arr1 [, array $... ] )\n指定した配列の要素にコールバック関数を適用する
array_merge_recursive /// array array_merge_recursive ( array $array1 [, array $... ] )\n二つ以上の配列を再帰的にマージする
array_merge /// array array_merge ( array $array1 [, array $array2 [, array $... ]] )\nひとつまたは複数の配列をマージする
array_multisort /// bool array_multisort ( array $arr [, mixed $arg [, mixed $... ]] )\n複数の多次元の配列をソートする
array_pad /// array array_pad ( array $input , int $pad_size , mixed $pad_value )\n指定長、指定した値で配列を埋める
array_pop /// mixed array_pop ( array &$array )\n配列の末尾から要素を取り除く
array_product /// number array_product ( array $array )\n配列の値の積を計算する
array_push /// int array_push ( array &$array , mixed $var [, mixed $... ] )\n一つ以上の要素を配列の最後に追加する
array_rand /// mixed array_rand ( array $input [, int $num_req= 1 ] )\n配列から一つ以上の要素をランダムに取得する
array_reduce /// mixed array_reduce ( array $input , callback $function [, int $initial ] )\nコールバック関数を用いて配列を普通の値に変更することにより、配列を再帰的に減らす
array_reverse /// array array_reverse ( array $array [, bool $preserve_keys= false ] )\n要素を逆順にした配列を返す
array_search /// mixed array_search ( mixed $needle , array $haystack [, bool $strict ] )\n指定した値を配列で検索し、見つかった場合に対応するキーを返す
array_shift /// mixed array_shift ( array &$array )\n配列の先頭から要素を一つ取り出す
array_slice /// array array_slice ( array $array , int $offset [, int $length [, bool $preserve_keys= false ]] )\n配列の一部を展開する
array_splice /// array array_splice ( array &$input , int $offset [, int $length= 0 [, mixed $replacement ]] )\n配列の一部を削除し、他の要素で置換する
array_sum /// number array_sum ( array $array )\n配列の中の値の合計を計算する
array_udiff_assoc /// array array_udiff_assoc ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func )\nデータの比較にコールバック関数を用い、 追加された添字の確認を含めて配列の差を計算する
array_udiff_uassoc /// array array_udiff_uassoc ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func , callback $key_compare_func )\nデータと添字の比較にコールバック関数を用い、 追加された添字の確認を含めて配列の差を計算する
array_udiff /// array array_udiff ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func )\nデータの比較にコールバック関数を用い、配列の差を計算する
array_uintersect_assoc /// array array_uintersect_assoc ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func )\nデータの比較にコールバック関数を用い、 追加された添字の確認も含めて配列の共通項を計算する
array_uintersect_uassoc /// array array_uintersect_uassoc ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func , callback $key_compare_func )\nデータと添字の比較にコールバック関数を用い、 追加された添字の確認も含めて配列の共通項を計算する
array_uintersect /// array array_uintersect ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func )\nデータの比較にコールバック関数を用い、配列の共通項を計算する
array_unique /// array array_unique ( array $array [, int $sort_flags= SORT_REGULAR ] )\n配列から重複した値を削除する
array_unshift /// int array_unshift ( array &$array , mixed $var [, mixed $... ] )\n一つ以上の要素を配列の最初に加える
array_values /// array array_values ( array $input )\n配列の全ての値を返す
array_walk_recursive /// bool array_walk_recursive ( array &$input , callback $funcname [, mixed $userdata ] )\n配列の全ての要素に、ユーザー関数を再帰的に適用する
array_walk /// bool array_walk ( array &$array , callback $funcname [, mixed $userdata ] )\n配列の全ての要素にユーザ関数を適用する
array /// array array ([ mixed $... ] )\n配列を生成する
arsort /// bool arsort ( array &$array [, int $sort_flags= SORT_REGULAR ] )\n連想キーと要素との関係を維持しつつ配列を逆順にソートする
asort /// bool asort ( array &$array [, int $sort_flags= SORT_REGULAR ] )\n連想キーと要素との関係を維持しつつ配列をソートする
compact /// array compact ( mixed $varname [, mixed $... ] )\n変数名とその値から配列を作成する
count /// int count ( mixed $var [, int $mode= COUNT_NORMAL ] )\n変数に含まれるすべての要素、 あるいはオブジェクトに含まれるプロパティの数を数える
current /// mixed current ( array &$array )\n配列内の現在の要素を返す
each /// array each ( array &$array )\n配列から現在のキーと値のペアを返して、カーソルを進める
end /// mixed end ( array &$array )\n配列の内部ポインタを最終要素にセットする
extract /// int extract ( array $var_array [, int $extract_type= EXTR_OVERWRITE [, string $prefix ]] )\n配列からシンボルテーブルに変数をインポートする
in_array /// bool in_array ( mixed $needle , array $haystack [, bool $strict ] )\n配列に値があるかチェックする
key /// mixed key ( array &$array )\n配列からキーを取り出す
krsort /// bool krsort ( array &$array [, int $sort_flags= SORT_REGULAR ] )\n配列をキーで逆順にソートする
ksort /// bool ksort ( array &$array [, int $sort_flags= SORT_REGULAR ] )\n配列をキーでソートする
list /// void list ( mixed $varname [, mixed $... ] )\n配列と同様の形式で、複数の変数への代入を行う
natcasesort /// bool natcasesort ( array &$array )\n大文字小文字を区別しない"自然順"アルゴリズムを用いて配列をソートする
natsort /// bool natsort ( array &$array )\n"自然順"アルゴリズムで配列をソートする
next /// mixed next ( array &$array )\n内部配列ポインタを進める
pos /// current のエイリアス
prev /// mixed prev ( array &$array )\n内部の配列ポインタをひとつ前に戻す
range /// array range ( mixed $low , mixed $high [, number $step ] )\nある範囲の整数を有する配列を作成する
reset /// mixed reset ( array &$array )\n配列の内部ポインタを先頭の要素にセットする
rsort /// bool rsort ( array &$array [, int $sort_flags= SORT_REGULAR ] )\n配列を逆順にソートする
shuffle /// bool shuffle ( array &$array )\n配列をシャッフルする
sizeof /// count のエイリアス
sort /// bool sort ( array &$array [, int $sort_flags= SORT_REGULAR ] )\n配列をソートする
uasort /// bool uasort ( array &$array , callback $cmp_function )\nユーザ定義の比較関数で配列をソートし、連想インデックスを保持する
uksort /// bool uksort ( array &$array , callback $cmp_function )\nユーザ定義の比較関数を用いて、キーで配列をソートする
usort /// bool usort ( array &$array , callback $cmp_function )\nユーザー定義の比較関数を使用して、配列を値でソートする
call_user_method_array /// mixed call_user_method_array ( string $method_name , object &$obj , array $params )\nパラメータの配列を指定してユーザメソッドをコールする [古い関数]
call_user_method /// mixed call_user_method ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )\n指定したオブジェクトのユーザーメソッドをコールする [古い関数]
class_exists /// bool class_exists ( string $class_name [, bool $autoload= true ] )\nクラスが定義済みかどうかを確認する
get_called_class /// string get_called_class ( void )\n"静的遅延束縛" のクラス名
get_class_methods /// array get_class_methods ( mixed $class_name )\nクラスメソッドの名前を取得する
get_class_vars /// array get_class_vars ( string $class_name )\nクラスのデフォルトプロパティを取得する
get_class /// string get_class ([ object $object ] )\nオブジェクトのクラス名を返す
get_declared_classes /// array get_declared_classes ( void )\n定義済のクラスの名前を配列として返す
get_declared_interfaces /// array get_declared_interfaces ( void )\n宣言されている全てのインターフェースの配列を返す
get_object_vars /// array get_object_vars ( object $object )\n指定したオブジェクトのプロパティを取得する
get_parent_class /// string get_parent_class ([ mixed $object ] )\nオブジェクトの親クラスの名前を取得する
interface_exists /// bool interface_exists ( string $interface_name [, bool $autoload= true ] )\nインターフェースが宣言されているかどうかを確認する
is_a /// bool is_a ( object $object , string $class_name )\nオブジェクトがこのクラスのものであるか、このクラスをその親クラスのひとつとしているかどうかを調べる
is_subclass_of /// bool is_subclass_of ( mixed $object , string $class_name )\nあるオブジェクトが指定したクラスのサブクラスに属するかどうかを調べる
method_exists /// bool method_exists ( mixed $object , string $method_name )\nクラスメソッドが存在するかどうかを確認する
property_exists /// bool property_exists ( mixed $class , string $property )\nオブジェクトもしくはクラスにプロパティが存在するかどうかを調べる
classkit_import /// array classkit_import ( string $filename )\n新しいクラスメソッドの定義をファイルから読み込む
classkit_method_add /// bool classkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags= CLASSKIT_ACC_PUBLIC ] )\n指定したクラスに、新しいメソッドを動的に追加する
classkit_method_copy /// bool classkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )\nあるクラスのメソッドを別のクラスにコピーする
classkit_method_redefine /// bool classkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags= CLASSKIT_ACC_PUBLIC ] )\n指定されたメソッドのコードを動的に変更する
classkit_method_remove /// bool classkit_method_remove ( string $classname , string $methodname )\n指定したメソッドを動的に削除する
classkit_method_rename /// bool classkit_method_rename ( string $classname , string $methodname , string $newname )\n指定したメソッドの名前を動的に変更する
ctype_alnum /// bool ctype_alnum ( string $text )\n英数字かどうかを調べる
ctype_alpha /// bool ctype_alpha ( string $text )\n英字かどうかを調べる
ctype_cntrl /// bool ctype_cntrl ( string $text )\n制御文字かどうかを調べる
ctype_digit /// bool ctype_digit ( string $text )\n数字かどうかを調べる
ctype_graph /// bool ctype_graph ( string $text )\n空白以外の印字可能な文字かどうかを調べる
ctype_lower /// bool ctype_lower ( string $text )\n小文字かどうかを調べる
ctype_print /// bool ctype_print ( string $text )\n印字可能な文字かどうかを調べる
ctype_punct /// bool ctype_punct ( string $text )\n空白、英数字以外の出力可能な文字かどうかを調べる
ctype_space /// bool ctype_space ( string $text )\n空白文字かどうか調べる
ctype_upper /// bool ctype_upper ( string $text )\n大文字かどうか調べる
ctype_xdigit /// bool ctype_xdigit ( string $text )\n16 進数を表す文字かどうかを調べる
filter_has_var /// bool filter_has_var ( int $type , string $variable_name )\n指定した型の変数が存在するかどうかを調べる
filter_id /// int filter_id ( string $filtername )\nフィルタの名前からフィルタ ID を返す
filter_input_array /// mixed filter_input_array ( int $type [, mixed $definition ] )\n外部から変数を受け取り、オプションでそれらをフィルタリングする
filter_input /// mixed filter_input ( int $type , string $variable_name [, int $filter= FILTER_DEFAULT [, mixed $options ]] )\n指定した名前の変数を外部から受け取り、オプションでそれをフィルタリングする
filter_list /// array filter_list ( void )\nサポートされるフィルタの一覧を返す
filter_var_array /// mixed filter_var_array ( array $data [, mixed $definition ] )\n複数の変数を受け取り、オプションでそれらをフィルタリングする
filter_var /// mixed filter_var ( mixed $variable [, int $filter= FILTER_DEFAULT [, mixed $options ]] )\n指定したフィルタでデータをフィルタリングする
call_user_func_array /// mixed call_user_func_array ( callback $function , array $param_arr )\nパラメータの配列を指定してユーザ関数をコールする
call_user_func /// mixed call_user_func ( callback $function [, mixed $parameter [, mixed $... ]] )\n最初の引数で指定したユーザ関数をコールする
create_function /// string create_function ( string $args , string $code )\n匿名関数 (ラムダ形式) を作成する
func_get_arg /// mixed func_get_arg ( int $arg_num )\n引数のリストから要素をひとつ返す
func_get_args /// array func_get_args ( void )\n関数の引数リストを配列として返す
func_num_args /// int func_num_args ( void )\n関数に渡された引数の数を返す
function_exists /// bool function_exists ( string $function_name )\n指定した関数が定義されている場合に TRUE を返す
get_defined_functions /// array get_defined_functions ( void )\n定義済みの全ての関数を配列で返す
register_shutdown_function /// void register_shutdown_function ( callback $function [, mixed $parameter [, mixed $... ]] )\nシャットダウン時に実行する関数を登録する
register_tick_function /// bool register_tick_function ( callback $function [, mixed $arg [, mixed $... ]] )\n各 tick で実行する関数を登録する
unregister_tick_function /// void unregister_tick_function ( string $function_name )\n各 tick の実行用の関数の登録を解除する
aggregate_info /// array aggregate_info ( object $object )\n指定したオブジェクトの集約情報を取得する
aggregate_methods_by_list /// void aggregate_methods_by_list ( object $object , string $class_name , array $methods_list [, bool $exclude ] )\n選択したクラスメソッドを、動的にオブジェクトに集約する
aggregate_methods_by_regexp /// void aggregate_methods_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude ] )\n正規表現を使用して選択したクラスメソッドを、 動的にオブジェクトに集約する
aggregate_methods /// void aggregate_methods ( object $object , string $class_name )\nクラスのメソッドを、動的にオブジェクトに集約する
aggregate_properties_by_list /// void aggregate_properties_by_list ( object $object , string $class_name , array $properties_list [, bool $exclude ] )\n選択したクラスプロパティを、動的にオブジェクトに集約する
aggregate_properties_by_regexp /// void aggregate_properties_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude ] )\n正規表現を使用して選択したクラスプロパティを、 動的にオブジェクトに集約する
aggregate_properties /// void aggregate_properties ( object $object , string $class_name )\nクラスのプロパティを、動的にオブジェクトに集約する
aggregate /// void aggregate ( object $object , string $class_name )\nメソッドおよびプロパティの動的なクラス/オブジェクト集約を行う
aggregation_info /// aggregate_info のエイリアス
deaggregate /// void deaggregate ( object $object [, string $class_name ] )\n集約されたメソッドやプロパティをオブジェクトから取り除く
debug_zval_dump /// void debug_zval_dump ( mixed $variable )\n内部的な Zend の値を表す文字列をダンプする
doubleval /// floatval のエイリアス
empty /// bool empty ( mixed $var )\n変数が空であるかどうかを検査する
floatval /// float floatval ( mixed $var )\n変数の float 値を取得する
get_defined_vars /// array get_defined_vars ( void )\n全ての定義済の変数を配列で返す
get_resource_type /// string get_resource_type ( resource $handle )\nリソース型を返す
gettype /// string gettype ( mixed $var )\n変数の型を取得する
import_request_variables /// bool import_request_variables ( string $types [, string $prefix ] )\nGET/POST/Cookie 変数をグローバルスコープにインポートする
intval /// int intval ( mixed $var [, int $base= 10 ] )\n変数の整数としての値を取得する
is_array /// bool is_array ( mixed $var )\n変数が配列かどうかを検査する
is_binary /// bool is_binary ( mixed $var )\n変数がネイティブバイナリ文字列かどうかを調べる
is_bool /// bool is_bool ( mixed $var )\n変数が boolean であるかを調べる
is_buffer /// bool is_buffer ( mixed $var )\n変数がネイティブ unicode あるいはバイナリ文字列かどうかを調べる
is_callable /// bool is_callable ( mixed $var [, bool $syntax_only= false [, string &$callable_name ]] )\n引数が、関数としてコール可能な構造であるかどうかを調べる
is_double /// is_float のエイリアス
is_float /// bool is_float ( mixed $var )\n変数の型が float かどうか調べる
is_int /// bool is_int ( mixed $var )\n変数が整数型かどうかを検査する
is_integer /// is_int のエイリアス
is_long /// is_int のエイリアス
is_null /// bool is_null ( mixed $var )\n変数が NULL かどうか調べる
is_numeric /// bool is_numeric ( mixed $var )\n変数が数字または数値形式の文字列であるかを調べる
is_object /// bool is_object ( mixed $var )\n変数がオブジェクトかどうかを検査する
is_real /// is_float のエイリアス
is_resource /// bool is_resource ( mixed $var )\n変数がリソースかどうかを調べる
is_scalar /// bool is_scalar ( mixed $var )\n変数がスカラかどうかを調べる
is_string /// bool is_string ( mixed $var )\n変数の型が文字列かどうかを調べる
is_unicode /// bool is_unicode ( mixed $var )\n変数が unicode 文字列かどうかを調べる
isset /// bool isset ( mixed $var [, mixed $var [, $... ]] )\n変数がセットされているかどうかを検査する
print_r /// mixed print_r ( mixed $expression [, bool $return= false ] )\n指定した変数に関する情報を解りやすく出力する
serialize /// string serialize ( mixed $value )\n値の保存可能な表現を生成する
settype /// bool settype ( mixed &$var , string $type )\n変数の型をセットする
strval /// string strval ( mixed $var )\n変数の文字列としての値を得ます
unserialize /// mixed unserialize ( string $str )\n保存用表現から PHP の値を生成する
unset /// void unset ( mixed $var [, mixed $var [, mixed $... ]] )\n指定した変数の割当を解除する
var_dump /// void var_dump ( mixed $expression [, mixed $expression [, $... ]] )\n変数に関する情報をダンプする
var_export /// mixed var_export ( mixed $expression [, bool $return= false ] )\n変数の文字列表現を出力または返す
oauth_urlencode /// string oauth_urlencode ( string $uri )\nURI を RFC3686 形式でエンコードする
SCA_LocalProxy::createDataObject /// SDO_DataObject SCA_LocalProxy::createDataObject ( string $type_namespace_uri , string $type_name )\nSDO を作成する
SCA_SoapProxy::createDataObject /// SDO_DataObject SCA_SoapProxy::createDataObject ( string $type_namespace_uri , string $type_name )\nSDO を作成する
SCA::createDataObject /// SDO_DataObject SCA::createDataObject ( string $type_namespace_uri , string $type_name )\nSDO を作成する
SCA::getService /// mixed SCA::getService ( string $target [, string $binding [, array $config ]] )\nサービスのプロキシを取得する
is_soap_fault /// bool is_soap_fault ( mixed $object )\nSOAP コールが失敗したかどうかを調べる
use_soap_error_handler /// bool use_soap_error_handler ([ bool $handler ] )\nSOAP エラーハンドラを使用するかどうかを設定する
xmlrpc_decode_request /// mixed xmlrpc_decode_request ( string $xml , string &$method [, string $encoding ] )\nXML をネイティブなPHP 型にデコードする
xmlrpc_decode /// mixed xmlrpc_decode ( string $xml [, string $encoding ] )\nXML をネイティブな PHP 型にデコードする
xmlrpc_encode_request /// string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ] )\nメソッドリクエスト用の XML を生成する
xmlrpc_encode /// string xmlrpc_encode ( mixed $value )\nPHP の値に関する XML を生成する
xmlrpc_get_type /// string xmlrpc_get_type ( mixed $value )\nPHP の値に関する xmlrpc 型を取得する
xmlrpc_is_fault /// bool xmlrpc_is_fault ( array $arg )\n配列の値が XMLRPC の失敗であるかどうかを調べる
xmlrpc_parse_method_descriptions /// array xmlrpc_parse_method_descriptions ( string $xml )\nXML を、メソッド説明のリストにデコードする
xmlrpc_server_add_introspection_data /// int xmlrpc_server_add_introspection_data ( resource $server , array $desc )\nintrospection ドキュメントを追加する
xmlrpc_server_call_method /// string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ] )\nXML リクエストをパースし、メソッドをコールする
xmlrpc_server_create /// resource xmlrpc_server_create ( void )\nxmlrpc サーバを作成する
xmlrpc_server_destroy /// int xmlrpc_server_destroy ( resource $server )\nサーバリソースを破棄する
xmlrpc_server_register_introspection_callback /// bool xmlrpc_server_register_introspection_callback ( resource $server , string $function )\nドキュメントを生成する PHP 関数を登録する
xmlrpc_server_register_method /// bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function )\nメソッド名が一致するメソッドリソースに PHP 関数を登録する
xmlrpc_set_type /// bool xmlrpc_set_type ( string &$value , string $type )\nPHP 文字列型用に xmlrpc 型、base64 または datetime を設定する
dotnet_load /// int dotnet_load ( string $assembly_name [, string $datatype_name [, int $codepage ]] )\nDOTNET モジュールをロードする
com_addref /// void com_addref ( void )\nコンポーネントの参照カウンタを増やす [非推奨]
com_create_guid /// string com_create_guid ( void )\nグローバルユニーク ID (GUID) を生成する
com_event_sink /// bool com_event_sink ( variant $comobject , object $sinkobject [, mixed $sinkinterface ] )\nCOM オブジェクトのイベントを PHP オブジェクトに接続する
com_get_active_object /// variant com_get_active_object ( string $progid [, int $code_page ] )\nすでに実行中の COM オブジェクトのインスタンスへのハンドルを返す
com_get /// COM コンポーネントのプロパティの値を得る [非推奨]
com_invoke /// mixed com_invoke ( resource $com_object , string $function_name [, mixed $function_parameters ] )\nCOM コンポーネントのメソッドをコールする [非推奨]
com_isenum /// bool com_isenum ( variant $com_module )\nCOM オブジェクトが IEnumVariant インターフェースを実装しているかどうかを示す [非推奨]
com_load_typelib /// bool com_load_typelib ( string $typelib_name [, bool $case_insensitive ] )\nタイプライブラリを読み込む
com_load /// COM コンポーネントへの新規リファレンスを作成する [非推奨]
com_message_pump /// bool com_message_pump ([ int $timeoutms ] )\nCOM メッセージを処理し、timeoutms ミリ秒の間待つ
com_print_typeinfo /// bool com_print_typeinfo ( object $comobject [, string $dispinterface [, bool $wantsink ]] )\nディスパッチインターフェースのために、PHP のクラス定義を出力する
com_propget /// com_get のエイリアス
com_propput /// com_set のエイリアス
com_propset /// com_set のエイリアス
com_release /// void com_release ( void )\nコンポーネントリファレンスカウンタを減らす [廃止]
com_set /// COM コンポーネントのプロパティに値を代入する
variant_abs /// mixed variant_abs ( mixed $val )\nvariant の絶対値を返す
variant_add /// mixed variant_add ( mixed $left , mixed $right )\n2 つの variant 値を「加算」し、結果を返す
variant_and /// mixed variant_and ( mixed $left , mixed $right )\n2 つの variant の論理積を計算し、結果を返す
variant_cast /// variant variant_cast ( variant $variant , int $type )\nvariant を、別の型の新しい variant に変換する
variant_cat /// mixed variant_cat ( mixed $left , mixed $right )\n2 つの variant 値を連結し、その結果を返す
variant_cmp /// int variant_cmp ( mixed $left , mixed $right [, int $lcid [, int $flags ]] )\n2 つの variant を比較する
variant_date_from_timestamp /// variant variant_date_from_timestamp ( int $timestamp )\nUnix タイムスタンプを、日付形式の variant で返す
variant_date_to_timestamp /// int variant_date_to_timestamp ( variant $variant )\n日付/時刻の variant 値を Unix タイムスタンプに変換する
variant_div /// mixed variant_div ( mixed $left , mixed $right )\n2 つの variant の除算結果を返す
variant_eqv /// mixed variant_eqv ( mixed $left , mixed $right )\n2 つの variant のビット値が等しいかどうかを調べる
variant_fix /// mixed variant_fix ( mixed $variant )\nvariant の整数部を返す
variant_get_type /// int variant_get_type ( variant $variant )\nvariant オブジェクトの型を返す
variant_idiv /// mixed variant_idiv ( mixed $left , mixed $right )\nvariants を整数に変換し、除算の結果を返す
variant_imp /// mixed variant_imp ( mixed $left , mixed $right )\n2 つの variant のビット implication を行う
variant_int /// mixed variant_int ( mixed $variant )\nvariant の整数部を返す
variant_mod /// mixed variant_mod ( mixed $left , mixed $right )\n2 つの variant の除算を行い、剰余を返す
variant_mul /// mixed variant_mul ( mixed $left , mixed $right )\n2 つの variant の乗算を行い、その結果を返す
variant_neg /// mixed variant_neg ( mixed $variant )\nvariant の論理否定演算を行う
variant_not /// mixed variant_not ( mixed $variant )\nvariant のビット否定演算を行う
variant_or /// mixed variant_or ( mixed $left , mixed $right )\n2 つの variant の論理和を計算する
variant_pow /// mixed variant_pow ( mixed $left , mixed $right )\n2 つの variant の累乗計算を行い、その結果を返す
variant_round /// mixed variant_round ( mixed $variant , int $decimals )\n指定した桁で variant を丸める
variant_set_type /// void variant_set_type ( variant $variant , int $type )\nvariant を「その場で」別の型に変換する
variant_set /// void variant_set ( variant $variant , mixed $value )\nvariant オブジェクトに新しい値を代入する
variant_sub /// mixed variant_sub ( mixed $left , mixed $right )\n左の variant から右の variant を引き、その結果を返す
variant_xor /// mixed variant_xor ( mixed $left , mixed $right )\n2 つの variant の排他的論理和を計算する
printer_abort /// void printer_abort ( resource $printer_handle )\nプリンタのスプールファイルを削除する
printer_close /// void printer_close ( resource $printer_handle )\nプリンタへの接続を閉じる
printer_create_brush /// resource printer_create_brush ( int $style , string $color )\n新規ブラシを作成する
printer_create_dc /// void printer_create_dc ( resource $printer_handle )\n新規デバイスコンテキストを作成する
printer_create_font /// resource printer_create_font ( string $face , int $height , int $width , int $font_weight , bool $italic , bool $underline , bool $strikeout , int $orientation )\n新規フォントを作成する
printer_create_pen /// resource printer_create_pen ( int $style , int $width , string $color )\n新規ペンを作成する
printer_delete_brush /// void printer_delete_brush ( resource $brush_handle )\nブラシを削除する
printer_delete_dc /// bool printer_delete_dc ( resource $printer_handle )\nデバイスコンテキストを削除する
printer_delete_font /// void printer_delete_font ( resource $font_handle )\nフォントを削除する
printer_delete_pen /// void printer_delete_pen ( resource $pen_handle )\nペンを削除する
printer_draw_bmp /// bool printer_draw_bmp ( resource $printer_handle , string $filename , int $x , int $y [, int $width ], int $height )\nビットマップを描画する
printer_draw_chord /// void printer_draw_chord ( resource $printer_handle , int $rec_x , int $rec_y , int $rec_x1 , int $rec_y1 , int $rad_x , int $rad_y , int $rad_x1 , int $rad_y1 )\n弦を描画する
printer_draw_elipse /// void printer_draw_elipse ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y )\n楕円を描画する
printer_draw_line /// void printer_draw_line ( resource $printer_handle , int $from_x , int $from_y , int $to_x , int $to_y )\n線を描画する
printer_draw_pie /// void printer_draw_pie ( resource $printer_handle , int $rec_x , int $rec_y , int $rec_x1 , int $rec_y1 , int $rad1_x , int $rad1_y , int $rad2_x , int $rad2_y )\n円弧を描画する
printer_draw_rectangle /// void printer_draw_rectangle ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y )\n矩形を描画する
printer_draw_roundrect /// void printer_draw_roundrect ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y , int $width , int $height )\n角が丸い矩形を描画する
printer_draw_text /// void printer_draw_text ( resource $printer_handle , string $text , int $x , int $y )\nテキストを描画する
printer_end_doc /// bool printer_end_doc ( resource $printer_handle )\nドキュメントを閉じる
printer_end_page /// bool printer_end_page ( resource $printer_handle )\nアクティブなページを閉じる
printer_get_option /// mixed printer_get_option ( resource $printer_handle , string $option )\nプリンタ設定データを取得する
printer_list /// array printer_list ( int $enumtype [, string $name [, int $level ]] )\nサーバに登録されたプリンタの配列を返す
printer_logical_fontheight /// int printer_logical_fontheight ( resource $printer_handle , int $height )\n論理フォントの高さを取得する
printer_open /// resource printer_open ([ string $printername ] )\nプリンタへの接続をオープンする
printer_select_brush /// void printer_select_brush ( resource $printer_handle , resource $brush_handle )\nブラシを選択する
printer_select_font /// void printer_select_font ( resource $printer_handle , resource $font_handle )\nフォントを選択する
printer_select_pen /// void printer_select_pen ( resource $printer_handle , resource $pen_handle )\nペンを選択する
printer_set_option /// bool printer_set_option ( resource $printer_handle , int $option , mixed $value )\nプリンタの接続を設定する
printer_start_doc /// bool printer_start_doc ( resource $printer_handle [, string $document ] )\n新規ドキュメントを開始する
printer_start_page /// bool printer_start_page ( resource $printer_handle )\n新規ページを開始する
printer_write /// bool printer_write ( resource $printer_handle , string $content )\nプリンタへデータを書き込む
w32api_deftype /// bool w32api_deftype ( string $typename , string $member1_type , string $member1_name [, string $... [, string $... ]] )\n他の w32api_functions で使用するために型を定義する
w32api_init_dtype /// resource w32api_init_dtype ( string $typename , mixed $value [, mixed $... ] )\nデータ型 typename のインスタンスを作成し、そこに渡された値を代入する
w32api_invoke_function /// mixed w32api_invoke_function ( string $funcname , mixed $argument [, mixed $... ] )\n関数名の後ろに指定された引数を指定し、関数 funcname を実行する
w32api_register_function /// bool w32api_register_function ( string $library , string $function_name , string $return_type )\nライブラリの関数 function_name を PHP に登録する
w32api_set_call_method /// void w32api_set_call_method ( int $method )\n使用するコール方式を設定する
win32_ps_list_procs /// array win32_ps_list_procs ( void )\n稼動中のプロセスの一覧を取得する
win32_ps_stat_mem /// array win32_ps_stat_mem ( void )\nメモリ使用量の統計情報を取得する
win32_ps_stat_proc /// array win32_ps_stat_proc ([ int $pid= 0 ] )\nプロセスの統計情報を取得する
win32_create_service /// mixed win32_create_service ( array $details [, string $machine ] )\nSCM データベースに新しいサービスのエントリを作成する
win32_delete_service /// int win32_delete_service ( string $servicename [, string $machine ] )\nSCM データベースからサービスのエントリを削除する
win32_get_last_control_message /// int win32_get_last_control_message ( void )\nサービスに送信された直近の制御メッセージを返す
win32_query_service_status /// mixed win32_query_service_status ( string $servicename [, string $machine ] )\nサービスの状態を問い合わせる
win32_set_service_status /// bool win32_set_service_status ( int $status )\nサービスの状態を更新する
win32_start_service_ctrl_dispatcher /// mixed win32_start_service_ctrl_dispatcher ( string $name )\nスクリプトを SCM に登録し、指定した名前でサービスとして稼動させる ようにする
win32_start_service /// int win32_start_service ( string $servicename [, string $machine ] )\nサービスを開始する
win32_stop_service /// int win32_stop_service ( string $servicename [, string $machine ] )\nサービスを停止する
dom_import_simplexml /// DOMElement dom_import_simplexml ( SimpleXMLElement $node )\nSimpleXMLElement オブジェクトから DOMElement オブジェクトを取得する
DomAttribute->name /// string name ( void )\n属性の名前を返す
DomAttribute->set_value /// bool set_value ( string $content )\n属性の値を設定する
DomAttribute->specified /// bool specified ( void )\n属性が指定されているかどうか調べる
DomAttribute->value /// string value ( void )\n属性の値を返す
DomDocument->add_root /// domelement DomDocument->add_root ( string $name )\nルートノードを追加する [推奨されません]
DomDocument->create_attribute /// domattribute DomDocument->create_attribute ( string $name , string $value )\n新規属性を作成する
DomDocument->create_cdata_section /// domcdata DomDocument->create_cdata_section ( string $content )\n新規 cdata ノードを作成する
DomDocument->create_comment /// domcomment DomDocument->create_comment ( string $content )\n新規コメントノードを作成する
DomDocument->create_element_ns /// domelement DomDocument->create_element_ns ( string $uri , string $name [, string $prefix ] )\n関連する名前空間を持つ新規要素ノードを作成する
DomDocument->create_element /// domelement DomDocument->create_element ( string $name )\n新規要素ノードを作成する
DomDocument->create_entity_reference /// domentityreference DomDocument->create_entity_reference ( string $content )\nエンティティ参照を作成する
DomDocument->create_processing_instruction /// domprocessinginstruction DomDocument->create_processing_instruction ( string $content )\n新規 PI ノードを作成する
DomDocument->create_text_node /// domtext DomDocument->create_text_node ( string $content )\n新規テキストノードを作成する
DomDocument->doctype /// domdocumenttype DomDocument->doctype ( void )\n文章型を返す
DomDocument->document_element /// domelement DomDocument->document_element ( void )\nルート要素ノードを返す
DomDocument->dump_file /// string DomDocument->dump_file ( string $filename [, bool $compressionmode [, bool $format ]] )\n内部 XML ツリーをファイルにダンプする
DomDocument->dump_mem /// string DomDocument->dump_mem ([ bool $format [, string $encoding ]] )\n内部 XML ツリーを文字列にダンプする
DomDocument->get_element_by_id /// domelement DomDocument->get_element_by_id ( string $id )\n特定の ID を持つ要素を検索する
DomDocument->get_elements_by_tagname /// array DomDocument->get_elements_by_tagname ( string $name )\n文章中に与えられたタグ名を持つノードの配列を返す。 もしくは、見つからない場合は空の配列を返す
DomDocument->html_dump_mem /// string DomDocument->html_dump_mem ( void )\nHTML として文字列に内部 XML ツリーをダンプする
DomDocument->xinclude /// int DomDocument->xinclude ( void )\nDomDocument オブジェクトにおける XIncludes の代替
DomDocumentType->entities /// array entities ( void )\nエンティティの一覧を返す
DomDocumentType->internal_subset /// bool internal_subset ( void )\n内部サブセットを返す
DomDocumentType->name /// string name ( void )\n文章型の名前を返す
DomDocumentType->notations /// array notations ( void )\nノーテーションの一覧を返す
DomDocumentType->public_id /// string PUBLIC_id ( void )\n文章型の PUBLIC ID を返す
DomDocumentType->system_id /// string system_id ( void )\n文章型のSYSTEM ID を返す
DomElement->get_attribute_node /// DomAttribute get_attribute_node ( string $name )\n与えられた属性のノードを返す
DomElement->get_attribute /// string get_attribute ( string $name )\n与えられた属性の値を返す
DomElement->get_elements_by_tagname /// array get_elements_by_tagname ( string $name )\nタグ名により要素を取得する
DomElement->has_attribute /// bool has_attribute ( string $name )\n現在のノードに属性があるかどうかを調べる
DomElement->remove_attribute /// bool remove_attribute ( string $name )\n属性を削除する
DomElement->set_attribute_node /// DomNode set_attribute_node ( DomNode $attr )\n新規属性を追加する
DomElement->set_attribute /// DomAttribute set_attribute ( string $name , string $value )\n属性値を設定する
DomElement->tagname /// string tagname ( void )\n現在の要素名を返す
DomNode->add_namespace /// bool add_namespace ( string $uri , string $prefix )\nノードに名前空間宣言を追加する
DomNode->append_child /// DOMNode append_child ( DOMNode $newnode )\n子ノードの最後に新規に子ノードを追加する
DomNode->append_sibling /// domelement DomNode->append_sibling ( domelement $newnode )\n新規に兄弟をノードに追加する
DomNode->attributes /// array DomNode->attributes ( void )\n属性の一覧を返す
DomNode->child_nodes /// array DomNode->child_nodes ( void )\n子ノードを返す
DomNode->clone_node /// domelement DomNode->clone_node ( void )\nノードを複製する
DomNode->dump_node /// string DomNode->dump_node ( void )\n単一ノードをダンプする
DomNode->first_child /// domelement DomNode->first_child ( void )\n最初の子ノードを返す
DomNode->get_content /// string DomNode->get_content ( void )\nノードの内容を取得する
DomNode->has_attributes /// bool DomNode->has_attributes ( void )\nノードが属性を有しているかを調べる
DomNode->has_child_nodes /// bool DomNode->has_child_nodes ( void )\nノードが子ノードを有しているかを調べる
DomNode->insert_before /// domelement DomNode->insert_before ( domelement $newnode , domelement $refnode )\n新規ノードを子ノードとして挿入する
DomNode->is_blank_node /// bool DomNode->is_blank_node ( void )\nノードが空かどうかを調べる
DomNode->last_child /// domelement DomNode->last_child ( void )\n最後の子ノードを返す
DomNode->next_sibling /// domelement DomNode->next_sibling ( void )\n次の兄弟ノードを返す
DomNode->node_name /// string DomNode->node_name ( void )\nノード名を返す
DomNode->node_type /// int DomNode->node_type ( void )\nノードの型を返す
DomNode->node_value /// string DomNode->node_value ( void )\nノードの値を返す
DomNode->owner_document /// domdocument DomNode->owner_document ( void )\nこのノードが属する文章を返す
DomNode->parent_node /// domnode DomNode->parent_node ( void )\n親ノードを返す
DomNode->prefix /// string DomNode->prefix ( void )\nノードの名前空間接頭辞を返す
DomNode->previous_sibling /// domelement DomNode->previous_sibling ( void )\n前の兄弟ノードを返す
DomNode->remove_child /// domtext DomNode->remove_child ( domtext $oldchild )\n子ノードのリストから子ノードを削除する
DomNode->replace_child /// domelement DomNode->replace_child ( domelement $newnode , domelement $oldnode )\n子ノードを置換する
DomNode->replace_node /// domelement DomNode->replace_node ( domelement $newnode )\nノードを置換する
DomNode->set_content /// bool DomNode->set_content ( string $content )\nノードの内容を設定する
DomNode->set_name /// bool DomNode->set_name ( void )\nノード名を設定する
DomNode->set_namespace /// void DomNode->set_namespace ( string $uri [, string $prefix ] )\nノードの名前空間を設定する
DomNode->unlink_node /// void DomNode->unlink_node ( void )\nノードを削除する
DomProcessingInstruction->data /// string data ( void )\nPI ノードのデータを返す
DomProcessingInstruction->target /// string target ( void )\nPI ノードのターゲットを返す
DomXsltStylesheet->process /// DomDocument process ( DomDocument $xml_doc [, array $xslt_params [, bool $is_xpath_param [, string $profile_filename ]]] )\nDomDocument オブジェクトに XSLT 変換を適用する
DomXsltStylesheet->result_dump_file /// string result_dump_file ( DomDocument $xmldoc , string $filename )\nXSLT 変換の結果をファイルにダンプする
DomXsltStylesheet->result_dump_mem /// string result_dump_mem ( DomDocument $xmldoc )\nXSLT 変換の結果を文字列にダンプする
domxml_new_doc /// DomDocument domxml_new_doc ( string $version )\n空の新規 XMLドキュメントを作成する
domxml_open_file /// DomDocument domxml_open_file ( string $filename [, int $mode [, array &$error ]] )\nXML ファイルから DOM オブジェクトを作成する
domxml_open_mem /// DomDocument domxml_open_mem ( string $str [, int $mode [, array &$error ]] )\nXML 文章から DOM オブジェクトを作成する
domxml_version /// string domxml_version ( void )\nXML ライブラリのバージョンを取得する
domxml_xmltree /// DomDocument domxml_xmltree ( string $str )\nXML 文章から PHP オブジェクトツリーを作成する
domxml_xslt_stylesheet_doc /// DomXsltStylesheet domxml_xslt_stylesheet_doc ( DomDocument $xsl_doc )\nDomDocument オブジェクトから DomXsltStylesheet オブジェクトを作成する
domxml_xslt_stylesheet_file /// DomXsltStylesheet domxml_xslt_stylesheet_file ( string $xsl_file )\nファイル中の XSL 文章から DomXsltStylesheet オブジェクトを作成する
domxml_xslt_stylesheet /// DomXsltStylesheet domxml_xslt_stylesheet ( string $xsl_buf )\n文字列での XSL 文章から DomXsltStylesheet オブジェクトを作成する
domxml_xslt_version /// int domxml_xslt_version ( void )\nXSLT ライブラリのバージョンを取得する
xpath_eval_expression /// XPathObject xpath_eval_expression ( string $expression [, domnode $contextnode ] )\n与えられた文字列で XPath のロケーションパスを評価する
xpath_eval /// XPathObject xpath_eval ( string $xpath_expression [, domnode $contextnode ] )\n与えられた文字列で XPath のロケーションパスを評価する
xpath_new_context /// XPathContext xpath_new_context ( domdocument $dom_document )\n新規 xpath コンテキストを作成する
xpath_register_ns_auto /// bool xpath_register_ns_auto ( XPathContext $xpath_context [, object $context_node ] )\n与えられた XPath コンテキストに与えられた名前空間を登録する
xpath_register_ns /// bool xpath_register_ns ( XPathContext $xpath_context , string $prefix , string $uri )\n与えられた XPath コンテキストに与えられた名前空間を登録する
xptr_eval /// int xptr_eval ( string $eval_str [, domnode $contextnode ] )\n指定した文字列の XPtr ロケーションパスを評価する
xptr_new_context /// XPathContext xptr_new_context ( void )\n新規 XPath コンテキストを作成する
libxml_clear_errors /// void libxml_clear_errors ( void )\nlibxmlエラーハンドラをクリアする
libxml_get_errors /// array libxml_get_errors ( void )\nエラー配列を取得する
libxml_get_last_error /// LibXMLError libxml_get_last_error ( void )\nlibxmlから直近のエラーを取得する
libxml_set_streams_context /// void libxml_set_streams_context ( resource $streams_context )\n次のlibxmlドキュメントの読込／書きこみのためにストリームコンテキストを設定する
libxml_use_internal_errors /// bool libxml_use_internal_errors ([ bool $use_errors= false ] )\nlibxmlエラーを無効にし、ユーザが必要に応じてエラー情報を取得できるようにする
qdom_error /// string qdom_error ( void )\n直近の QDOM 操作からのエラー文字列、 またはエラーが発生しなかった場合に FALSE を返す
qdom_tree /// QDomDocument qdom_tree ( string $doc )\nXML 文字列のツリーを作成する
SDO_DAS_ChangeSummary::beginLogging /// void SDO_DAS_ChangeSummary::beginLogging ( void )\n変更内容の記録を開始する
SDO_DAS_ChangeSummary::endLogging /// void SDO_DAS_ChangeSummary::endLogging ( void )\n変更内容の記録を終了する
SDO_DAS_ChangeSummary::getChangeType /// int SDO_DAS_ChangeSummary::getChangeType ( SDO_DataObject $dataObject )\nSDO_DataObject への変更の型を取得する
SDO_DAS_ChangeSummary::getChangedDataObjects /// SDO_List SDO_DAS_ChangeSummary::getChangedDataObjects ( void )\n変更内容から、変更されたデータオブジェクトを取得する
SDO_DAS_ChangeSummary::getOldContainer /// SDO_DataObject SDO_DAS_ChangeSummary::getOldContainer ( SDO_DataObject $data_object )\n削除された SDO_DataObject の削除前のコンテナを取得する
SDO_DAS_ChangeSummary::getOldValues /// SDO_List SDO_DAS_ChangeSummary::getOldValues ( SDO_DataObject $data_object )\n変更された SDO_DataObject の変更前の値を取得する
SDO_DAS_ChangeSummary::isLogging /// bool SDO_DAS_ChangeSummary::isLogging ( void )\n変更内容が記録されるようになっているかどうかを調べる
SDO_DAS_DataFactory::addPropertyToType /// void SDO_DAS_DataFactory::addPropertyToType ( string $parent_type_namespace_uri , string $parent_type_name , string $property_name , string $type_namespace_uri , string $type_name [, array $options ] )\n型にプロパティを追加する
SDO_DAS_DataFactory::addType /// void SDO_DAS_DataFactory::addType ( string $type_namespace_uri , string $type_name [, array $options ] )\nモデルに新しい型を追加する
SDO_DAS_DataFactory::getDataFactory /// SDO_DAS_DataFactory SDO_DAS_DataFactory::getDataFactory ( void )\nデータファクトリのインスタンスを取得する
SDO_DAS_DataObject::getChangeSummary /// SDO_DAS_ChangeSummary SDO_DAS_DataObject::getChangeSummary ( void )\nデータオブジェクトの変更内容を取得する
SDO_DAS_Setting::getListIndex /// int SDO_DAS_Setting::getListIndex ( void )\n複数の値を持つプロパティのインデックスを取得する
SDO_DAS_Setting::getPropertyIndex /// int SDO_DAS_Setting::getPropertyIndex ( void )\n変更されたプロパティのプロパティインデックスを取得する
SDO_DAS_Setting::getPropertyName /// string SDO_DAS_Setting::getPropertyName ( void )\n変更されたプロパティのプロパティ名を取得する
SDO_DAS_Setting::getValue /// mixed SDO_DAS_Setting::getValue ( void )\n変更されたプロパティの変更前の値を取得する
SDO_DAS_Setting::isSet /// bool SDO_DAS_Setting::isSet ( void )\n変更前にプロパティが設定されていたかどうかを調べる
SDO_DataFactory::create /// void SDO_DataFactory::create ( string $type_namespace_uri , string $type_name )\nSDO_DataObject を作成する
SDO_DataObject::clear /// void SDO_DataObject::clear ( void )\nSDO_DataObject のプロパティを消去する
SDO_DataObject::createDataObject /// SDO_DataObject SDO_DataObject::createDataObject ( mixed $identifier )\n新しい子 SDO_DataObject を作成する
SDO_DataObject::getContainer /// SDO_DataObject SDO_DataObject::getContainer ( void )\nデータオブジェクトのコンテナを取得する
SDO_DataObject::getSequence /// SDO_Sequence SDO_DataObject::getSequence ( void )\nデータオブジェクトのシーケンスを取得する
SDO_DataObject::getTypeName /// string SDO_DataObject::getTypeName ( void )\nデータオブジェクトの型の名前を取得する
SDO_DataObject::getTypeNamespaceURI /// string SDO_DataObject::getTypeNamespaceURI ( void )\nこのデータオブジェクトの型の名前空間 URI を取得する
SDO_Exception::getCause /// mixed SDO_Exception::getCause ( void )\n例外の原因を取得する
SDO_List::insert /// void SDO_List::insert ( mixed $value [, int $index ] )\nリストに挿入する
SDO_Model_Property::getContainingType /// SDO_Model_Type SDO_Model_Property::getContainingType ( void )\nこのプロパティを含む SDO_Model_Type を取得する
SDO_Model_Property::getDefault /// mixed SDO_Model_Property::getDefault ( void )\nプロパティのデフォルト値を取得する
SDO_Model_Property::getName /// string SDO_Model_Property::getName ( void )\nSDO_Model_Property の名前を取得する
SDO_Model_Property::getType /// SDO_Model_Type SDO_Model_Property::getType ( void )\nプロパティの SDO_Model_Type を取得する
SDO_Model_Property::isContainment /// bool SDO_Model_Property::isContainment ( void )\nプロパティが包含関係を定義しているかどうかを調べる
SDO_Model_Property::isMany /// bool SDO_Model_Property::isMany ( void )\nプロパティが複数の値を持つかどうかを調べる
SDO_Model_ReflectionDataObject::__construct /// SDO_Model_ReflectionDataObject SDO_Model_ReflectionDataObject::__construct ( SDO_DataObject $data_object )\nSDO_Model_ReflectionDataObject を作成する
SDO_Model_ReflectionDataObject::export /// mixed SDO_Model_ReflectionDataObject::export ( SDO_Model_ReflectionDataObject $rdo [, bool $return ] )\nSDO_DataObject を表す文字列を取得する
SDO_Model_ReflectionDataObject::getContainmentProperty /// SDO_Model_Property SDO_Model_ReflectionDataObject::getContainmentProperty ( void )\nデータオブジェクトとの包含関係を定義しているプロパティを取得する
SDO_Model_ReflectionDataObject::getInstanceProperties /// array SDO_Model_ReflectionDataObject::getInstanceProperties ( void )\nSDO_DataObject のインスタンスプロパティを取得する
SDO_Model_ReflectionDataObject::getType /// SDO_Model_Type SDO_Model_ReflectionDataObject::getType ( void )\nSDO_DataObject の SDO_Model_Type を取得する
SDO_Model_Type::getBaseType /// SDO_Model_Type SDO_Model_Type::getBaseType ( void )\nこの型の基底型を取得する
SDO_Model_Type::getName /// string SDO_Model_Type::getName ( void )\n型の名前を取得する
SDO_Model_Type::getNamespaceURI /// string SDO_Model_Type::getNamespaceURI ( void )\n型の名前空間 URI を取得する
SDO_Model_Type::getProperties /// array SDO_Model_Type::getProperties ( void )\n型で定義されている SDO_Model_Property オブジェクトを取得する
SDO_Model_Type::getProperty /// SDO_Model_Property SDO_Model_Type::getProperty ( mixed $identifier )\n型の SDO_Model_Property を取得する
SDO_Model_Type::isAbstractType /// bool SDO_Model_Type::isAbstractType ( void )\nこの SDO_Model_Type が抽象データ型であるかどうかを調べる
SDO_Model_Type::isDataType /// bool SDO_Model_Type::isDataType ( void )\nこの SDO_Model_Type がプリミティブなデータ型であるかどうかを調べる
SDO_Model_Type::isInstance /// bool SDO_Model_Type::isInstance ( SDO_DataObject $data_object )\nSDO_DataObject が、この SDO_Model_Type のインスタンスであるかどうかを調べる
SDO_Model_Type::isOpenType /// bool SDO_Model_Type::isOpenType ( void )\nこの型がオープン型であるかどうかを調べる
SDO_Model_Type::isSequencedType /// bool SDO_Model_Type::isSequencedType ( void )\nこの型がシーケンス型であるかどうかを調べる
SDO_Sequence::getProperty /// SDO_Model_Property SDO_Sequence::getProperty ( int $sequence_index )\n指定したシーケンスインデックスに対応するプロパティを返す
SDO_Sequence::insert /// void SDO_Sequence::insert ( mixed $value [, int $sequenceIndex [, mixed $propertyIdentifier ]] )\nシーケンスに挿入する
SDO_Sequence::move /// void SDO_Sequence::move ( int $toIndex, int $fromIndex )\nシーケンス上の指定した位置に項目を移動する
SDO_DAS_Relational::applyChanges /// void SDO_DAS_Relational::applyChanges ( PDO $database_handle , SDODataObject $root_data_object )\nデータグラフに対する変更を、データベースに書き戻す
SDO_DAS_Relational::__construct /// SDO_DAS_Relational SDO_DAS_Relational::__construct ( array $database_metadata [, string $application_root_type [, array $SDO_containment_references_metadata ]] )\nリレーショナルデータアクセスサービスのインスタンスを作成する
SDO_DAS_Relational::createRootDataObject /// SDODataObject SDO_DAS_Relational::createRootDataObject ( void )\n別の空のデータグラフ内の、特別なルートオブジェクトを返す。 データグラフをスクラッチから作成する際に使用する
SDO_DAS_Relational::executePreparedQuery /// SDODataObject SDO_DAS_Relational::executePreparedQuery ( PDO $database_handle , PDOStatement $prepared_statement , array $value_list [, array $column_specifier ] )\nプリペアドステートメントとして渡された SQL クエリにプレースホルダ置換用の値を指定して実行し、 結果を正規化されたデータグラフ形式で返す
SDO_DAS_Relational::executeQuery /// SDODataObject SDO_DAS_Relational::executeQuery ( PDO $database_handle , string $SQL_statement [, array $column_specifier ] )\nSQL クエリをリレーショナルデータベースに対して実行し、 結果を正規化されたデータグラフ形式で返す
SDO_DAS_XML_Document::getRootDataObject /// SDO_DataObject SDO_DAS_XML_Document::getRootDataObject ( void )\nルート SDO_DataObject を返す
SDO_DAS_XML_Document::getRootElementName /// string SDO_DAS_XML_Document::getRootElementName ( void )\nルート要素の名前を返す
SDO_DAS_XML_Document::getRootElementURI /// string SDO_DAS_XML_Document::getRootElementURI ( void )\nルート要素の URI 文字列を返す
SDO_DAS_XML_Document::setEncoding /// void SDO_DAS_XML_Document::setEncoding ( string $encoding )\nエンコーディングを文字列で設定する
SDO_DAS_XML_Document::setXMLDeclaration /// void SDO_DAS_XML_Document::setXMLDeclaration ( bool $xmlDeclatation )\nxml 宣言を設定する
SDO_DAS_XML_Document::setXMLVersion /// void SDO_DAS_XML_Document::setXMLVersion ( string $xmlVersion )\nxml バージョンを文字列で設定する
SDO_DAS_XML::addTypes /// void SDO_DAS_XML::addTypes ( string $xsd_file )\n2 番目以降のスキーマファイルを SDO_DAS_XML オブジェクトに読み込む
SDO_DAS_XML::create /// SDO_DAS_XML SDO_DAS_XML::create ([ mixed $xsd_file [, string $key ]] )\nスキーマファイルを指定して SDO_DAS_XML オブジェクトを作成する
SDO_DAS_XML::createDataObject /// SDO_DataObject SDO_DAS_XML::createDataObject ( string $namespace_uri , string $type_name )\n名前空間 URI および型名を指定して SDO_DataObject を作成する
SDO_DAS_XML::createDocument /// SDO_DAS_XML_Document SDO_DAS_XML::createDocument ([ string $document_element_name ] )\nファイルや文字列から読み込まずに、 XML ドキュメントオブジェクトをスクラッチから作成する
SDO_DAS_XML::loadFile /// SDO_XMLDocument SDO_DAS_XML::loadFile ( string $xml_file )\nxml インスタンスドキュメントへのパスを指定し、 SDO_DAS_XML_Document オブジェクトを返す
SDO_DAS_XML::loadString /// SDO_DAS_XML_Document SDO_DAS_XML::loadString ( string $xml_string )\nxml インスタンス文字列を指定し、 SDO_DAS_XML_Document オブジェクトを返す
SDO_DAS_XML::saveFile /// void SDO_DAS_XML::saveFile ( SDO_XMLDocument $xdoc , string $xml_file [, int $indent ] )\nSDO_DAS_XML_Document オブジェクトをファイルに保存する
SDO_DAS_XML::saveString /// string SDO_DAS_XML::saveString ( SDO_XMLDocument $xdoc [, int $indent ] )\nSDO_DAS_XML_Document オブジェクトを文字列に保存する
SimpleXMLElement::addAttribute /// void addAttribute ( string $name , string $value [, string $namespace ] )\nSimpleXML 要素に属性を追加する
SimpleXMLElement::addChild /// SimpleXMLElement addChild ( string $name [, string $value [, string $namespace ]] )\nXML ノードに子要素を追加する
SimpleXMLElement::asXML /// mixed asXML ([ string $filename ] )\nSimpleXML 要素に基づき整形式の XML 文字列を返す
SimpleXMLElement::attributes /// SimpleXMLElement attributes ([ string $ns [, bool $is_prefix ]] )\n要素の属性を定義する
SimpleXMLElement::children /// SimpleXMLElement children ([ string $ns [, bool $is_prefix ]] )\n指定したノードの子ノードを見付ける
SimpleXMLElement::__construct /// 新しい SimpleXMLElement オブジェクトを作成する
SimpleXMLElement::getDocNamespaces /// array getDocNamespaces ([ bool $recursive ] )\nドキュメントで宣言されている名前空間を返す
SimpleXMLElement::getName /// string getName ( void )\nXML 要素の名前を取得する
SimpleXMLElement::getNamespaces /// array getNamespaces ([ bool $recursive ] )\nドキュメントで使用している名前空間を返す
SimpleXMLElement::registerXPathNamespace /// bool registerXPathNamespace ( string $prefix , string $ns )\n次の XPath クエリ用の prefix/ns コンテキストを作成する
SimpleXMLElement::xpath /// array xpath ( string $path )\nXML データに Xpath クエリを実行する
simplexml_import_dom /// SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name= "SimpleXMLElement" ] )\nDOM ノードから SimpleXMLElement オブジェクトを取得する
simplexml_load_file /// object simplexml_load_file ( string $filename [, string $class_name= "SimpleXMLElement" [, int $options= 0 [, string $ns [, bool $is_prefix= false ]]]] )\nXMLファイルをパースし、オブジェクトに代入する
simplexml_load_string /// object simplexml_load_string ( string $data [, string $class_name= "SimpleXMLElement" [, int $options= 0 [, string $ns [, bool $is_prefix= false ]]]] )\nXML 文字列をオブジェクトに代入する
wddx_add_vars /// bool wddx_add_vars ( resource $packet_id , mixed $var_name [, mixed $... ] )\n指定した ID の WDDX パケットを追加する
wddx_deserialize /// wddx_unserialize のエイリアス
wddx_packet_end /// string wddx_packet_end ( resource $packet_id )\n指定した ID の WDDX パケットを終了する
wddx_packet_start /// resource wddx_packet_start ([ string $comment ] )\n新規の WDDX パケットを内部の構造体を用いて開始する
wddx_serialize_value /// string wddx_serialize_value ( mixed $var [, string $comment ] )\n単一の値を WDDX パケットにシリアライズする
wddx_serialize_vars /// string wddx_serialize_vars ( mixed $var_name [, mixed $... ] )\n変数を WDDX パケットにシリアライズする
wddx_unserialize /// mixed wddx_unserialize ( string $packet )\nシリアライズされた WDDX パケットを元に戻す
utf8_decode /// string utf8_decode ( string $data )\nUTF-8 エンコードされた ISO-8859-1 文字列をシングルバイトの ISO-8859-1 に変換する
utf8_encode /// string utf8_encode ( string $data )\nISO-8859-1 文字列を UTF-8 にエンコードする
xml_error_string /// string xml_error_string ( int $code )\nXML パーサのエラー文字列を得る
xml_get_current_byte_index /// int xml_get_current_byte_index ( resource $parser )\nXML パーサのカレントのバイトインデックスを得る
xml_get_current_column_number /// int xml_get_current_column_number ( resource $parser )\nXML パーサのカレントのカラム番号を取得する
xml_get_current_line_number /// int xml_get_current_line_number ( resource $parser )\nXML パーサのカレントの行番号を得る
xml_get_error_code /// int xml_get_error_code ( resource $parser )\nXML パーサのエラーコードを得る
xml_parse_into_struct /// int xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] )\n配列構造体に XML データを処理する
xml_parse /// int xml_parse ( resource $parser , string $data [, bool $is_final= false ] )\nXML ドキュメントの処理を開始する
xml_parser_create_ns /// resource xml_parser_create_ns ([ string $encoding [, string $separator ]] )\n名前空間をサポートした XML パーサを生成する
xml_parser_create /// resource xml_parser_create ([ string $encoding ] )\nXML パーサを作成する
xml_parser_free /// bool xml_parser_free ( resource $parser )\nXML パーサを解放する
xml_parser_get_option /// mixed xml_parser_get_option ( resource $parser , int $option )\nXML パーサからオプションを得る
xml_parser_set_option /// bool xml_parser_set_option ( resource $parser , int $option , mixed $value )\nXML パーサのオプションを設定する
xml_set_character_data_handler /// bool xml_set_character_data_handler ( resource $parser , callback $handler )\n文字データハンドラを設定する
xml_set_default_handler /// bool xml_set_default_handler ( resource $parser , callback $handler )\nデフォルトのハンドラを設定する
xml_set_element_handler /// bool xml_set_element_handler ( resource $parser , callback $start_element_handler , callback $end_element_handler )\n開始要素および終了要素のハンドラを設定する
xml_set_end_namespace_decl_handler /// bool xml_set_end_namespace_decl_handler ( resource $parser , callback $handler )\n名前空間終了ハンドラを設定する
xml_set_external_entity_ref_handler /// bool xml_set_external_entity_ref_handler ( resource $parser , callback $handler )\n外部エンティティリファレンスハンドラを設定する
xml_set_notation_decl_handler /// bool xml_set_notation_decl_handler ( resource $parser , callback $handler )\n表記法宣言ハンドラを設定する
xml_set_object /// bool xml_set_object ( resource $parser , object &$object )\nオブジェクト内部で XML パーサを使用する
xml_set_processing_instruction_handler /// bool xml_set_processing_instruction_handler ( resource $parser , callback $handler )\n処理命令 (PI) 用ハンドラを設定する
xml_set_start_namespace_decl_handler /// bool xml_set_start_namespace_decl_handler ( resource $parser , callback $handler )\n名前空間開始ハンドラを設定する
xml_set_unparsed_entity_decl_handler /// bool xml_set_unparsed_entity_decl_handler ( resource $parser , callback $handler )\n処理されないエンティティ宣言用ハンドラを設定する
XMLWriter::endAttribute /// bool endAttribute ( void )\n属性を終了する
XMLWriter::endCData /// bool endCData ( void )\n現在の CDATA を終了する
XMLWriter::endComment /// bool endComment ( void )\nコメントの終了部を作成する
XMLWriter::endDocument /// bool endDocument ( void )\n現在のドキュメントを終了する
XMLWriter::endDTDAttlist /// bool endDTDAttlist ( void )\n現在の DTD 属性リストを終了する
XMLWriter::endDTDElement /// bool endDTDElement ( void )\n現在の DTD 要素を終了する
XMLWriter::endDTDEntity /// bool endDTDEntity ( void )\n現在の DTD エンティティを終了する
XMLWriter::endDTD /// bool endDTD ( void )\n現在の DTD を終了する
XMLWriter::endElement /// bool endElement ( void )\n現在の要素を終了する
XMLWriter::endPI /// bool endPI ( void )\n現在の PI (処理命令) を終了する
XMLWriter::flush /// mixed flush ([ bool $empty ] )\n現在のバッファをフラッシュする
XMLWriter::fullEndElement /// bool fullEndElement ( void )\n現在の要素を終了する
XMLWriter::openMemory /// bool openMemory ( void )\n文字列の出力にメモリを使用する新しい xmlwriter を作成する
XMLWriter::openURI /// bool openURI ( string $uri )\nソース URI を指定して新しい xmlwriter を作成する
XMLWriter::outputMemory /// string outputMemory ([ bool $flush ] )\n現在のバッファを返す
XMLWriter::setIndentString /// bool setIndentString ( string $indentString )\n字下げに使用する文字列を設定する
XMLWriter::setIndent /// bool setIndent ( bool $indent )\n字下げの on/off を切り替える
XMLWriter::startAttributeNS /// bool startAttributeNS ( string $prefix , string $name , string $uri )\n名前空間つきの属性を開始する
XMLWriter::startAttribute /// bool startAttribute ( string $name )\n属性を開始する
XMLWriter::startCData /// bool startCData ( void )\nCDATA の開始タグを作成する
XMLWriter::startComment /// bool startComment ( void )\nコメントを開始する
XMLWriter::startDocument /// bool startDocument ([ string $version [, string $encoding [, string $standalone ]]] )\nドキュメントタグを作成する
XMLWriter::startDTDAttlist /// bool startDTDAttlist ( string $name )\nDTD 属性リストを開始する
XMLWriter::startDTDElement /// bool startDTDElement ( string $qualifiedName )\nDTD 要素を開始する
XMLWriter::startDTDEntity /// bool startDTDEntity ( string $name , bool $isparam )\nDTD エンティティを開始する
XMLWriter::startDTD /// bool startDTD ( string $qualifiedName [, string $publicId [, string $systemId ]] )\nDTD の開始タグを作成する
XMLWriter::startElementNS /// bool startElementNS ( string $prefix , string $name , string $uri )\n名前空間つき要素の開始タグを作成する
XMLWriter::startElement /// bool startElement ( string $name )\n要素の開始タグを作成する
XMLWriter::startPI /// bool startPI ( string $target )\nPI (処理命令) の開始タグを作成する
XMLWriter::text /// bool text ( string $content )\nテキストを書き込む
XMLWriter::writeAttributeNS /// bool writeAttributeNS ( string $prefix , string $name , string $uri , string $content )\n名前空間つき属性全体を書き込む
XMLWriter::writeAttribute /// bool writeAttribute ( string $name , string $value )\n属性全体を書き込む
XMLWriter::writeCData /// bool writeCData ( string $content )\nCDATA タグ全体を書き込む
XMLWriter::writeComment /// bool writeComment ( string $content )\nコメントタグ全体を書き込む
XMLWriter::writeDTDAttlist /// bool writeDTDAttlist ( string $name , string $content )\nDTD 属性リストタグ全体を書き込む
XMLWriter::writeDTDElement /// bool writeDTDElement ( string $name , string $content )\nDTD 要素タグ全体を書き込む
XMLWriter::writeDTDEntity /// bool writeDTDEntity ( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )\nDTD エンティティタグ全体を書き込む
XMLWriter::writeDTD /// bool writeDTD ( string $name [, string $publicId [, string $systemId [, string $subset ]]] )\nDTD タグ全体を書き込む
XMLWriter::writeElementNS /// bool writeElementNS ( string $prefix , string $name , string $uri [, string $content ] )\n名前空間つき要素タグ全体を書き込む
XMLWriter::writeElement /// bool writeElement ( string $name [, string $content ] )\n要素タグ全体を書き込む
XMLWriter::writePI /// bool writePI ( string $target , string $content )\nPI (処理命令) 書き込む
XMLWriter::writeRaw /// bool writeRaw ( string $content )\n生の XML テキストを書き込む
xslt_backend_info /// string xslt_backend_info ( void )\nバックエンドのコンパイル設定についての情報を返す
xslt_backend_name /// string xslt_backend_name ( void )\nバックエンドの名前を返す
xslt_backend_version /// string xslt_backend_version ( void )\nSablotron のバージョン番号を返す
xslt_create /// resource xslt_create ( void )\n新規の XSLT プロセッサを作成する
xslt_errno /// int xslt_errno ( resource $xh )\nエラー番号を返す
xslt_error /// string xslt_error ( resource $xh )\nエラー文字列を返す
xslt_free /// void xslt_free ( resource $xh )\nXSLT プロセッサを開放する
xslt_getopt /// int xslt_getopt ( resource $processor )\nxsl プロセッサのオプションを取得する
xslt_process /// mixed xslt_process ( resource $xh , string $xmlcontainer , string $xslcontainer [, string $resultcontainer [, array $arguments [, array $parameters ]]] )\nXSLT による変換を行う
xslt_set_base /// void xslt_set_base ( resource $xh , string $uri )\n全ての XSLT 変換用の基準 URI を設定する
xslt_set_encoding /// void xslt_set_encoding ( resource $xh , string $encoding )\nXML ドキュメントをパースするエンコーディングを設定する
xslt_set_error_handler /// void xslt_set_error_handler ( resource $xh , mixed $handler )\nXSLT プロセッサ用のエラーハンドラを設定する
xslt_set_log /// void xslt_set_log ( resource $xh [, mixed $log ] )\nログメッセージを書き込むためのログファイルを設定する
xslt_set_object /// bool xslt_set_object ( resource $processor , object &$obj )\nコールバック関数を解決するためのオブジェクトを設定する
xslt_set_sax_handler /// void xslt_set_sax_handler ( resource $xh , array $handlers )\nXSLT プロセッサに SAX ハンドラを設定する
xslt_set_sax_handlers /// void xslt_set_sax_handlers ( resource $processor , array $handlers )\nXML ドキュメントを処理する際にコールされる SAX ハンドラを設定する
xslt_set_scheme_handler /// void xslt_set_scheme_handler ( resource $xh , array $handlers )\nXSLT プロセッサ用にスキーマハンドラを設定する
xslt_set_scheme_handlers /// void xslt_set_scheme_handlers ( resource $xh , array $handlers )\nXSLT プロセッサに関するスキーマハンドラを設定する
xslt_setopt /// mixed xslt_setopt ( resource $processor , int $newmask )\n与えられた xsl プロセッサにオプションを設定する
